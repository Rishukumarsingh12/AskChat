2025-07-07 02:00:03,734 - INFO - Transcript is successfully fetched by api.
2025-07-07 02:00:03,827 - INFO - Chunks has been successfully created.
2025-07-07 02:00:04,203 - INFO - Use pytorch device_name: cpu
2025-07-07 02:00:04,203 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-07-07 02:00:42,126 - INFO - Loading faiss with AVX2 support.
2025-07-07 02:00:42,564 - INFO - Successfully loaded faiss with AVX2 support.
2025-07-07 02:00:42,577 - INFO - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 02:00:42,597 - INFO - chunks has been successfully stored in vector database.
2025-07-07 02:00:42,597 - INFO - {0: 'd44445ef-61f3-469f-afc1-307672da0a5e', 1: 'a6da683c-975b-44a3-ace7-755099bc4463', 2: '09717529-e65b-4aeb-a42f-369c9c193d01', 3: 'c7646af0-6cdc-4607-b3f9-3cb923a60fb7', 4: '1e502cc4-95b9-4ba7-b494-7dd864ff8c12', 5: '13a56d9d-d247-4e0c-ba81-9bd87697c798', 6: '94c5e975-29a3-4fc6-a1c3-0f9efd43cb7f', 7: 'adb165cb-dc96-435a-89ef-51914a5ada14', 8: '12de12f2-ff9f-484b-87f0-2f92d9365bc8', 9: 'c16f0bad-f130-401a-b38a-d101cf09b177', 10: '65473dbb-7272-4f42-9b87-f7b913fc0a7d', 11: 'cc21388d-e1f4-4b33-92cc-60e41eb4ccce', 12: '8ec7fe71-a10e-4c54-9be7-5bd8066efadc', 13: '050fe6ad-c4c6-49cb-8e90-8e9665b4134c', 14: '687e8cb4-d4c7-4a37-934f-9e0b2fd24824', 15: '43d3a9b1-d4f0-438c-84fa-d060484e9332', 16: '44bba695-ed17-49e0-8db4-95315b71266a', 17: '592b1f3e-2c3c-4af2-be88-8304dc2930c7', 18: '5961d375-2180-4914-a1c2-4a9a879f4207', 19: '263f3ddc-3e0c-4a2a-acf8-d2e2e4864e9c', 20: '131b7cb8-657d-4608-8c39-cd597c891670', 21: '3ea56c53-541f-4435-b28d-5f5d677ecb6e', 22: 'da2473d5-1d4d-44d7-9686-ac2d1ea18335', 23: 'a59c905f-6332-4464-b8ee-ec2db9775ca4', 24: '8d0e36a2-14ad-4f5f-89f6-8035cca70f7d', 25: '8992cb39-6afd-4506-9a59-b80770c39d8a', 26: '368f10eb-63ac-44c4-9fb0-ab1376ab7a4a', 27: '264a9900-26da-45fe-9fd7-52c93a7c3da7', 28: '708d87e0-ab1a-4df3-9483-f971642d7cf1', 29: 'cc43b6f9-f3f8-4f81-87af-409badd21cde', 30: 'b1017805-1baf-4a83-a8a1-1b6bdb677249', 31: '4adc64cd-7c05-4f81-aee9-ccd616697156', 32: 'b6ee1b47-89b9-468a-a9bc-f7f1153852df', 33: '012684f8-a28b-4d86-95d5-7fc731a7a556', 34: 'aa541782-c51b-4d2b-925f-2d246dc76caf', 35: 'e6a9a146-13fe-4ed1-9557-77c7a9253f60', 36: 'a9ef41ca-5c8a-49b6-b4ec-6121cda75356', 37: '29a32e8b-e625-432d-ba76-a4e868fb3d8e', 38: '75cb3150-b334-4880-8457-c53169e60f65', 39: '83a81faf-438b-40c5-9aaf-ce75c6c7d7fb', 40: 'aeefb73c-7a54-4ac5-95d3-07d74647ae11', 41: '8c6a217d-633a-402a-a0fb-8858517d50d8', 42: 'ad398c87-c763-4b44-bedc-9168bde9bc3a', 43: '45d97cfb-b07a-4849-a5a5-916808ed6286', 44: '05f0e360-c26c-4f3b-b49c-43950cb43b5f', 45: '91867980-1d0a-4e50-9eb9-e826d841d0ce', 46: '8205a338-9b53-450b-b3d0-7184479425f7', 47: '2060b8a6-d62e-4fdb-b9a1-256912a95a57', 48: '89e0782a-5e08-4c42-b0a0-bba31455b450', 49: 'b6307b43-cb18-4309-9bfc-6535b49f3554', 50: 'bbd3f81d-c930-4107-bb42-9ef8837dd0eb', 51: '70faa408-dd03-4e32-ad90-96afd8f4e6f6', 52: '0aed58ec-fd73-4be6-8017-9717e001521c', 53: 'fa4d85a1-73b2-46ef-b95e-d6553fe1105b', 54: '2f25ebac-dc62-497b-b3f6-eea6204299ee', 55: '5a2073c0-58ce-4c33-bb29-ea9ec3e8dbc7', 56: 'ef978b97-d50f-4e9c-b7a6-ad99db37ee69', 57: 'a0129e91-3817-4358-9da1-80310f90dd20', 58: '54be57f9-fbc2-4ffe-8e2e-73229ccc2947', 59: '64ab447b-32c4-4c37-a262-4ca2cec6a4e0', 60: 'bc8131b9-b2d5-4802-bf9f-257aaff37f23', 61: 'e5f250f4-8d4a-4b05-9787-46b739f4bf74', 62: 'ae1f0b47-fa68-4d44-9009-01856994778c', 63: '12c8fc85-d089-4e08-9f37-ab34eb08ec50', 64: 'dbabfdf9-e37c-45ce-a372-52be7dc59104', 65: 'e2376916-f3a3-4f03-bce1-49c234c402d0', 66: 'b3383f77-8e5f-47af-b60b-425290fed5c4', 67: 'abe92364-2050-4d72-b014-351b4ed82f02', 68: '465e5572-24f4-4ffe-b0f3-596eabcf155a', 69: '49c82445-e848-42a9-9e05-253b309aadbb', 70: '8d62027d-d15c-4f33-827e-21d945b29a4f', 71: '04b00121-afed-4724-badf-4a9fe1b15128', 72: 'bf89619b-fd90-4214-a963-acd2221aa27b', 73: '616e27bb-0690-4f73-94d8-208b619f13d3', 74: '4675f4e5-1afc-46d3-ba7f-4a4677d3e57d', 75: 'cb68e008-69d4-4450-8890-445950f7aae8', 76: '88835762-19a0-4e10-97e7-efa91846e06a', 77: 'b95f8788-a689-4345-acc5-2b4a1fa91050', 78: 'a9c5df36-94b5-4d18-947c-5b574e0d338e', 79: '7b33ed94-2b7c-4d69-842d-ec8b298e69c2', 80: '7d5cb794-a46a-42ce-a727-9cdbf33f8227', 81: '21b2cd75-9926-43c6-a299-09a4afdab1a1', 82: 'adbe0399-b275-4892-a030-4d69d00544d4', 83: '357a609f-40bf-4328-ae87-9caa170ee755', 84: '313c1a3c-9f2e-484c-9fae-720f2936b093', 85: '48a297b2-288d-49d1-b766-7e45c5a844ca', 86: '6151a7bd-1474-4d4a-bd1e-46590ed8867b', 87: '0eecd47d-0e57-487e-96c7-ec2509b5660d', 88: '55e7b2b2-b282-41e1-8227-9cd10f0310b3', 89: '04babf82-4764-473d-90f4-3b84397dddc1', 90: '7d4dd525-879c-4b95-8667-bac4493e2c99', 91: '8eb2df15-f2ba-4fae-b2cf-4c851fb39250', 92: 'a50f1b62-6f5b-4c38-951d-e3df0ab4ba3b', 93: '5084be65-e917-48af-af18-16fa04a47c90', 94: '9d1e7d71-97d9-40b8-92d5-6a6f2014b4a5', 95: '5b2b8230-f2c4-48ea-a566-aede45f59434', 96: '656c9600-6636-483a-b24e-042db8befa7a', 97: '42e53e65-a752-412e-97b3-9f8bc39d0bf1', 98: 'dee66bf1-48f4-4990-ae7e-63f0358e0dc7', 99: '55b0d0a3-dc3b-47d3-970c-ebd96bd9ad0f', 100: 'ea521ed9-b12d-4657-9ad1-38232e8cb1c0', 101: '7c639f41-0f4d-4b5a-bbcf-e847a60743d1', 102: '48f28ed5-05ec-4b0b-b86c-a0a864820890', 103: '9ebb6a5b-7b90-4a18-9a04-1b5a694044ec', 104: '5402f504-cf54-4cb6-bd1e-197ad4c132ac', 105: '11170841-b32d-40cb-a9c1-7a5861735f65', 106: 'c4042ff2-7cd5-4604-99d9-6690225283de', 107: 'bfcab121-7687-4bfe-ba13-cbbbbb86efef', 108: 'd36670c9-1c75-4462-afa8-0beb01746871', 109: '28db6252-7c73-46bf-a830-13c6dc415084', 110: 'a66159f4-da17-43d0-bea2-25b1d7e4d0f7', 111: 'dfb82617-b5c7-43b9-9e28-3151236f1ec0', 112: '4a8b8246-ef66-407f-b16d-dc5404493774', 113: '7b9294b9-ec09-40a4-bffd-5e7722197199', 114: 'f3ff6447-bef8-4b06-8214-d16d03a4bde3', 115: '23a22623-df01-471a-bd75-c0625273021a', 116: '03545365-9780-441f-9cd6-814542bcc378', 117: '5a83574d-dbc0-416c-900f-be343d28188c', 118: 'e718ac5c-e758-40e4-be1f-152665d4412f', 119: 'c36a21c0-0165-4f86-9408-e82449c1d83a', 120: '01f8b8e8-6cfe-48e2-be09-18901678bfbd', 121: '74665342-0bfb-4fbe-a5d5-10704bc9be5f', 122: '09d80cf0-d6f7-4f49-be2c-39da976395fb', 123: 'f79d0769-d4b9-4e5d-b66b-2ff6fedef757', 124: 'ca820df2-bfbe-4075-868c-33c6291f7952', 125: '69b897c9-b471-48a7-96b1-d52364794866', 126: '05b0cb24-7cba-46f5-aa61-5fab5e3524af', 127: '013b9c79-c778-4bf0-a748-66742f556329', 128: '749ab05a-8b69-4831-a13a-f8032bb5de13', 129: 'b0241309-4212-4cb8-b53a-e19326532da6', 130: '81ec79ab-8a29-4c75-b3ea-567bbfde5289', 131: '963bb5fc-1fa8-45fe-9010-81b0e707a208', 132: '6a1b90e7-dc87-426a-812d-dd842964bdda', 133: '6814a717-5014-4aed-8ffe-b71cdca5bdd7', 134: 'b1f8219a-473d-44d9-9e9b-00a89c195f8a', 135: 'b4dd6361-5313-4aaf-87a8-856f9193af02', 136: 'e59ceabf-861e-4927-a7e6-69ed4eb527ed', 137: '3fc56d86-7be7-4fc3-accb-42648354503a', 138: 'ff15d073-9481-4cbd-883a-d5fd58073e3f', 139: '75aa4999-d15d-40e5-be19-eefa9522256c', 140: 'a67316be-7c80-4021-9652-ce7e3e488cec', 141: 'dcc6a2b4-cf13-4807-9688-e2cd03951c15', 142: '967533ec-d0cc-42c2-9923-00b2a7df3605', 143: '3129d53d-0f26-4ea7-8823-9944029a38b7', 144: '93e4f35e-0816-4507-acd5-d4bccc182aa6', 145: 'fa4a12f7-6000-4876-b7e3-362b86f59ccd', 146: 'a4d736d7-36a7-4efa-9e65-aac72db31ea2', 147: '17291e3f-a42f-478a-9f97-febfb49878e8', 148: 'ea34c6e2-2333-4385-bbc0-83a6e58cb8e0', 149: '880d20d1-025e-49c9-9d1c-1886371b54e2', 150: 'ec48afc3-f9a9-4586-9291-f669e39461cf', 151: 'a73f8d42-65ab-4606-b7b8-7ba2a38e48b7', 152: '2bb09c90-9d45-4136-b512-af751d6ddd5c', 153: 'e439b572-c746-4a4a-a2ca-f39025b38caa', 154: '0353dfb6-8f9a-4615-a77b-e55e841bfa4d', 155: '11c2632e-3459-4943-96d8-24f9912552f3', 156: 'fb132554-588a-4859-b741-724a646d430b', 157: 'c33a7c0a-149c-4309-91e2-1a1e5b0e0efb', 158: 'bf0ec8a4-418f-4b16-8690-95248518ad6f', 159: '5553deff-60b2-4ec8-bf11-6d0eaa3f4f1e', 160: '09015b01-3669-440d-9bd0-b75c34453692', 161: '56a6c6f4-03ad-4060-b695-b0bfa3cda9c3', 162: '164738b4-ce1e-4406-8c87-7b9c207e10f1', 163: '9b86973c-2beb-44b2-af49-b0ebe789ce1f', 164: '2d771133-ae8e-4506-baa8-2afdaa2e24da', 165: '7d5e4973-deb2-42b2-a768-63869aba2b27', 166: '9c5cddb7-f3e5-41f0-a57e-bd8c45d82819', 167: 'f3205388-db26-4eee-9383-22fc120c1a91', 168: '31c0e43b-790e-4f84-b904-2d04c774c593', 169: 'baa7976e-c05d-4e5c-8b23-71bdf77503fe', 170: 'cd49365b-ab06-49d3-90f0-e01e210430da', 171: '3e4f8dc0-833d-4290-a1b0-96af06ddbcc9', 172: '07710ca9-1b16-491e-81e9-c872857237e6', 173: 'aa4b0d5f-4be0-493e-804d-1c8082d55afa', 174: '6f7b33ea-ca69-4083-90d8-25fb9648553d', 175: '5e7e6ac3-39b8-4bac-b6f4-48cebf82843b', 176: '825e1bf9-0dba-4b0c-9708-d5ef6b3d5718', 177: '61c09e7b-487e-4ebf-acd7-eba81845fbff', 178: '42673b87-e1d2-42d3-afee-ebe3dfd6f26d', 179: 'a7133ddb-1b3d-422e-9bc9-8c1ea8b0524a', 180: '329578e7-162a-4ba5-b0cb-a951b778898b', 181: 'ef5a6712-68df-4fed-89ba-95e3f56ea20d', 182: 'c76ffa93-dbdf-4cf8-bba6-2475b29f2896', 183: 'a180492a-9aa3-458a-9f1e-b078a05084d6', 184: '9ffbc0d6-58bd-4e8d-9654-408852e9c768', 185: 'fa6272f4-841b-44bc-b49b-04d65118a05e', 186: '02f8cdc9-5074-48cf-bd58-a4412be4153e', 187: '9e52341b-b141-4a0e-aad3-549c530289ba', 188: 'ffebfe9d-6a18-40b6-89fe-0b8a2e20ca35', 189: '3836d19c-2b04-4414-9637-bad2b3722c7b', 190: '515b09a2-b34b-427a-80ac-ae53263845bc', 191: '65edbf40-b79b-49f0-9e0b-c7e1f6f079e1', 192: 'f313a064-f855-436e-ad62-437060e4a603', 193: 'c5737ed7-36f5-4621-b1d6-04607bc3f708', 194: '873b14a6-ff63-4ce7-af0b-a4709f6e3d68', 195: 'f9262b50-5ed3-46d2-8b42-f6dbece0fd93', 196: '749a84ae-fae7-4013-b9e9-71184cc5522d', 197: '73ddd48b-1351-4a82-8365-1ef181b32776', 198: '633dd407-6953-467e-a21e-c0981a76bd4a', 199: '05d49ce7-40a2-4bdb-964f-703801f4e5f9', 200: '3af30c6f-3b8a-4e27-9b8c-9454979672a4', 201: '00168e3f-bb82-4a69-8e6b-9adf151e5d4a', 202: 'bdf39f25-92bd-4a44-85f0-7dfd3e126865', 203: 'd9d669a0-c9ad-4c4e-b2ca-a33a29cf94ce', 204: '58a83319-4d12-4a54-9d02-e8c2632d4e84', 205: '4f492e7b-5204-4d6a-bb29-3ea5cdcb7104', 206: '7ff2513a-5a7f-424e-9d2e-b08cea4c4565', 207: '19639c62-ab4a-43dd-9243-c38c8a9af8b2', 208: '1b438501-d6b0-4374-93a1-12997b2a15c5', 209: 'be7d6b83-f4a9-4ec8-a528-217a0d11db77', 210: '159dbc2c-ebe6-41ed-8061-3e463d2bf733', 211: 'd99146e2-9e48-4b62-9432-bc9e999377a8', 212: '5a3ebc0f-114c-4c35-a929-a0d30b9d889e', 213: 'f64f5f5f-d229-400f-81de-db008384cff2', 214: '3f257882-028b-458b-8943-586776cbe64a', 215: '4650d2ce-6349-4db0-bd88-77932cebf47e', 216: '914351d7-2eda-49fe-a675-050a7d87d8be', 217: 'c7369386-fa0b-4035-a649-88b6045c3953', 218: 'd13c9591-973a-4b70-93c1-fca0332624c9', 219: '23308bd8-ee11-4e19-bfdd-cf24c3270781', 220: '4012408b-0fce-4f50-b231-eb73c1e5bb67', 221: '2200a338-f503-4750-b516-ad79e8c2c617', 222: 'cf41ff1b-5bb7-4839-b143-bcd8d05a7852', 223: '7758a142-fab3-4c03-ac7a-3d830e713b8f', 224: '27bb00a5-c3fc-4fc0-b54f-e1bdc4dbb48f', 225: '97eef969-4348-4786-9127-5bc618c556c2', 226: 'a1855a7e-aa9f-42bb-850e-fd17c1838b33', 227: 'c19309ef-2cc0-40dc-aa73-419855f65fde', 228: '278b1417-4fbc-4d06-a0a3-ce96bc7febb5', 229: '14ea8c4d-733b-4812-8d06-c5a9ac68faf1', 230: '111815e8-7a56-46d3-95a8-cb8a97345db7', 231: '64278d27-aaa6-46fa-9c0c-15146789676d', 232: 'dfb919af-2900-4322-b94b-173b40f21dd8', 233: '2f520e0b-5b8f-40a4-be18-569904f03969', 234: '1e1138cc-9533-4add-b612-52725bcd65c0', 235: 'f30861ff-87bc-4e7e-ad47-7872db846c40', 236: 'd31e35cf-0280-4d97-b81e-93156f1ee348', 237: '85e661e0-9002-4483-af3b-6f1a1284dfee', 238: 'e61c0d6a-0ea5-44ec-aef1-f52087ec1f61', 239: '1b299195-98ae-4016-b93b-06e82925f4c7', 240: '7ba19fd6-d695-498f-ad0d-f6e03ee28e2c', 241: 'b8e54f55-e32e-4aaf-af50-4a58f17e0413', 242: '4abe7825-2c76-416d-99e5-8feddee8c193', 243: '989f702b-4fd0-427c-aeb0-d10b67575b89', 244: 'e44ddc85-ba35-4a71-8633-b8b0af1b42d2', 245: 'b82a10ab-8c4f-47cf-aa6c-c752784e13c1', 246: '68bb01c6-19b7-478d-a845-bcccb1db35d4', 247: '6f2d9866-9009-4e39-8801-bba4d0dad7dc', 248: '8d0b197c-eb2e-444b-aa31-870aef80ed81', 249: '0343ca1e-aa8b-4a06-9b0c-7c3a985f1d54', 250: '89c4c2a9-a095-4a25-aff5-5a828edb879d', 251: 'c2b5efcd-8a0f-4f55-ad68-def201e3949d', 252: '63083e47-3176-42eb-b73e-2f4d2d10ea82', 253: 'b159dd71-190b-4ab2-ba13-c3f19a2b8363', 254: 'ff8f795a-3541-42f3-868b-99bff01c9818', 255: '8e52f845-e6b7-4cbc-9ebb-4d55e027c914', 256: '1c07750b-d159-41fd-bca7-33022c695f73', 257: '8607f668-663a-451e-8bcd-11cccdd41903', 258: '57b88336-2795-4bb1-83d5-9cee8b1981ac', 259: '6ad1b6b0-c756-4e64-bf22-89329b87157d', 260: '85ec9bf5-9c95-40bf-be62-163fa62f445a', 261: '6cdc455b-5442-4595-86e2-db0139ecf25a', 262: 'e3b1b722-575b-4388-a2e9-144c68206bf7', 263: '9b2efab8-537b-4b41-a1b5-c0013300c7a1', 264: 'd6542b23-8496-415f-adb3-34283ee41c4d', 265: 'b8edb577-b4d7-4178-99b1-cc5bf86f06ec', 266: 'a87b2e60-0a33-496f-b28c-1a340696320c', 267: '0085093e-0dc7-4458-9511-b505d3e45097', 268: 'a342606e-81d9-4b38-9c2b-a5fdaba7c31e', 269: 'd7414171-64ce-42b3-822c-a70ca69c5425', 270: 'ed47e996-de6e-4eed-bce5-b4377fb57328', 271: 'd6d9707c-80ef-41ca-827f-4249376b9c4a', 272: '291cae71-bbf6-43c9-92b6-095b0f5e98f7', 273: 'c08a1ab6-0d31-46d7-a916-c534b6853c9d', 274: '1968b326-4646-4560-b6bb-0414bde89460', 275: '04ab5fa4-509d-412a-a40d-61aa7590f3bf', 276: '2035ef9b-6b0e-4113-a73d-2be1594ac63e', 277: '3f096b32-12fc-4f8a-a355-4b65715bf405', 278: '41b1ffca-f89a-4786-9b78-fe3cf586a4cb', 279: '174f7587-5e8a-4004-808c-6871fc53aee2', 280: '7b3709f8-f078-4f09-aa65-33bc19c57928', 281: '5db7ffd5-01f9-485e-a261-f7dc83868d34', 282: '250c7752-3da3-4208-b6f6-0c8f01ae6cc4', 283: '061133b2-f18d-4f65-aa9e-2799f6fed177', 284: 'acbb0962-45ab-4e96-a3fc-25ea4b6644fa', 285: 'd4c5a0d1-24f7-420f-bf8e-d6cc14efbd52', 286: '0470acdd-feeb-4a08-8fec-54ecb4e3709d', 287: '6760761e-f1e2-4cba-9c57-dcd330006053', 288: 'dd5f3450-0b5c-46fb-ad5e-2b8f92afa900', 289: '7e0c36f6-1896-46d8-8a39-8ba4519c381c', 290: '5ab3c530-7d96-4148-ad35-2fc8304690ea', 291: '582e5f98-6aa0-402d-9c61-a96d53d65491', 292: '85ce7bdf-a79e-4d1e-b629-b1ccdb459960', 293: '7faa7188-18ae-4eca-a78c-c22a8eb52632', 294: '3f341515-1dfa-42a4-8616-37ef7ba02fe1', 295: 'a9cbbfea-149a-4de6-8a60-49a98a6edea1', 296: '8ae84c19-37d4-4e5e-ba8b-bb721627b9c1', 297: '4da71dbe-872f-451b-9c03-c5dc4bb966c8', 298: '50648e4f-a3fa-49a3-8dd2-86a19e341878', 299: '59a5af06-898f-429e-8525-acb97743fdfe', 300: '2cdcb2d4-cc83-4436-b341-e4bf55b170d9', 301: '0fffda0c-4b1c-4943-be1f-c4a9cc5cfd09', 302: '2062f0b1-fc63-4b3f-8b35-cb0accefcf22', 303: '0eb7452a-7a25-4676-a598-75a24f370dfd', 304: '44675f44-481c-4ac4-b71b-87c14e1c45e1', 305: '66ac3514-7b36-4d62-8eb4-e3d8db61b25f', 306: 'd9c05fb2-dda9-4853-8802-951e02344fff', 307: 'd26d3c91-25fc-4563-82b0-29fade40a771', 308: 'bbde5b91-cb84-4c4c-8b4f-3f47e160abc3', 309: '8dca7b6f-c6ad-4936-88a9-40ece0f0285f', 310: 'cd47808e-f421-4d69-9170-e8984480c3a5', 311: '8705f438-3f38-427a-affe-71f34089120f', 312: '11dc3792-6823-4253-a901-f17cf3c0e14e', 313: 'f9a02ca8-686a-46dc-919c-73fd2c711029', 314: '8ddb4b33-f09a-4a89-b99c-3518c3b9760e', 315: '885ca56d-bdc5-4e45-9354-9349f9342ff5', 316: 'ab5f9bb9-b84c-4fa6-967e-b939b3266d0c', 317: '2df59d57-b0e6-4d8a-aa72-fe904f6c3360', 318: 'c81c39a8-887b-4967-9fee-47b3a6210f35', 319: '496e6d73-0571-43dd-a8a8-08e94a2efb08', 320: 'dd638a3d-7c2f-4394-b61a-9e2852af9a80', 321: 'e46348ab-cfab-467d-80b2-d2b47b421aa3', 322: 'a03ea128-e247-4e2f-b874-b6b79787b32a', 323: '571ddf49-f438-4a19-ab5f-07b1909738ce', 324: 'c88f83ae-0aaf-417e-a3bf-baa2b3cda796', 325: '758fce8e-e2fc-4dc8-9c90-3902e7cf7e63', 326: '059832f3-70a4-46e2-9b85-70ec83e8e280', 327: '70e6d905-82eb-4e1c-a5c8-dd5e8b22ef44', 328: '1e149775-abd7-4ff9-bf5b-61643a2bafdf', 329: 'c51b2f1b-3b92-4daa-b142-fb19664ddbae', 330: 'c1a0c815-fcaf-409c-a226-91bdab4b5106', 331: 'e42c3b24-19f7-4192-8e13-44db4fbef5ca', 332: '16f112d2-76a9-4d02-af88-10c2c97834ab', 333: 'ece86980-25a8-4963-9837-658f79193f84', 334: 'ede99d02-d26b-476f-8752-8b332ce2dd5b', 335: 'bc524e4d-d156-4cba-b2bc-c7dace9b31ed', 336: 'dd04c65b-7c82-4235-8d62-4d87f6cb3313', 337: 'e77cdb7e-70d7-4ee2-876d-90a05c2cf868', 338: '6ca3eccd-7273-483a-933c-d64e5f876359', 339: 'f5563046-2c9d-4d21-9dc4-4812475babf9', 340: '653febe2-ed01-4063-aa70-df05da0122f0', 341: '0fd314f8-4865-4f5c-bad0-244ea33e8324', 342: '582e5869-391a-4ad4-9d43-a879c10dfb9a', 343: '3826d9c8-c1ae-46f9-8029-92f5d62743f4', 344: '5f429565-a40f-4b11-a003-d839c687aa16', 345: 'f9105675-ad32-4609-b965-3b12bb7df00a', 346: '6f5de0dd-2f9c-472b-8131-e1146ac8fb2c', 347: '414e8ac8-4540-4395-9ef5-f7e709bc6f37', 348: '7b211970-6d99-40e1-961d-acd941edd505', 349: 'c4c8ad15-34e2-47ee-8c69-675d73244a23', 350: '6efa8204-882a-4c5d-b854-f2d755e34589', 351: '5f67fb99-2b20-4887-be67-c62d506f8f9a', 352: '67fffaaa-fbda-44c2-bd62-8225e6dc84af', 353: 'c51c6b33-d8f2-4de9-b8ae-8cf2f6093126', 354: 'b7efd528-d68c-45ae-9027-41d6795aabe2', 355: '6309ec5e-ffd4-462e-a2ae-28d6051f326c', 356: 'e32a8db0-48dc-4ecf-a372-501cb34eadc1', 357: '059c60d8-5dbb-48c7-9f5c-8c5b5d270383', 358: 'b36194bd-360d-4588-a525-2e69946ca0d1', 359: '1b8bd945-1a8d-4954-ba5a-69b2a55d5bb7', 360: '8badba5e-183b-42df-aa85-847dd41b912f', 361: '34865c35-d405-4741-a184-6e08ac47a926', 362: '8db5b470-f91d-4f18-8c77-fd5c8be6a2d5', 363: 'dcc27e55-6110-4175-9b87-5240f33a2b17', 364: '9f2425c4-29d9-4a8c-8175-31598d465c2c', 365: '89b5a6ae-6fc0-4d61-bbac-0204430ace3e', 366: '8ae51428-5b2e-4b8d-b62d-29493ac6da57', 367: 'ea196e87-e302-4106-89f1-51f92a16c396', 368: '5cb62379-0e18-40dd-a20b-00b4255ddcf3', 369: '955abdc2-d512-4a58-99be-88faa67d538b', 370: '8085906d-c6a3-4680-9f33-8fcd4cceed10', 371: '6fa03a9e-c291-4185-aba1-cf00e8901065', 372: '4f205a09-57d0-466c-99c1-6f457396f145', 373: '44be76a4-52ca-46d5-b39b-44171f51e509', 374: '6d767a1b-dbcd-4f63-99e5-ec1941f01b04', 375: '3834da11-9c02-451e-9e0e-3176b6b3caf9', 376: 'b451423b-5829-4d1f-8c56-a4df5304e95e', 377: '707323bf-6753-47bc-ba7f-8e7380b26545', 378: '7d30bf5a-cd30-4763-8442-ddd6cffc95ae', 379: 'fb6dc426-9f8b-4584-8822-7b3483d738dc', 380: '1a5d1fc0-1291-497e-a472-23f7d4647332', 381: '70aa4b9f-68ad-46ce-8477-b54d3e36a281', 382: 'efb917ad-7751-4365-bc1f-3854e50878d3', 383: '019c524d-3105-4adf-93ab-71ba5337795b', 384: '75a12366-dc3b-4131-a57c-5dd8bf28a56c', 385: '3fea5746-dc75-4e6f-871f-3b6db1f442c0', 386: 'c7b6382a-a537-44d8-9669-9a9cfba4b1fb', 387: '71ee9f69-00c8-4417-90c7-c78df0bb553d', 388: 'd82327e3-dfd8-4218-9ed6-83bfe5f747ba', 389: '87149bc5-3f0c-4aaf-9f80-df1bc02a6d9b', 390: '783fc9ba-aed9-4ad4-a31d-747472bdecef', 391: '3dbe5735-3244-4bd6-9fe4-87519b2fb5c0', 392: '0071d907-c056-43e6-a72f-ab761b8a3935', 393: '17e939a0-c9aa-4229-895d-b6f0ae188f51', 394: '5dedd2c3-cb49-41c3-9fb2-cb57e67aed91', 395: 'bbce6486-a7bf-49ff-b1c6-8e89c4e379ec', 396: '15034633-1278-4a6b-9dde-198f6e9dbcc6', 397: 'dc7e87d1-2ab2-40dd-9469-2c1cac62548f', 398: '478362b0-3c79-4fb6-8ca1-23a17654fa94', 399: '1e6b4d29-8800-41b7-8447-7d7dd8e69f91', 400: 'b0d294eb-e391-409c-adc0-557872806c20', 401: '9e79be57-8484-4715-ae45-0f89b85d3368', 402: '06a6e7cf-a158-4a27-b691-6ed7800a63c8', 403: 'add3d384-1141-41a6-99c7-a9cd18def53d', 404: 'e4ccb246-68e9-404e-91ea-545a7b383d47', 405: '9bd032d5-26c0-41af-b508-dc2015c45682', 406: '4bc7af67-2351-4832-9b2d-9055dc2f6bba', 407: '9e14464a-0e3e-4afe-b380-2aae12d0439d', 408: 'b25b0ae6-0cd1-4a13-987a-29822f8c7ab2', 409: '06f29b7a-a4b3-472a-b053-263602cf8226', 410: '1772ab9f-4779-4e31-841e-28aaa9fb4cdc', 411: 'dddbe37f-b123-4b76-aa8f-d74e1d1b70e9', 412: '97209951-3cd9-4e50-b44e-923d8dc6542b', 413: 'f4c09408-b2e9-47a4-89da-47796c1d959c', 414: '511b38b6-7bd3-4800-a897-87d4592ae279', 415: 'fbff6257-256b-4deb-92be-c0ad8edce638', 416: '3a0bca14-4df6-4ed0-b6f2-bdb1031cba1c', 417: '4c30e15e-46cf-4a66-ad40-e951037066d6', 418: '1775a26a-16dc-4f68-b19e-b5e21112af57', 419: '67789d7f-258d-4254-8f92-12fb5a0c259c', 420: '546ef158-7f27-4e41-861b-030bcb5b30a0', 421: '36e5dd13-1f19-4cf1-8a21-634e5dc9675d', 422: '96ae75e9-5361-4d72-9b9e-5bf278598bb8', 423: 'cadcdc05-758f-452b-964c-ea68c9ef76c2', 424: 'bd529df1-b00f-4a75-98dd-2414a3f2df07', 425: '397a729e-4d15-4a67-a0f8-f904c37558cb', 426: 'c8942c07-12ce-43af-ac57-759625db14dc', 427: '643ba456-01bb-4941-a1f6-17a2f3e639dc', 428: 'd40ba1de-0216-4576-b51a-a57b6b613523', 429: '8537e782-305a-4ac4-baf0-7836dab869d1', 430: 'ef4b8c23-1662-46c0-9ce4-5fd57e5383e6', 431: '15975d1e-4db3-4617-93c5-087dd11094c6', 432: 'a58e7aca-8f56-4cd9-b7dd-99f2e43648f5', 433: 'bb599e43-678f-42e6-a95a-b4a8af1f6e55', 434: '34b61548-e91b-4cae-a334-d13287e4eed4', 435: 'fe5334df-4daf-4a30-aedd-42af32caf8df', 436: 'f3d56e1a-d71a-4904-a720-8b3b712e13db', 437: 'fb237c4a-bc54-4dd6-a33a-813101d5b3a0', 438: 'd16b79a1-03dc-4b7b-aa37-789169f7a399', 439: 'd158fa9f-d4c8-44e7-8e5b-416846dc72c8', 440: 'cade7783-4dab-4c79-b3b3-cc10274b9590', 441: '34e2049f-f96e-4b7e-8490-13475d74e894', 442: 'b9f9143e-c541-49b1-8938-614e64f2e416', 443: '8f6dd3f3-30be-409a-9ab0-0ab1d41bc276', 444: 'e64451e4-3945-4b4c-a887-9a9c3a804f5a', 445: 'f911096f-baf9-4ec2-916b-4ec529be3d79', 446: '4c5a889a-8d87-48a4-88bc-6b1cfae85c83', 447: '7b48ce05-01a0-4546-a760-f1502ff7b064', 448: '59907318-1b4c-482e-aa29-fa5d3d14cb91', 449: 'd808c906-31c9-4860-87f5-1d49a96e0882', 450: '0741fb64-ed0b-4692-91b9-5c1972544cbf', 451: 'd661454d-d70e-494e-bc69-58ae7353f607', 452: '23a4c1e8-caa9-45c3-b66c-0be16090ff28', 453: 'eb40d1ac-be86-448e-b6ec-7097af3e7f5f', 454: '3562c410-6da7-44fb-b68c-37880b1b7b7d', 455: '4d4d21be-1299-42a6-9064-37846ec39e57', 456: '1fb38b8b-e4dc-42c0-9569-0e2d2726b4e3', 457: '7294ee6c-b242-4252-bca5-de8cc46f36dc', 458: '9621230a-3639-445a-9286-e579dccb6f41', 459: '18b029ae-b4da-4253-8bb6-562cc977ed8e', 460: '29c41214-0e27-4086-a4f1-16ea1941bdf9', 461: 'eb1fc714-d043-4afe-b0a2-4ed1bb9df088', 462: '97d752d4-345e-4f5b-a15a-e6e896915648', 463: 'a0e074c1-26a6-4d6b-a1d1-ab4d995490a7', 464: '12521d19-fe7e-4a92-816b-cec0347ec63b', 465: 'd101e5c1-573d-4efc-9f08-891b8fb1b56d', 466: 'e08ed723-13e4-4804-b091-6eabb2e0b782', 467: '9593efa4-413f-4a62-b29a-31f72735d639', 468: '576b1228-a06b-4d38-a191-5a9e3d3ff166', 469: '27019459-c54f-402d-b805-dd18dd5a8893', 470: '78a265c7-30fe-4e8e-9444-a7136bd451bc', 471: 'c0e518f2-3286-4e51-8907-80c1b018c71f', 472: '7ccdb172-2fbb-4c21-bd86-5707f30e0f0d', 473: 'c7a30a8b-4ce1-47ec-ac07-da06f80b03ba', 474: '69776215-363e-4b71-8c13-69d8855fdf8c', 475: '7dea5cdb-19fa-4ae7-b2cb-e3a9608f540b', 476: 'a8c2f3ba-da42-4c99-af16-a7ff2d6e7af8', 477: '7551bfc2-5192-4162-8963-a5e59eb17f29', 478: 'ecadafbf-f34a-4dfa-bc18-16f56bb2864e', 479: '598ae91a-425e-47b2-9e6d-0503f03a4443', 480: '28cfb91e-80de-4167-b946-78afa1c20079', 481: '8f4f33c0-6868-4e76-9635-53fa71ae772e', 482: '14f4b2df-7938-42a0-85f9-c43344c6a4e0', 483: 'e4acb689-d0cf-4097-b43c-edcfdbe61305', 484: 'e5484254-36d7-4d5b-ae06-ad836e2f7deb', 485: 'b9477c3c-ab7e-4441-8c7a-22395e07e24f', 486: 'ecca0bdf-3abb-4c82-8f88-7ead1b85e251', 487: '525f4db4-aea8-45e1-b943-ad369969553a', 488: '86bba3e2-8cf7-45f2-a67a-13ec6caa4223', 489: 'c42f83a6-8cad-4a61-873a-78b9b5c12109', 490: 'fc56d4a9-d62c-4ea8-9138-8d654313d461', 491: '129a357e-84f9-4696-8741-b02dcf6253a6', 492: 'c1985916-2422-4810-8236-6fa72a406a1f', 493: '69dc5ec8-a42d-4893-ae1a-4b65bb625330', 494: '14ea6758-3716-49f1-8195-b31165cbbe02', 495: '25a35f07-d399-4f8b-bee4-f10035c65c98', 496: '0d328833-e573-4ede-86c2-43d82791d3c4', 497: '3add22fb-3fd0-49df-ad5b-717420190246', 498: '49fa9c25-b226-4be2-993a-ee49c5b6e6ec', 499: '29090197-2fdb-4d01-916f-a3403a485055', 500: '83aaadfd-809c-4792-9472-669c6a9c770d', 501: 'f5aefeed-0d5b-4e5c-ad12-58f04fedec03', 502: '62fab6ce-19fc-47a6-a2d4-057e73b7665c', 503: 'e6776885-7ea1-45e9-8e9e-32f87538880c', 504: 'cfa191cb-84ec-4f85-bcf9-7f6d0fc97ce5', 505: '7f6618b2-f001-447e-82a6-d6d2e6cde6dc', 506: 'cdf22a19-e4d2-4916-8c9e-97e09a7351fa', 507: '913e80d5-5700-4f2e-8f0e-de53d6ca2c82', 508: '4ac6a33a-8b39-49e9-b497-82e4fe435b04', 509: '47313821-fe2f-4355-9579-a979a24ae916', 510: '735ccf16-0e4b-47b6-b76e-7ecf801262d5', 511: 'baa1c4ce-c92e-4354-8f33-19149cda3fac', 512: 'f245930f-3980-42be-89b2-3091821c5390', 513: '63253870-b59f-4561-8029-2b8bd90f2c0b', 514: '9a7cde43-ebbc-449f-8885-c9aed052c50c', 515: '3aacaf5a-50e0-493e-b39d-9c4c8c211d46', 516: '1c1b71d5-cfed-4ecd-b25c-18ce26d56196', 517: '3bfcc4a8-f0d4-4f9c-9be5-cd48189e1a4e', 518: '258b030a-1cfd-48d6-a1de-072d63276c4a', 519: '7cd539aa-b61d-4034-b5b7-516b6915f132', 520: 'de156ef8-aee9-459a-a059-364b4f77019a', 521: '39e3a7c5-f077-44d8-a4cd-c3bb5bdeb1e5', 522: '7bd62344-5049-417b-b439-254aa9d88a9c', 523: '09793698-534e-4b6b-8e0d-39e5335b102b', 524: '435a56f2-b085-4a68-ac57-42fcee56edfc', 525: '48d757d7-1418-4f06-822a-1be847b1e92d', 526: '3458f2ab-5360-49c4-ae12-6e5b38fac88e', 527: 'd6e3ca04-427b-4423-abde-cbd980536d36', 528: '3c8bb2b3-669a-40dd-a43d-e280571179ed', 529: '3cc5c2f5-de33-439b-bb06-5411692d9ff2', 530: 'fc49469d-bcc2-4977-8d63-e666f74d9914', 531: '4f860942-b7f2-46d2-92f9-10665ac0ee31', 532: '4cca93fc-0572-4614-a2ba-7c2c2b45a54b', 533: 'e30d0b18-3334-40d1-8833-7bbccc35d139', 534: 'bc456be5-613a-4659-9bff-012f083c6062', 535: '6e688221-4975-4e56-829c-7f39450ce5a3', 536: '8a35c645-dc15-4a1d-a65d-6fce003a9793', 537: '871d4c22-5da5-4e84-b311-decf776ad2f6', 538: '762d77cc-4d86-422c-ba76-1984787732c6', 539: '70ef7db8-6e3d-419a-b9b1-553a71155100', 540: 'd7e58482-4df4-4171-89c0-241008c5bb96', 541: '52e846ce-f7ab-494e-b549-c14f8096dc54', 542: 'e17c036a-4309-47c9-b750-84de2c35ee99', 543: '571608fb-a3f9-4abf-9ade-5f202a5ec240', 544: 'c3dda950-a6de-4bb1-9c51-2a668b2d1e7c', 545: '617502ef-3995-4aa8-9f72-cbe6f8eb5619', 546: 'b60805eb-de09-42fc-9a6b-4dd8323fc0bf', 547: '27330977-a50f-421e-8e16-ea25fa0852eb', 548: '12cd8ce2-4fcb-404c-9e72-83770df2d114', 549: '83d3dabe-1f69-443e-a8f2-e0f0a1b4d74e', 550: '2cdb0be8-2545-41b1-a1a2-5477ef0210cc', 551: '693c0344-4f9b-4a07-8afd-7417b28e5281', 552: 'aff70228-7d43-4b1e-90b1-64d9661f8702', 553: '779aee41-5e0e-4e80-b8fb-473d5eb8ddeb', 554: 'd89ac98f-968a-4509-a93a-aab88836fff9', 555: '795fedf4-3e32-459f-b607-133a2472b438', 556: '0321120d-f19b-4535-bf14-f581ede22e23', 557: '6b195155-9bc9-400d-8257-e937d03d8820', 558: '9e5a71f5-8da5-4140-b422-f6f009fbb101', 559: 'c6ed93b4-f01a-4fcd-b439-bdb4c7b92130', 560: '9e462f23-e7f9-463f-9de8-90636690988e', 561: '7c0b6b91-c32d-481d-8b6d-5308db5fac54', 562: '1b5b2c42-ee14-47f5-a507-a25aa4bafcfe', 563: 'b8e0d659-998d-486f-8e1e-8519f997c04c', 564: '5db663dd-2dbc-4f87-8f4c-f0f868bb4f10', 565: '95ad9617-9a2c-4467-b6d6-d8e25293dea9', 566: '6c4de8c5-7cfb-4426-96a9-1c99b6cc47b5', 567: '48a7c181-3074-48ed-acc4-47b43d3ca8e7', 568: '23e46ad2-9ae7-43c4-b18d-12931d14c80b', 569: 'eb6d70ca-2133-47c2-ba96-5af7cb2033be', 570: 'ebb127fa-506c-4077-9de6-b0bde64cba89', 571: 'f7684a60-e49c-441d-a68b-a84e2b14bcd7', 572: '0d19e6e1-a652-4f17-ad61-da442d5d0da4', 573: '08aac772-2337-48da-9538-9eb58de644ad', 574: '1422fb59-6bb5-4a52-8952-447dbe10ac8c', 575: 'f75cf9f3-d371-4012-be3e-7872e8dfbbe2', 576: '07566988-edac-4bad-862e-891286115ff3', 577: '85f6f513-e026-49d1-b504-86b41e2fd2e9', 578: '0ee86a7f-04c2-4932-af20-92d2682d2bee', 579: '5934e64a-96a9-440b-9d90-584f29240047', 580: 'fd3713a0-1c94-4204-95a5-ecd0f507af54', 581: 'f30999b8-e3e0-4e3a-9ab6-9100f997701f', 582: '78b26f77-b467-480f-a7e7-933e8961a199', 583: '5500fb91-ff2a-4071-9f74-9130b44d94e5', 584: '912ead50-45ed-4417-9b89-1f3a5bda778b', 585: '713a0e2f-5731-4c15-b9ae-c059f3b218cb', 586: '25ff946a-d02b-4ec2-a281-f81c0256de57', 587: '6fa07afe-1262-4e84-ace7-35fc7fa91889', 588: '3c1ac9f5-8992-4042-9314-80ba89648ea9', 589: '0728f5e0-d2d1-47e8-aa54-b7255995be6e', 590: 'b8b36cfc-de8d-46fa-95da-0f183dbddc21', 591: 'b7947812-a60a-423c-9fb1-49dee02ba0fa', 592: '28f8e0f0-1cbb-4fb8-b1fa-8635a9a3fb22', 593: '4d4f93e6-0605-470c-9519-7cbde3d38777', 594: '8eaf8b9a-53df-40de-b4ef-4bf5b8b78e4f', 595: '123bbe4b-842b-4bb2-bdab-6801af8d2ea0', 596: '991bf666-d972-4a9f-b616-036144e136e1', 597: 'de59bd37-b8b9-4105-a57a-8275f1c60c3e', 598: 'b88c8111-1bcf-47fb-802a-8a75362c4463', 599: '9652ff94-6f9c-4c0d-baa2-d6bc42d8c6cd', 600: '612ad5fc-0e82-4864-baa0-5b181a58f861', 601: '0ec221ab-d3f9-4057-a953-6da7c8226808', 602: 'eac76c8c-5ee7-4c1a-a839-4665d0ae5cfa', 603: '9dfd0f31-6c8c-46c4-9f78-c4f695cb3b02', 604: 'c8457f3c-84e4-4ebe-8f18-5b1a83770e0e', 605: '5942491c-06d1-4865-bb07-2d7f95249a1e', 606: '3e4e869f-3406-4c17-b340-95e47f234079'}
2025-07-07 02:00:42,598 - INFO - 607
2025-07-07 02:00:42,600 - INFO - Retriever is working good.
2025-07-07 02:00:42,679 - INFO - text="\n      You are a helpful assistant.\n      Answer ONLY from the provided transcript context.\n      If the context is insufficient, just say you don't know.\n\n      in the watch window so before recording this video I was practicing that's you see X here let me select this and delete it so in your watch section you're not going to have any variables to add one we simply click on this and then type the name of our variable okay so this is how we can step over various lines so we can press F10 again and again so this function is executed and now back in the browser we see the final result now let's do something more interesting so back to our code let's close the\n\nis a great opportunity to use an autocomplete field so pause the video and convert this field to an autocomplete field [Music] let's talk about data validation so by default our forms include basic data validation Logic for example because we have defined all these fields as required meaning none of them are nullable if we try to save this form without supplying any values we get all these validation errors beautiful we don't have to write a single line of code to get this functionality right now let's go\n\nsuch as building restful apis authentication and authorization logging caching sending emails deployment and more so if you're serious about learning D Jango and want to become a back developer don't miss the next part and if you enjoy this course please support me by telling others about my coding school Cod with.com I really appreciate your support and send you my best wishes once again thank you so much for your support and I hope to see you again in the next part [Music]\n\na look so we should always specify one item otherwise we're going to get a validation error so this is a tabular in line what we have here is a table of rows and columns now in contrast we can replace this with stacked inline and now each item will be represented as a separate form so this is how we can edit children using [Music] inlines now let's talk about using generic relationships so here in our product form we want to add a new section down here for managing the tags so back to our code first we\n      Question: is the topic of nuclear fusion discussed in this video? if yes then what was discussed\n    "
2025-07-07 02:01:29,845 - INFO - Transcript is successfully fetched by api.
2025-07-07 02:01:30,108 - INFO - Chunks has been successfully created.
2025-07-07 02:01:30,117 - INFO - Use pytorch device_name: cpu
2025-07-07 02:01:30,117 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-07-07 02:02:37,566 - INFO - chunks has been successfully stored in vector database.
2025-07-07 02:02:37,567 - INFO - {0: '9cde30d4-d063-4c4e-a681-c7dce6b12105', 1: '86aa2d10-9025-483d-997b-f5dfa44c2c9f', 2: 'a1f47269-4b7c-438f-9077-d8e3ede21a2e', 3: '9e39c03c-d38f-4661-80a7-c86d7d45dd57', 4: '1f3e7622-db74-4d77-9aa0-358d577f4c0b', 5: '72899644-c67c-4c45-9d91-c6b34d6d0bfd', 6: '8ea2941a-a23b-4654-9dd9-1a3327c413b0', 7: '33ef4090-9e8e-4657-9c12-7538f812b9ac', 8: 'a7ce4f10-b5e8-4267-84e2-7380084a0053', 9: 'e14cd50f-fc63-48d6-974c-77fb28e48085', 10: '60188e6b-e01f-49bf-bbbc-44adb1115e32', 11: '55bbe70c-deb7-45aa-8182-a10f7f0e81a2', 12: '24160aac-45e5-40bb-9af4-3eead001b1af', 13: 'a7525c3d-d72e-434a-bdcd-b569ac24bc3e', 14: '8d32d7f3-675e-4ed0-849d-130db34d23f4', 15: 'cfc9fad9-dea0-41e4-87b8-47dfd4f74b9f', 16: 'd26d4898-fa45-4604-8fe0-926e3cf58d9a', 17: 'c372ec58-97a0-4eff-b3e3-ccdc83ca98b1', 18: 'b4be3853-f60c-4f6b-a5af-9c57a8d41dfb', 19: 'a1d4f9d5-5b6f-4a52-a3d8-ca41c3675ba9', 20: '9a2b6252-bc61-4e5c-9166-74cd5ce7b369', 21: '6ae4095a-2349-4be9-88a5-0f7ad964aa03', 22: '7dc6450c-1edb-444b-93e8-5dd1e68db4bd', 23: '337beec3-b2c3-4d63-baaa-1e5cbba53559', 24: 'ca9fb80d-dccd-43c9-a754-0516b602509a', 25: 'c755678a-bc15-49c0-8000-15f70c21c660', 26: '88595171-89c5-4099-9918-dd9b5bf5caaa', 27: 'cd8ff224-335e-4184-811d-697b88633d34', 28: '1a6102f1-56a7-4d36-b8ff-24a004a3c29d', 29: '9ceff924-4373-4a14-87a1-6c1b5759781a', 30: '02502cf0-aebf-4205-8b9b-e3ce6b2ed222', 31: 'f168d4e8-fee5-41b3-987c-9d8ea6eceb03', 32: '030001b1-30a1-4a6a-b9f6-037c6b0c2892', 33: 'dc0a22ee-019e-47fe-bb18-4381a1a165c6', 34: 'e8e8c6e0-470e-44dc-a4ed-2b81efc86626', 35: '25c482c8-8056-4c8c-a4ce-9daae8ed250d', 36: 'b4fc931b-8d3d-42f1-85f1-552325e4c90a', 37: '47d9ffa9-ebaa-47ba-a84b-953825048c14', 38: 'd7fe4b6e-af7a-485d-b065-0a1da7bb7271', 39: '44fef9e7-2b28-485c-8e15-d03a96873c96', 40: '3ec96fba-e20b-43fe-8055-c2aa07be37ae', 41: 'f4dc69e8-06c3-4ea5-a3dd-782dac76b285', 42: 'fb1e55da-f3f9-41f9-8a9d-eb55307c3181', 43: '3b92bb39-c984-4623-a6c3-bc3a48a5d76d', 44: 'be3094e8-36de-4aad-90a9-2516eb6d4446', 45: '625d210a-34ef-4b9d-a3fa-be936db3c049', 46: '4fe6e5d2-1f59-447c-ad9a-083e28226447', 47: 'c219c448-b28e-4a7e-936e-986ccd7ff38f', 48: '4eb7f9d5-8253-40a2-98de-830dc78dadfa', 49: '49afa939-cc15-48a3-b966-3e0e7efacda5', 50: '3909f2ee-8e2a-463f-a7c1-30ab7e99fc7f', 51: '329b7fe5-2aa8-4035-9180-11e38a4ffd2f', 52: 'e004cb44-d683-498b-98c6-b35f45c791eb', 53: '1d1c114e-8e57-4be3-b8a9-708f870fc7b1', 54: '5a33ec58-ba4d-4d64-959d-339c1771ff83', 55: '20097fa1-3eff-4105-9504-edbe186adb03', 56: '45b8320f-c2f0-4825-99e8-212f89b3c610', 57: '25a0ce37-0c47-4b78-a284-ab39124fc028', 58: '5e3a1fa0-8956-49f0-ad05-d63e3072c727', 59: '2f7ea62c-bc75-47b6-b144-350875ef78db', 60: '01e32c94-678c-4d24-b300-0ff018054ef5', 61: 'e78cdaf1-d722-4ddd-86e2-fead3e15252f', 62: 'c338fc68-84dc-49c5-a038-c5ff5bffc654', 63: '63e9f4d8-b8f3-49dc-882c-f31992953892', 64: '715e85e1-021f-4743-96bf-275e2d73c3c5', 65: 'b4102c02-bf7b-427e-b461-d26e5e8506bf', 66: '7c42d4af-2ff4-473d-90e5-1182cde099a2', 67: 'cb4e2592-412e-4321-974d-7abf39eae732', 68: '8579448d-7f39-4ba9-8f88-7a580a9187f4', 69: '9da7e7a7-bf60-4678-a75b-bf4c100995c9', 70: '9c6f745c-764b-456f-8877-9aabdd3e0fe2', 71: 'a7cba8d5-cc32-4f2d-a85e-a26f0b109f5c', 72: 'b5a27beb-e6b1-41d2-82aa-1c6eadcaf937', 73: '0fcdcc8e-d76d-42bd-b028-56ec3ed433d7', 74: 'bcb8f4fa-fe55-4627-b1a7-acafa9025dee', 75: 'd387f4c6-de72-4d22-97f5-e6c439409afc', 76: '7bb8231e-e4d3-4260-926f-bec044c23083', 77: '12b8a2ba-d967-4355-9882-dbbf0a5648c4', 78: 'a94f2195-3c19-4ae7-8454-d3fbbf4de0ae', 79: '36652194-7b30-40cd-9145-3293f7741f66', 80: 'b636f06d-7a73-41a8-9b46-2d73c7018f03', 81: '28b8c1fc-30a7-46de-8f84-f742814e96eb', 82: '89b7fadf-6daf-4536-86f3-57703ed69c36', 83: 'e4b8c415-3041-456c-ae11-05e11082bc8b', 84: 'ea7080ab-0c35-4d58-81f1-fcd9c024a6f9', 85: '64fb1632-b996-4287-85ea-621d22dd0b9a', 86: '8a1da5a5-2fb3-437a-9d3e-b4de782f783a', 87: '67749caf-9601-4de0-9fb0-ee3303ffa021', 88: 'e49ce769-64e0-4715-b0cc-d99743b42752', 89: 'a0b73558-47e8-4ec6-b77f-745b58ed1f1e', 90: '027601f0-82a5-4077-af88-1abe2593b58f', 91: '4945c5b1-aaa5-428e-a40d-5756370579f2', 92: '696208cc-af16-4000-b6ce-aac0068b0c7b', 93: '4c395761-dc11-45cf-8751-599ec01f0999', 94: 'acca39bf-72d5-44a6-942b-f6348ddae4a7', 95: '95bb66d2-0610-455c-8952-4308544c530e', 96: '3138151f-a0df-48eb-bbcd-0b62d1efec44', 97: '5153b9e0-d9aa-4d03-ac4e-8ca419fd8fc7', 98: 'b10e27aa-68b0-4862-a7c7-b0b431241987', 99: '51eafbb5-de49-43f0-b5e2-b5f2c7c5fd2a', 100: '10c3d6fd-ddc2-42a8-989b-68c784df0727', 101: '22b483a5-eee7-421f-a6ad-439031eaac1d', 102: '7407ddf6-199d-46bc-a71b-1ca786b94c98', 103: '19bbf87a-b2a3-42ec-8c5a-75d0e8878ab2', 104: '5c0e5155-6045-490a-b9d8-d50443c63d42', 105: 'aeeeb62c-8268-45c3-99c4-a74c4cef9800', 106: 'edb7a374-5cde-4fac-86a5-ad6d6d29198f', 107: '4daf30cd-09e0-425a-aa7e-c13998b802ed', 108: 'cf1c1c2c-8a11-45c8-a4a5-173f0a1a7df2', 109: 'dc518bc1-54fa-4630-acc6-d20c18f720f3', 110: '46df9266-bd86-499b-b9a9-5e4080ca3260', 111: '482d724c-e30f-4634-9aee-86d99443ad46', 112: '54daae63-8aef-454a-987c-28ce2c0b55e3', 113: '2b11b66d-b5df-4e3b-81ad-e1e808cf2634', 114: '20199a95-9d25-4635-af13-b20454c74533', 115: '3658fee2-3a1b-4b0f-b496-4970c55d3a29', 116: 'be072acf-5f9f-43ed-bc3e-26f177198032', 117: 'd1a50703-274d-43d5-8edc-600b2d072351', 118: 'f7026ec0-c900-4a3c-b186-9f760975fcc2', 119: '26496c46-ca95-4fdd-82e4-5ff3d4354ad1', 120: 'e9f8d208-bc91-41b5-a9da-b9f41006633f', 121: 'bc0f3987-c5c5-4606-a454-1d2c4035f9d0', 122: '44614955-d1a9-44f6-a39a-7435722ea3b7', 123: 'c03dd8df-71f6-42c6-8fb5-47793c580ad0', 124: '9855dfab-60bb-49b6-bac7-f84b8aa7a05e', 125: 'f82b6c50-84b6-4295-8b2f-69ae1db74cea', 126: '0ecdc3fe-baac-4706-8a79-188909a3868c', 127: 'f9fcecf4-8822-4c2c-aca6-7bc54fb9957a', 128: '127e1490-891c-45d5-82b5-ea0a269a95a9', 129: '8fe0ef15-536d-414f-92a3-63f8a6d50ee9', 130: '84e8e115-1553-4e28-a6ee-d3fe4ba48dc1', 131: 'c5cbf106-0804-475c-9c4f-94b2f5ce9c36', 132: '43bec10d-4a7a-42ed-af03-657b30f00ddd', 133: 'f00975ec-b08a-4a35-b722-651c154b1619', 134: 'c722de2c-0cd3-4fa6-92fa-3b013556d233', 135: 'b2096d53-9efd-4559-b378-1e0fd589299c', 136: '7fe0726c-6c70-4ef2-badf-5ac1329f8666', 137: '373efa99-f2dd-412b-aa6b-50223b2ed33b', 138: '1a3de0a8-6501-4795-b83e-47fa557fef3b', 139: 'd7375c02-2e64-4fba-8a5a-1b561a6048d8', 140: '4780652b-bd67-4605-a76c-7cb34a8a0bde', 141: '999b1bdb-6928-4969-8a44-d7254f0765e9', 142: '295d2ebe-a205-4935-9c2e-3ae4281aba33', 143: '1139a4ef-a9ba-4d6c-bdf4-f8956e762f7e', 144: '9830452b-f527-42cd-845f-f8a3658a4588', 145: 'b720f693-30e2-42b4-adc5-4bbe35866f51', 146: 'ae8754b8-6f32-4894-b851-bd0dc50c4917', 147: '84b5b8b0-ebeb-49a5-bac5-f06a26c00680', 148: 'ccc15e05-21e7-4877-8e7a-dc53da65e679', 149: '0b4277f0-bee9-4dcd-84a6-78f7eb79b4a4', 150: '82bf44c4-2b7b-4c36-8180-d77d0acfc955', 151: 'ab9c894e-2796-47ae-8b3b-56c9386d0663', 152: '4e1686f8-a94b-4c2f-9af2-cac2e0fda1ee', 153: 'bc85194c-2543-4703-b5d4-b87e8dfbfab7', 154: 'c90a5819-fb21-4625-b490-06b3783b266b', 155: '4b9ff30b-c280-44eb-adcf-6ab39cb7a402', 156: '3a0f9441-8d50-44e7-87f2-997254e44752', 157: '1464ca7c-c4e9-495f-b390-3fd0813eb8f5', 158: 'ba9bae5f-94a1-46b7-9568-2f23e3b375b5', 159: '91d3930e-8756-4d6e-a0eb-b9e09a367ff6', 160: 'f739cc72-feb2-4910-b607-5feafa978aeb', 161: 'd7da5265-fe8a-4c0c-ade0-91a43fa5dd89', 162: '1be43833-deb4-4dc0-8bd4-616bcf154966', 163: '9642734f-64a4-430e-9b56-04759ebfc71f', 164: 'df0c578f-09c0-4b91-a42a-51ff68cf20d1', 165: '62903228-9059-45a3-be26-3db86d0fd4c2', 166: '03f6236a-d7fa-4307-bf80-4c1a7a2b92dd', 167: '45b6c58e-4050-4e72-80a6-4d83c78405c9', 168: '44a821dc-68b7-4cb2-b788-6e90c3d0cd3c', 169: '6c417138-2de0-4505-ae2f-544f765a1b6b', 170: '0638ae2c-da04-412f-889a-920996759af3', 171: 'c796a0af-7b89-4aea-b295-ce7ea572576c', 172: '9e4d4392-a3eb-43c4-a3ac-08b19a62692f', 173: '6ae1aff6-4d85-485d-8771-fc6028352ac8', 174: '055c2fd5-daae-4ad8-a836-c124854c5bb0', 175: 'ce016187-6f84-4e81-a102-b4df79918282', 176: 'e49f3075-33ea-4ba1-8e5e-1be65d8d5a7d', 177: 'e2fee116-5558-40fb-aab2-52ecede6d1bd', 178: '9de2f892-170f-41c8-9341-b175de2c3b66', 179: 'fdeae09d-1c4a-4fc8-a007-ff77875dae2a', 180: 'd1e6ca30-e5a4-4947-93d1-521dcbdfbefa', 181: '37854437-c9c5-41cd-8752-ba5a74029baf', 182: 'f45a84dd-7802-4fe5-8cee-a7fde7f88094', 183: '3fd4546e-ffa1-4276-8448-e7d5ba63f5ce', 184: '37f653ca-90a5-4c01-8790-d89b61d4d37f', 185: 'bfe57155-1930-4ed2-89cf-ac35f0acd9bb', 186: '8243e6b1-61f0-4598-b6df-ed4a596fc89b', 187: '6bbec16f-9b3e-48d9-ad2f-0fb4030804be', 188: '610171fc-2f1e-46d5-a3ed-bd6d03146cb8', 189: 'e67a4afd-5c22-4149-b27d-a92591f8ed6c', 190: 'b854f237-a7cc-49f0-ad06-fea093e170da', 191: '15baff61-28cb-4c69-bd32-29cd3347a4ea', 192: 'e6bf052a-61a2-4dc7-a77e-4b3807495cda', 193: 'd94b6c64-fcd7-4814-a10e-995a8424c438', 194: '678ed24a-e682-404d-b486-8cda1880fd2f', 195: 'a068f294-c798-4c33-ba7b-3135a2788c7c', 196: 'a3c5626d-1ee5-4041-ac86-62b92441822b', 197: '7406211a-8bb7-4216-a6b9-b2dc7958ac18', 198: '228e7416-095a-434a-8ac3-039baf53c952', 199: '4c7f35f6-857a-4d19-ae40-d78087581ba9', 200: '9a06572f-6859-4d45-986b-6bff30496998', 201: '6450c2ee-ae2c-4538-a346-d2534df6748d', 202: '7bb18f97-e3e9-42eb-b135-ac329eddc1e2', 203: 'dbfe5cf6-569d-44ac-b6c1-45e172282f69', 204: '812666b1-aaee-4134-bbba-56811fcbc8eb', 205: '6b1280a5-b661-49fa-8e2c-bc505c848a3b', 206: 'd3d093b2-fea6-4967-b4bc-b8ad7e330036', 207: '730e585f-fd42-4ffe-9c52-3c93d5be7466', 208: 'bd6b2199-92ad-41ca-b2f1-676150fae9db', 209: '2573dc18-21e5-42c6-96d2-5b552134f197', 210: '511729b5-b8cc-4c5b-9213-5c563e5276ca', 211: '683189ce-8988-434a-a747-f6ff0609c5f5', 212: '3967bf47-2056-4246-bf84-976aabd798ae', 213: '8d1bb7fa-886e-4b3b-812d-efb4a09d2ef1', 214: '46767be0-d0c5-425e-a198-28ab9ad3a9f6', 215: '3945c1e0-c2d4-469f-8f41-6e1518ade675', 216: '5a9ee335-3605-48b9-aa10-494c85318765', 217: 'c3ac929f-d974-4edf-8f4c-9e2e3ee35945', 218: '06c46333-76d6-4d5a-999a-c87edaddf90a', 219: 'c2c7553a-ac4b-4b43-ac01-aa4c7f0c9ecc', 220: 'af8eb8b4-3a5d-4ac8-b79f-aa4cfd43569f', 221: '31f7e4d6-17cb-485b-8429-ba6c8d33cf2b', 222: '84c83ce5-78ac-4e6d-99e0-65990635f1a4', 223: 'a8f497db-5876-41a6-ac28-74113409a4f8', 224: 'f1f4b01f-542c-4211-9bda-4f29885fa6df', 225: '08789f2f-9da1-4736-b3fb-69cceb58f650', 226: 'e253b2f8-fa3e-4370-84c9-a7bb5dba223b', 227: '266a5fe5-4e0d-4896-bfdd-e3648674e272', 228: 'ca7dade1-3b66-4d6b-8034-afda139e48ee', 229: 'facab3cd-f070-45b9-9c41-2f5cee9700cb', 230: 'cad9c5ce-4d31-4eac-97c7-ebe575fd2389', 231: 'f0a84e0c-2fe1-4183-9dcc-6e9fae3b1966', 232: '3b9e2bfd-f608-417f-91c3-56dfea3c1989', 233: 'bcbb4a73-8670-49c9-ae14-314b172cc149', 234: '1ae4f338-def4-43f9-8d07-9f3f580cc453', 235: 'd88e87f8-69b3-4ef1-88a2-39c89ad109c6', 236: 'c3953507-9515-4ea2-96ad-cb8284381f7d', 237: 'b617eddc-9b8b-4487-bab7-409f7df8ede0', 238: 'c7810b0f-5753-4380-923f-2d80505ec72e', 239: 'ad7d5c09-497f-4c6a-a795-fd6861d68770', 240: '2b2a9a69-b633-4108-9f63-1d98296da8fe', 241: '99be0375-8bfa-4d12-9452-741dd4f2bd00', 242: '556abd22-22ac-4dec-bacc-49934b55780e', 243: '8febae13-7a7b-4f59-9eb5-2ff15d176f28', 244: 'b6bf2dd8-3ee6-41de-afa2-c96ff506c8ab', 245: '1702c351-edbb-43d5-ba6d-3a85fd10f187', 246: 'e513521f-9dd4-42b2-bd13-fbefa63e2cc3', 247: 'ca427b95-4a87-4e49-b290-11558ca50d5e', 248: '19fe9e5c-817f-4d55-bd77-e8427e1cb3b2', 249: 'b89d0d6b-db9a-49e5-b1a2-17240a917750', 250: '7f4c26c8-4f75-4046-9fb2-0a56a53ee5ac', 251: '0b96dbd5-8506-492c-a3b6-cbb981a4b741', 252: '9831062a-7d77-453a-a333-bc333bef6cba', 253: 'a25750e4-0770-4026-ac4c-abbcb08a32ad', 254: 'b22d07f0-d79b-4f81-affd-64fee943e613', 255: 'a2ff8959-726d-46f8-93ac-4279c7764932', 256: 'a6f1fbd5-1fd3-464d-bd8f-501036a33c9f', 257: '4197d45d-a545-4e5d-8f38-0615667a8091', 258: '2863b12c-ac2d-46a5-a6b6-a1f51038390d', 259: '174f331a-21e8-45e7-9cab-f803a6a3c055', 260: 'ad1f65b5-d6c5-4b58-8e3a-c367b4b93df8', 261: '156f90f4-7601-4bc8-8423-1152bdaf6a6c', 262: 'cd8e4fae-d8e3-4534-97a5-2d6348c51e6c', 263: '37e2b023-ba95-4bfa-9b43-7dd1588f5f9b', 264: '8b93ee45-4767-4ecc-893d-689cad914404', 265: '5d2e26c3-5a21-4163-97ef-9f77a74d6593', 266: '99aaa760-6f28-44b4-b041-63d8292ac576', 267: '162354ea-0b0b-44ea-9f62-b33231e3b494', 268: '29721d63-9a1b-4993-91be-64e3adc31932', 269: 'db4f4c87-89a2-45be-90be-61ae64294c4d', 270: '2aa57b9d-336e-41a9-a508-a177d8187784', 271: '1233bcbf-1eb0-429c-bfb2-3150829fc5f6', 272: 'eb71ec69-e9d2-45e4-8868-3dcf97efb728', 273: 'd6bce2b0-58dd-4298-8428-7efbd425b574', 274: 'ff445213-5366-45bd-84ed-6b867f25e1e0', 275: 'b84b2a2e-7c16-470a-b558-8c1fc1bd2ac7', 276: '3ecfbc6f-219d-49e7-9670-eabf670c3bb1', 277: '2f29ad55-caa8-437d-a5aa-a113c426c3b3', 278: '947512ba-23a0-4c27-955f-d75134b838dc', 279: 'e89fc0d8-96d2-40aa-9527-352a48d20f16', 280: '541b0cb5-5f39-45c7-8f7f-ce3c6a44a29d', 281: '656b2a5f-706f-4f6f-b689-6a229e0c56f6', 282: '8e7452e9-1522-4b06-9390-ab74e59b1438', 283: '4d99f9bf-cf2e-4180-b708-42b5c4f5d28c', 284: '09ab2078-b282-4064-8e87-656c68e623e4', 285: 'b9ba31aa-5aae-4edb-82a1-d4aa8d4ebacc', 286: 'e4d237f9-db6f-4faa-ad62-cd68746d1930', 287: '9cf7a14b-342a-4541-9310-ca02987ad5e5', 288: '6f425f78-2d92-4ead-9e46-461761374533', 289: '6a651dcf-3733-4483-a1b3-7eec3968f4ce', 290: '850288b7-b116-4e90-9bbd-ed524c2c4f21', 291: '1f4a3f85-bab4-4cf1-84ed-2d9945c66f2b', 292: 'ad02b807-172d-4a13-9adc-c13252a306d1', 293: '9859ddb1-3a35-4c25-9bd4-9542dfdcd76c', 294: '6109bd07-2fa9-47e8-9a19-76c2788a65d6', 295: '10e7f123-fb05-4713-af28-9fec979decf3', 296: '34caa436-7679-456f-b1e8-be4cf66280c0', 297: '44533e71-0096-402f-bab0-36105361102a', 298: '339e6fe9-540a-452b-ab95-c9faf8c20c01', 299: 'f433beda-ed46-45ae-b369-b347b6bee119', 300: 'f1a87248-80a8-4634-b2b2-184ede5bd1b5', 301: '4e77a38b-4ce4-4894-9210-54bdcb908a65', 302: 'f5a6fcfc-78d7-4f25-a53c-e2d382dd4fdd', 303: 'fd042f02-a813-4e24-b267-b198b1dd2dbd', 304: 'e48ae6c8-05b2-4a81-80a6-b28f582f60da', 305: '6fca14fd-6049-4bf7-b7a3-5b0ae914be03', 306: '7212e55a-50da-45e4-a6c8-44cefc11ff59', 307: '89380812-8696-4501-8e11-9ac7ccedc887', 308: 'ef8a1823-b089-4d8b-99c1-7875f650502c', 309: '23d6d503-9c62-4fcf-a88a-4e0ad68dfdbb', 310: '598b1fb7-a8b7-4053-abdd-674d3ea912e4', 311: '020744fb-6667-4075-9ae2-aa48c59167cc', 312: 'd6210848-fda9-4396-b999-15cb4824380e', 313: 'a5a497cf-c4b3-4db6-9715-53fc8de48de7', 314: 'b9ce1d29-8e9c-4ea9-b869-2918e4253f5a', 315: '128fa7ff-b5b9-4bd7-b01f-2377edee46ae', 316: 'e6fb4ad3-0c4c-4d61-be02-03e5d30f7873', 317: '4f572372-cf09-4b6d-9f18-b2c9429cc92d', 318: '52bb12eb-a685-4964-b879-c7728a60f525', 319: '88e8cff3-483f-477b-8b39-5ba79ba59029', 320: 'f0918964-3e8c-4d33-80d8-4c9792a2980f', 321: '79ddeb5a-7fbc-4398-922f-2ad1881f19bf', 322: '1600f749-0c97-4bdc-b4ee-b3a1d7f90622', 323: '9f2bb6b2-f379-4c4e-9555-222e5f1fb505', 324: '52b23bce-f07f-4041-ac61-d01d894415ac', 325: '230bba8d-6ea4-465b-a4fb-d0240b915e6d', 326: '7ddb9516-26bc-43b7-a74e-8d08d143764c', 327: '857f0a74-da34-4eea-9ef4-7b7271639182', 328: '92f8aa83-961e-42ab-83ea-9d54758bdf80', 329: '12e3415b-e1bf-4490-9e3d-4d914bfc4251', 330: '1ce84ca1-742a-4f8d-b950-af1113e1d14f', 331: '9e23f061-2eeb-4395-aa0d-3470217dcb96', 332: '5922f7f3-dccc-415e-9876-774255dd8d07', 333: '9ea37e37-3a09-48b9-bbf8-aa289998dffe', 334: '79edaa14-144e-4162-b87b-13150692e0a4', 335: '0010fc07-e592-4931-b9e6-da8313fa6828', 336: 'af813543-aa34-417c-a9b4-0eff8cbb9529', 337: 'c9e611bc-32ed-4ade-948d-ffd275087ae2', 338: '91b3f024-13a9-4125-8985-51f2206a5b16', 339: 'b4ce9623-07dc-4956-a367-6f87123c489f', 340: '20e0e4cb-75b3-46fe-8209-af579d1f1270', 341: '00cbe034-e7fe-426e-a2a2-fa634781b427', 342: '994159a6-0270-443c-a34c-a09cb851f4a2', 343: '441d54fa-25f3-4f77-9d64-f22408348e8a', 344: '83f2cbf9-e9ca-494a-bdd8-529c94f60d61', 345: 'e25a1599-a8fa-4fb6-b94e-7e2d6b14fa61', 346: '71191856-bf94-4a48-9ed7-f2b7de7ad124', 347: 'edd3a472-14f3-46be-a8b6-41c9e333f89c', 348: '7ff88673-b7c8-4377-8367-c5f9cdc8fd8e', 349: '45741de3-bb3e-44b8-acf6-3bfc13d97b79', 350: 'd5ed5be7-6515-4b32-bd19-1ca0b4fd8b0d', 351: '3fe3f730-ac70-41c3-bbcd-531cea36be0a', 352: '70bf39f0-bff7-4421-8c18-385cc6989014', 353: '22d57658-93ad-4926-8ce8-a1eb0c8262b8', 354: '968f45aa-c66d-4397-908d-1c4c94894cea', 355: '806cb99c-bbc4-4f87-9d3e-8c7844497cf8', 356: '0b449d35-7216-41a8-b10a-34d9670c82e9', 357: 'd8af35af-30f0-4f19-b79d-b24daf7169fd', 358: '637a8f00-e715-478d-8d10-ad824c432ad2', 359: '4b7c62d6-32dd-4e02-85e0-d40399d42bf9', 360: '52d7014e-6b95-43a7-9f02-eabe0a7cd0c9', 361: '0bf3e53f-3bb4-489e-94e9-eeb7aeead18e', 362: '010a21a6-6f4d-401a-aa9c-ab16d6311181', 363: 'a64f98f9-5eb5-48c6-871b-374bf71556e8', 364: '06ade9be-cffb-4b7d-b090-cfbae154f8df', 365: '8fda62ff-3dfe-473f-90ed-f89579699474', 366: '28aa4a4f-ba0d-4079-8671-1e4592b0bcf7', 367: '2dd2695d-d946-415c-b53f-6cabbd9683b8', 368: '9d8beef6-98c7-462b-ad97-00ce51a7dc7f', 369: '6c62ecc0-7eaf-4c94-b156-85d8fecbdf0e', 370: '71038efc-412e-4762-9755-ee9a0bfc82e2', 371: '1065349a-da26-412a-979f-d06cbbd8464b', 372: '53dd9e24-41b5-4dc3-b9a5-e86425a14968', 373: '3fc5562e-54d0-4c9e-8a5c-5baca5582b89', 374: 'd60b82e6-e25a-4fda-8057-5667d1c69f3f', 375: 'de4efb8e-c1c2-424b-8fdf-a31bf5ea310b', 376: 'c5cf7f81-23e5-4a7d-ba55-15997a0d5ccd', 377: '5c88d9ce-9d99-49fe-b273-b1eaafe424e8', 378: 'afd33c1e-0d4b-4fd7-b2d9-9de4c2353420', 379: '80a384c2-9731-4863-9c84-cbad701e84c6', 380: 'c4e65bd1-e3b5-492f-8609-b8a5296665d5', 381: 'de7beec8-9658-4c7a-8828-c9476e62f5c1', 382: '662d9cbf-f293-467c-bb05-50140832cead', 383: '4eb500f6-1a4a-4089-951a-1190f62bf1c8', 384: '0a3ac5be-8477-4d1b-805b-318b8eef7a25', 385: '02e3d6e6-ce26-44b3-ba57-88a275667ac0', 386: '0c79e897-3e8a-4338-bcbc-693a9574ca9f', 387: 'f3d70510-7862-4870-9d37-e516d1f5ebf7', 388: '3460b5f2-82e9-4f1c-b994-26e4a4c94fc3', 389: '0dc2ba30-5757-4313-8917-29a6b5c01be2', 390: 'ad9b2b23-aa90-4a54-888f-868aa6a683ce', 391: 'ad65bd71-3fce-45e4-b036-7a3a8710b0aa', 392: 'a6333d6d-3913-4ae6-9ffb-20db6cf745de', 393: 'ebb4a142-1213-45f5-a927-e6f4a1552adb', 394: '33d790ae-1cc6-4578-9c9c-e31b01a8e039', 395: 'f2a6a3cc-43a0-4abf-bd70-8b61168e272d', 396: '3c1b9a41-011c-4068-bd83-83530e5302fc', 397: '84854fc9-13ee-4f04-93a8-0b401c489221', 398: 'a4a61e30-587f-4e58-b21d-5e03404b8266', 399: 'd1530733-6cca-461a-a76a-a01cc9fb62a4', 400: '81f9e690-6216-4071-8046-5a96e7d8fe74', 401: '29908f6f-5659-4ed0-8741-8b3c6f8533f2', 402: '221f3386-688d-4963-ace8-1bf6b7c989c0', 403: '0f6f0d11-bf53-4219-9a28-3fc43609f1b6', 404: 'a4713fcf-ad18-4e08-9bf9-b4dccd8b6ac2', 405: '59ccbd79-b0ae-4c4a-b3ef-378e27aeaebb', 406: 'ef83f17d-d402-471a-9f42-a58906ef1390', 407: '5aaa3314-591b-47d9-b0cc-259aa98cfbf7', 408: '4946439a-8453-44e2-b089-bc55427e5a11', 409: 'd9a7700e-4685-4212-9503-aff15cf806a4', 410: 'c1d9e494-f59d-4b46-8545-81ceadecd6a0', 411: '4e8e79ca-65cc-439f-ae96-f2fdfd32578d', 412: 'a566d544-4ec0-4b56-aa0b-6a90e51176d6', 413: 'c8090f29-d66d-4cb6-841c-489856419697', 414: 'e3c98849-a9d4-4a51-a310-923ed72c9ffa', 415: '217259b5-15eb-44f5-9bcf-ff9b39aca648', 416: '22ad60db-d3ac-4596-9247-2208fc28e06d', 417: 'a69bee88-bf15-4418-8d2f-49ab5eef8145', 418: '6863abda-58a4-4d06-9402-08ab0072ea1f', 419: '7b07d69b-8041-4d27-811d-ce1e985bd163', 420: '6e7aa3d6-c33d-44e6-8414-dba7982473ac', 421: '43ce01f8-e92b-4d72-b44b-e9044e2746e9', 422: '40c270bd-b098-4855-a5b4-2af1051a650a', 423: '3eaa31b8-d07e-470f-99ee-c60d69581511', 424: '21abf194-77ad-4ed1-b128-2324fe66a237', 425: '946a0016-0a94-431a-8463-c794835c0c54', 426: 'ab483588-2595-4698-a3b0-007c5fd2d60a', 427: '842ac636-dc81-431f-b6f1-43f2721b3c2e', 428: '727c0178-1d83-481f-843a-c559bd257a57', 429: '57460f3b-c34e-425c-b027-8ebd8764aaa2', 430: '506aab99-5acd-409e-a28f-ffcf22792378', 431: 'a637f4d2-ab15-43f3-960e-4c958a0ed22b', 432: '9d76b056-3aca-4e67-acea-fd7e6343c4fc', 433: 'd154ec9d-36a7-4120-974a-074d2afcce38', 434: '40d7dc2a-f6c0-4b74-8929-160a2662b7e6', 435: '8880ed5a-8790-4be3-a03b-3501b3c74986', 436: '514f635f-0f6d-4fbf-8a08-411cf226b492', 437: 'd650f6d2-1bc3-4d9c-adcd-d638960d878e', 438: 'fbe98f36-1425-4b10-b57e-808afa668edc', 439: 'b4c579ac-0172-467f-9b69-03e802ab2963', 440: 'c599b39e-8793-4ec8-b0e4-a337c6170ece', 441: 'eef91f67-180f-4ac4-8511-076727f87795', 442: '8fdf7c63-6769-421a-8d85-9cde6755489e', 443: 'eb3c0b09-5538-428c-b479-d6b14db37d93', 444: 'e0f307b6-cf52-42bc-8888-1615986deb51', 445: 'a5c9698a-e714-419d-babc-c16002693085', 446: '5361208e-2c25-4a25-9616-d9ad58b23b38', 447: '6065760b-9741-4c7f-a6e6-d338e6e9c7e6', 448: '6d431de1-1bfb-41df-aad1-becb4bc6f7fa', 449: '4cdf8490-1cfb-49fd-965b-768db099f1a0', 450: 'af3aa12a-7e54-460d-9411-a967932dc419', 451: 'd9e0ed51-1a3c-4ce8-8fa9-cbae2cc77b00', 452: 'ca0eb35d-d3f4-4de5-8dc6-d97d7ee3c70a', 453: '6ca23c4c-bc87-4659-9ff8-7ef8f0ab6ae3', 454: '1b457f23-c270-4f11-8cb0-71f77177dfb0', 455: '3fc89b7e-4ea2-4c9d-bf4a-bb13d6a42e97', 456: 'a91b2447-b3b6-4bd0-8441-1ddd6355ac0c', 457: 'dac3fe29-953c-4c25-b098-8068160603ef', 458: '1a2e9245-3e5c-4d1c-ab34-79b04b1cafc7', 459: 'b91aa968-f1df-4a06-a7c4-18932f902810', 460: '83b5418a-32c2-4d0f-bfa6-6888fba02cba', 461: 'fb13ecbe-2ec0-4bc0-ac9d-39e05e8c083b', 462: '02c66185-01e7-468f-a552-f8c46bba124f', 463: 'fde9821e-d826-4efc-9562-1b25daadfef4', 464: '412c65ad-3e79-4d53-9405-f1148299265d', 465: '9870bdf8-017d-474c-b95b-050cc1f7ee68', 466: 'f5561f6c-f405-4dcd-a2a0-b95ab1b98130', 467: '5c650f74-57fb-4f4a-b553-4593a8e44e7a', 468: '51a607dc-42e1-4692-bee4-9e513b089a8e', 469: 'a8186ead-2410-4ade-89ff-b5e59d42bc81', 470: '384c6a3d-4f43-445d-b813-be080946b77f', 471: 'cd0bd025-bdd1-4c47-9e06-50010ad9fc36', 472: 'd0ca6289-28cf-42ea-9237-cc8eb422ee09', 473: 'e2c0a846-1b64-4d31-a3d4-c904e94a4054', 474: 'e1798a3e-af4f-4953-a5ff-d0466c430124', 475: 'fce85e7d-7f2e-4989-a7b4-f2686b284436', 476: '1caa5bcb-eecc-4f95-b0dd-5deee4df360b', 477: 'ccaeb245-5b82-423a-a8c3-360d6471f2fb', 478: 'f76580ad-e0d4-49ec-911f-7be2781874ee', 479: 'd1bb1046-b31b-4f6d-b41e-b9808210795b', 480: '4e17faad-ca73-490e-a1a3-54e0719ff7ff', 481: '4524ec94-a1a7-4d3b-9ec0-1329491e0d8c', 482: '461d92e3-7310-4523-9af8-e7d4444a1d27', 483: '9d4e1f0e-c549-4460-ad8f-6e3e00d0f1c3', 484: 'a6c1c6a2-ab18-40c0-9520-8e8f25e85d3a', 485: 'ea01169c-d9ec-48bc-bfde-2dbe5862c379', 486: 'ad2d4d03-8dde-4f9f-ba14-ed4533ed705f', 487: 'a0d120e9-2a6f-44ee-8e69-268c691c08d4', 488: '8593abc9-cc43-427f-8757-33befd782f96', 489: '6cb749e8-a6ac-4c87-a094-7c21991f2e82', 490: 'a167de39-170a-4fca-b401-2b5f5d715270', 491: '05f54e3b-3f1d-4ab4-bd6b-5091b4eba48f', 492: 'b9a552e7-bb10-49a6-ab1e-cc583673b231', 493: '4a1288a7-f693-4ef3-93f7-08cd29847efb', 494: '2a60f05b-aaf1-461d-a85e-4534590d78c2', 495: '209f918e-1a51-4b44-a272-c9e47387c5c8', 496: 'aa19b315-40c0-43aa-8898-d0ca2fb9c033', 497: 'ca426e08-37d0-409b-8eb9-adf76ad391d4', 498: 'e44ca7ec-6a35-4409-818f-7222c5ad285d', 499: 'e1bdc576-e2ca-446c-9d01-8ad2ae1bfec4', 500: '03f4c406-fa06-4e62-93a5-4e0d4d798feb', 501: '55f2c72f-18e4-414d-b3da-8cbcc90ebec0', 502: '677dee98-9fad-444a-8b59-6d66f732c936', 503: '15798b14-b04a-4bff-bccb-fb5dbe921f19', 504: 'aad63634-a471-49a2-85b5-1cf7f2fbe701', 505: '4d35965c-ba99-4602-b928-aa447bcf8e55', 506: '82fe203d-cf8a-48a2-8906-5bb205e82ca1', 507: 'f150e89e-3886-4d11-86aa-316475951c4c', 508: '98fa90c0-04df-4103-b256-ee2033b28a06', 509: '37eb7cad-a43e-4801-b687-68d0022ec4f2', 510: '42890fe6-f7d3-4fef-b643-3f9e33d52df9', 511: '0939bdf1-fba8-4910-838e-665819aedd27', 512: '27016896-454a-4a19-b172-fed9b17950c3', 513: 'c41dc4e1-1102-4dc5-b18d-0fc1e480ae97', 514: '04cf24b5-20a1-4bdb-b843-c2ec21667708', 515: 'c4b16905-0f62-48f7-8033-d042f4b03d25', 516: 'd00c47b1-be58-4dea-8c50-6b7e0275e0bc', 517: '7af262bf-c867-42fe-b77a-8d49907ee737', 518: '3a64f334-77a8-4f87-b2a1-46ae64fe37df', 519: 'd882c9cc-5949-4309-932c-de597f53596d', 520: 'b8a19453-e2f7-4000-b082-d7c104f12b2f', 521: 'b60c700f-c24f-4b61-bf65-14cf165b2e26', 522: '0506d17e-85a6-4ebc-9e38-48a63bc3ea07', 523: 'a34ff46a-c2c5-492e-b1ed-18821855bd9a', 524: '26489e3d-55f8-4380-9f2a-9a80d5ac20f1', 525: '744cb7e9-150f-4221-ba95-25b4ebdeb0d9', 526: '405e58d9-86fb-43a2-a949-efdc4077924a', 527: '93ce9a65-b0d8-4db4-a9fc-8dc4b498fe03', 528: '72f090e9-4a3a-4095-bbfb-f44d84a576f7', 529: 'f5a4008b-9b0e-4496-8720-292e1b366147', 530: 'b9927a85-d155-494e-ade5-68ccad37b974', 531: '8b991668-076f-4b3f-8938-9f9da12e37d3', 532: 'a19f5706-c482-4ac1-8c63-ec5c3ab4ad0c', 533: 'b1dab90c-8ec9-4022-8ce0-327158030095', 534: '6e62db2f-d821-4101-a757-c64bd7626ccf', 535: '4c13031e-12bb-41fa-b159-2413a94417ca', 536: '5eb82bbc-11a9-4279-8307-19390df3ca32', 537: 'ed82958f-c02f-48aa-98f2-0f06171ff851', 538: 'c874359c-fd05-43d9-88ba-b01d6d60d4ea', 539: 'f5927233-46c6-491b-9864-ce26af5cc352', 540: 'dabfdb79-b910-4634-b0ec-bb5709963689', 541: 'a9570e34-b926-49d2-9a64-e73078534e92', 542: '63579e1c-268b-4011-839d-1b3b810f6e0a', 543: '4d9096d9-258f-45b8-8220-2397b509edf9', 544: 'e9b084c4-1f55-4fd3-8b42-f0cab556b2e8', 545: '4f703ceb-bf70-4f28-8cf4-da5760a5b11f', 546: '98bef9d5-68c9-4852-be99-52180cfecda9', 547: '0e0d296e-129c-44a7-8d8f-6afffa4daf6e', 548: '7995ebb6-c7c4-455f-8ad2-0c6c0d31598e', 549: '7fbe51f7-a334-483c-8b03-2c0d2e29cc5b', 550: '52e73ae1-8d94-49c1-88b7-137bebaa1d27', 551: 'f2abebe0-5ab8-4e21-a88a-2c2ed18007ea', 552: '72293e29-9ccf-4bd3-9005-4703f5b23e38', 553: 'ca768dcc-2821-438f-be6b-b59976fb333e', 554: '48cc2482-6df0-44f5-af57-a5780be09caf', 555: '614ba92f-dc09-4e04-9240-697c723a25b2', 556: '5b7a46af-2fc4-47d9-a620-eab5ffaee7e5', 557: 'de806e05-4771-4609-b88c-8b2132522e80', 558: '7a9a3fdb-eda8-4819-94b9-3d9a9cc18a87', 559: '073cc21b-baf5-4569-b507-711447f74a45', 560: '3b20f033-313f-4331-96bc-a95e7b8267cf', 561: '43143fc4-37bf-4862-a34b-0f95ec4d909a', 562: '2e643706-b9e7-48a1-b450-f3b6ee3265e0', 563: 'dc573e90-5ab3-4f30-9c98-e6fba172d9ed', 564: '92a65e88-5406-4d7a-87ae-ab11aaccc33e', 565: '0981c3d4-1f60-4ace-b649-a400976d724c', 566: '079e4398-857d-4942-9d6a-83a294d7692b', 567: '1e01b14c-edec-45db-b73e-5e322da1afb6', 568: '9d44bb66-fdc4-404d-a215-924b5604d2a2', 569: '4445acaf-c25d-4e2e-8613-4ea606403b08', 570: '36b7c11a-3c35-4728-9de1-acac960876b8', 571: 'fcb5d602-1ee6-4af6-bfd9-048cb4308a1d', 572: '0fbcd55d-b0ed-44e9-8377-f73793dcc39a', 573: 'e1cf38f5-1261-4e29-af87-1094c6100e8a', 574: '0c7d6d75-6b03-45a7-b50b-05b56c337e0f', 575: '0598f312-c71a-4075-8e37-62d9cc391cf1', 576: 'a808ef7a-b7d8-4101-9724-c7d6f7b1bea3', 577: '51ffbbf8-a984-4b74-acd1-041c233e3fd2', 578: 'f92a950e-6662-440d-9683-9aa2e6c178c8', 579: '17a95d8e-4689-43ba-a453-d537ad6ee625', 580: 'bf01bdc4-2c75-4688-a2f2-12ead616f049', 581: '5829f341-90a0-4ccc-9494-234fb5ce3926', 582: '6af61217-37ce-428a-9688-b6810145971f', 583: '77c20182-162f-4ac0-863a-13abacc55350', 584: '754954e5-98da-4d52-bb75-c0f67eb476e9', 585: '72e8fecc-aab7-4a2f-8cef-6fba69853aa2', 586: 'c3f080e4-670c-4a4e-8d29-fde876c42bb5', 587: 'aee62238-aa38-407c-b308-78d0f2846ad8', 588: 'dc88907c-42a4-4819-88af-2c01fc535de4', 589: '29036d43-0d2e-4d06-825c-b08ce805548b', 590: 'b8f478f8-5c53-4d16-8035-56e04cd60484', 591: '460c9554-81ef-426b-a9c3-f020ef1d5582', 592: '914ba3a6-6be1-43cc-be7c-73fcc8fd3856', 593: '6f12e6db-0bf0-43c9-a921-a7eddb272eb6', 594: '427d0330-cec6-467b-a598-0eab258efb86', 595: 'b06538f5-cb62-4a74-98b1-a71caa310c8a', 596: 'dac57afe-b17e-4363-aa30-58adedf6a3fe', 597: '75bc7237-4e6c-45cd-9001-6a2fd6d8dcf1', 598: 'd5c8179e-2569-4e31-a021-50e569985451', 599: '2ca5dd88-ff3e-4b43-a717-b4085346f9ce', 600: '82687585-0ae1-4fff-91a1-80c7296cc6bd', 601: '26779ae8-3f24-43f7-97e0-7858813d31a2', 602: '4c0ba753-84ab-4258-ac3b-f96aa126c653', 603: '4b0bd52e-b3bc-453e-8b05-7c2b2d09c0d6', 604: 'd61a68d7-693c-4350-bf1d-55f9fe5eec29', 605: 'c17d4f45-2dba-416e-af31-6bad968b2640', 606: '5023cd4c-1115-4940-aad7-d45d0dc017fb'}
2025-07-07 02:02:37,568 - INFO - 607
2025-07-07 02:02:37,575 - INFO - Retriever is working good.
2025-07-07 02:02:37,688 - INFO - text="\n      You are a helpful assistant.\n      Answer ONLY from the provided transcript context.\n      If the context is insufficient, just say you don't know.\n\n      in the watch window so before recording this video I was practicing that's you see X here let me select this and delete it so in your watch section you're not going to have any variables to add one we simply click on this and then type the name of our variable okay so this is how we can step over various lines so we can press F10 again and again so this function is executed and now back in the browser we see the final result now let's do something more interesting so back to our code let's close the\n\nis a great opportunity to use an autocomplete field so pause the video and convert this field to an autocomplete field [Music] let's talk about data validation so by default our forms include basic data validation Logic for example because we have defined all these fields as required meaning none of them are nullable if we try to save this form without supplying any values we get all these validation errors beautiful we don't have to write a single line of code to get this functionality right now let's go\n\nsuch as building restful apis authentication and authorization logging caching sending emails deployment and more so if you're serious about learning D Jango and want to become a back developer don't miss the next part and if you enjoy this course please support me by telling others about my coding school Cod with.com I really appreciate your support and send you my best wishes once again thank you so much for your support and I hope to see you again in the next part [Music]\n\na look so we should always specify one item otherwise we're going to get a validation error so this is a tabular in line what we have here is a table of rows and columns now in contrast we can replace this with stacked inline and now each item will be represented as a separate form so this is how we can edit children using [Music] inlines now let's talk about using generic relationships so here in our product form we want to add a new section down here for managing the tags so back to our code first we\n      Question: is the topic of nuclear fusion discussed in this video? if yes then what was discussed\n    "
2025-07-07 02:06:13,583 - INFO -  No, the topic of nuclear fusion is not discussed in this video.
2025-07-07 02:06:13,762 - INFO - {'context': "quick introduction to what D Jango is and why it's so popular then we'll talk about the fundamental web development Concepts that every web developer must know next we'll set up our machine for development and create our first Jango project once that project is up and running I will show you two essential techniques for debugging D Jango applications this is going to be a short and sweet introduction to D Jango so let's jump in and get [Music] started so what is D Jango and why is it so popular well Jango\n\nwith an authentication package for identifying users it also has a package for caching data and much much more so since D Jango offers all these amazing features we can focus on our application and its requirements we don't have to reinvent the wheel and code all these features from scratch now once in a while you might come across someone like our popular super star developer John Smith who thinks D Jango is a piece of crap because it's old and Bloated with so many features he used it hated it and then\n\nso let's jump in and get [Music] started so what is D Jango and why is it so popular well Jango is a free and open-source framework for bu building web applications with python it's not the only web framework for python but it's the most popular one because it helps us build a website in less time with fewer lines of code that's why a lot of companies like YouTube Instagram Spotify and Dropbox use D Jango in their text stack now Jango is what we call a batteries included framework which means it comes with\n\nthe user or the customer that owns this cart where is that in the diagram well I haven't connected cart with an entity like Customer because we don't want to force people to register and log in before they can add products to their shopping cart okay so there's no relationship between carts and customers so carts are essentially Anonymous anyone can have a cart whether they're Anonymous users or registered customers Okay so so we're done with the cart now let's talk about customers so our customer entity", 'question': 'who is Demis'}
2025-07-07 02:06:13,762 - INFO - Parallel chains are working.
2025-07-07 02:08:03,579 - INFO -  No, the topic of nuclear fusion is not discussed in the provided transcript context. The content primarily revolves around using Django, a Python-based web framework, for building web applications, including creating variables, using autocomplete fields, data validation in forms, and working with inlines and generic relationships. There's no mention or indication of nuclear fusion.
2025-07-07 02:08:03,616 - INFO - {'context': "quick introduction to what D Jango is and why it's so popular then we'll talk about the fundamental web development Concepts that every web developer must know next we'll set up our machine for development and create our first Jango project once that project is up and running I will show you two essential techniques for debugging D Jango applications this is going to be a short and sweet introduction to D Jango so let's jump in and get [Music] started so what is D Jango and why is it so popular well Jango\n\nwith an authentication package for identifying users it also has a package for caching data and much much more so since D Jango offers all these amazing features we can focus on our application and its requirements we don't have to reinvent the wheel and code all these features from scratch now once in a while you might come across someone like our popular super star developer John Smith who thinks D Jango is a piece of crap because it's old and Bloated with so many features he used it hated it and then\n\nso let's jump in and get [Music] started so what is D Jango and why is it so popular well Jango is a free and open-source framework for bu building web applications with python it's not the only web framework for python but it's the most popular one because it helps us build a website in less time with fewer lines of code that's why a lot of companies like YouTube Instagram Spotify and Dropbox use D Jango in their text stack now Jango is what we call a batteries included framework which means it comes with\n\nthe user or the customer that owns this cart where is that in the diagram well I haven't connected cart with an entity like Customer because we don't want to force people to register and log in before they can add products to their shopping cart okay so there's no relationship between carts and customers so carts are essentially Anonymous anyone can have a cart whether they're Anonymous users or registered customers Okay so so we're done with the cart now let's talk about customers so our customer entity", 'question': 'who is Demis'}
2025-07-07 02:08:03,616 - INFO - Parallel chains are working.
2025-07-07 02:08:04,894 - INFO -  The video provides a tutorial on using variables, autocomplete fields, and data validation within a jangle (likely JavaScript) environment. It emphasizes the importance of watching the entire course from start to finish and taking notes while learning, as this method helps with retaining information effectively.
2025-07-07 02:09:26,254 - INFO - 1. The video demonstrates creating a variable in JavaScript and using the 'F10' key to step over lines of code during function execution.

2. It suggests converting a field into an autocomplete field.

3. Discusses default data validation logic for forms, specifically highlighting that fields marked as 'required' cannot be null when trying to save the form. No coding is required to get this functionality.

4. Emphasizes the importance of watching the entire course from start to finish, even if you are familiar with Jangle. The instructor shares tips and tricks along the way which should not be missed.

5. Encourages taking notes during each lesson by writing down keywords or phrases. Repeating steps shown in the video after each lesson can help reinforce learning. This is how the instructor personally learns new things.
2025-07-07 02:09:45,852 - INFO - Transcript is successfully fetched by api.
2025-07-07 02:09:45,949 - INFO - Chunks has been successfully created.
2025-07-07 02:09:45,951 - INFO - Use pytorch device_name: cpu
2025-07-07 02:09:45,952 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-07-07 02:10:23,549 - INFO - chunks has been successfully stored in vector database.
2025-07-07 02:10:23,550 - INFO - {0: '427d10b9-d52a-42bf-ae86-bd591e27172b', 1: '7beec1d2-cd30-470d-8a9b-3303158e3d44', 2: '0199236a-ee74-4171-af80-7f4153134f2d', 3: 'da72c058-d9b8-426d-b5d6-fdbbdaf45509', 4: 'f18281b5-60c8-4803-851a-0df15705b175', 5: '1d3ba2ac-85dd-4529-a458-5437570dbfda', 6: '704afe2d-8dc1-4e0f-9e31-726cb7ba5949', 7: 'f56d72d1-a950-437a-b5fc-128c77664082', 8: 'ece96388-505e-421d-b651-c43da678ba90', 9: 'd60ede09-a1f1-4cbd-8664-b8574cd6d912', 10: 'a78b4ad2-b554-4b7e-b5e0-701d1d215ded', 11: 'f7200fa1-2c08-4889-b3e8-6265c93f508a', 12: 'ef7f8842-1b03-41e2-988a-bcbf609a8b2c', 13: '636ef12b-86ff-4afe-a416-f39481574987', 14: '9d6760e4-28fe-41d1-910c-a6a292bc4066', 15: 'b6118a64-fc75-4b35-9c98-90f4a82a2d20', 16: '3cf6cb53-3e67-4cd6-b9d0-70081235da17', 17: 'f18dc95c-f691-4fe7-8770-f7f06c22f900', 18: '1dfff0ff-65e0-45d9-a06d-788489d26830', 19: 'aa767178-852f-4801-8a5a-5ca6e064839c', 20: '798817dd-dc29-4443-8478-8cdcabf90af6', 21: '57cbf2d0-645a-495f-a978-0a991ca06f59', 22: '360f6b41-7f74-46c4-b261-44aaa1d55235', 23: 'e6ea0f2c-beae-4297-9305-e2369c16809a', 24: '419902c7-975d-4b89-b182-9e5235392f3e', 25: '2d16904a-00de-48ae-bba8-4f735e344fe7', 26: '1a1e4529-655e-4215-b31d-81e68891665a', 27: '48426698-a161-43c1-af71-a985c1b4354c', 28: '2b54b651-1812-4c38-8e81-8e10f82c9d53', 29: '429235c7-8a13-4890-9e91-74a2f73d3d24', 30: 'ccff7fbf-3fa0-4d66-a0a2-805a7bd36fb5', 31: '43869598-26bb-44cb-aa7e-fe2dfccb6c5d', 32: 'f5870ddc-b3e7-4e70-86ad-e20735e3f79f', 33: 'cacc1c10-ef00-48ba-b494-3dcf2d1acba4', 34: '14900618-b66c-47f6-97b1-082bbd463631', 35: '9d727ddb-21a2-40d4-a30a-82c224dc2a7d', 36: '5c3f3658-efe8-4ef0-bff8-4307737bfc79', 37: 'd1ef9d92-b8e9-4a25-b935-62ea33266413', 38: '375455fe-c28d-4213-91a1-e9a6349cf4f5', 39: 'a619817b-fa8e-46da-9f1b-e931b059cb54', 40: 'd808c2cd-5bc8-4e6f-b328-b6f5b6e24f35', 41: '3de287f4-a5e5-4e9f-b370-f5df67e35bca', 42: '08ff4f44-51e5-40f8-8d01-2f68f715e1b4', 43: '665735e1-8482-4348-9fbe-2785b0aff928', 44: 'd658219a-9817-4f4a-b191-e50e6c881a3e', 45: '80d4d70e-0108-41b0-b4d0-e706e6157c83', 46: '7b419cd5-e7bd-40e3-93d7-7ff02080bebc', 47: '244168aa-a969-4b03-bcf1-89098371795d', 48: 'e49f81be-a0c9-4d0c-9626-8227fdb343d3', 49: '42839d09-24ca-4065-956b-bbb4fb198c1b', 50: '1e7bc7b7-0efe-4353-a63f-3a5b1bdc5f4b', 51: '5e8cf5d4-bc83-42e4-b025-3fe33804ce11', 52: '1645b05d-fab0-4b40-8ffe-c3db567f8211', 53: '654c3540-f107-45cb-96c5-dfd286c7050e', 54: '0b0e3e7c-6636-4b8a-9f2f-58f9f7c5ae64', 55: 'fc8808b1-bc47-40ea-9d00-73bf0f3f2778', 56: '368f4c24-0cdc-4bbc-be6b-a74e71a891bb', 57: 'fc535f73-44eb-4bf8-acf8-522c51993853', 58: '2c08f5d2-16ed-4bdc-8799-b12f64945eb9', 59: 'dc6df854-0d6b-4f88-b9d6-14bc42a4b005', 60: '980d15ca-b024-462b-afdc-a2e475e69b99', 61: 'dfbccafb-faf3-49a3-9389-6e71d817fd8f', 62: 'f09b6640-dd61-4b06-87e5-403d6b9073ac', 63: 'cfa82314-d161-43b3-b345-37631ce3abd8', 64: '43084389-eafb-4bc2-b421-ec2b50920f10', 65: 'a084c70f-0f50-4a4e-a7dd-713b6d8ecf24', 66: 'a97671f3-3376-4b5a-80d2-f5a25ecedc84', 67: 'fa2adaf6-1e97-477b-9bb3-909209fff2d6', 68: 'fcb3059f-22c3-41b1-a922-138e4f18ef3c', 69: '71a2ebe8-a606-4ccc-baa5-9b027db5d29a', 70: '7dc31e59-f748-4f4a-8122-a87bddabe9a5', 71: '75238290-fcd4-4064-a541-e3779bfea79a', 72: 'e8c2c768-bb0b-4713-9c06-8769a5892ad5', 73: '6c8f412f-d1c0-49b4-a2c8-425fbe836e87', 74: 'cd1b10df-18d2-482c-a7ba-7d18953ba7c8', 75: 'df83be1c-20cc-498d-843f-c69435099163', 76: 'ea093d1d-485a-4074-a23d-787a5942cfc1', 77: 'c4947117-6e6e-4021-aa96-b7335177a10e', 78: '278782a0-6747-4828-b34f-8f53a3683c49', 79: '35400875-717e-447d-a8f2-c58124b3f0ac', 80: '079098b9-e69f-41b4-b3f7-97cf1f260113', 81: 'f9d68082-ac23-4fdc-97de-68747888e923', 82: '960f5e91-3e60-4d9c-b469-f457e34a9da3', 83: 'ad749f75-42b9-42a9-9d14-cf688e11598c', 84: 'cb63dac0-ff25-43d0-8fbf-9a2b04726e14', 85: '03b05ba6-6125-416a-83ee-9f4b0e2800ce', 86: '8bac84d0-003f-4b03-96cf-372e674cc433', 87: 'd9313eb3-9741-4218-9012-c784cd6b4de3', 88: 'ee359484-3510-414d-b89e-9c27f6b51fbb', 89: '1c8361d7-6856-47cd-8fb7-5bf28e8fa300', 90: 'baf82b69-ef7b-4511-bbcc-7d4ffcad0eef', 91: 'b9e3c370-3d4d-4f60-9946-e2f0b184c393', 92: '3c473ff1-78ee-4d70-b1e7-8ed3665314c7', 93: '6c671942-2703-4332-9b62-7deb7e9bf15d', 94: '4883d791-2b7b-4448-8225-a4a800dea0ea', 95: '7cc7a73f-dacf-4ce0-9cd4-33d707245f4b', 96: '0f4ede41-096d-4807-8246-173cee0fb162', 97: '6e525d54-9b57-4b24-aa29-fe330ac0b693', 98: '8670a506-3a64-43c0-b6f5-ba826e6a2f72', 99: '7cb7b2f6-9bcd-41ad-9ef0-a11dbb1589d7', 100: 'ede320f8-c4c0-4bf0-a8ad-ddb852822e3c', 101: '77385b06-0ea1-4733-b5e3-30f188b92e3d', 102: '9010e8e4-79f3-4824-a559-9afaa10da8a2', 103: '780c280f-2867-421d-bf0b-aa730fc977b9', 104: '5aa6568b-d654-408d-9288-3fe5551f22d4', 105: 'dbec55e8-ed96-4007-a2e8-c227441ffb3f', 106: '00413c78-d44f-4efc-b27f-896df5fc8e19', 107: 'd9c22ff7-1215-436b-84e1-fe0b041df7b1', 108: 'c4c35dac-61c5-49d4-8c3b-568bd5eb50d2', 109: '53ec5041-4be4-4d27-a8a3-ac2d0aaf7e65', 110: '3a576c54-1c11-40d1-b866-fa1cfdf3e4bf', 111: 'b0571d4e-c1a5-4071-b525-53c372951457', 112: '79edd8dd-d1b4-41fc-af61-eb9dde60de3c', 113: '75309111-6cb3-4bb2-8b1a-ac655fca4ec7', 114: 'a7c33ba4-5864-42d9-b928-e1047784e003', 115: '568b2881-775e-4bff-acba-cb8df477ff3e', 116: 'de06dd28-f133-49cc-aad8-17e2fb8b9f7c', 117: 'e1b207a5-b829-4882-b780-3727f75f0c67', 118: 'd5a4c4f4-8bb7-4bb3-88ca-d4abc14e617e', 119: 'b856cb81-9193-4e1d-a82f-3ebc4db6adaa', 120: 'b5e70094-f56a-4aed-82b3-f04ae2399603', 121: '355d208c-d487-40b7-b010-dcae142a5df8', 122: '02ea47f6-d63e-45c2-b687-28c81b8b8a82', 123: 'ef4d8cde-660d-4bf6-bbdb-a82871b485be', 124: '0fde2212-20f6-4a83-adb8-a8c749951359', 125: '52c11194-9af3-40cb-9380-6890dfe6b6dc', 126: '7a69e0b6-439b-484f-b015-42b53e51a99f', 127: '70e6c41b-e74a-49d4-bbae-1801730ddfe5', 128: '9329ed18-ab8d-4749-8adb-a88366136d6f', 129: '1b9958a3-ba4f-47b3-9ad8-f56819ce976f', 130: '79fb6e42-d803-423d-90dd-1cf48773df47', 131: '7a6e226d-cfcb-401a-aa44-edc5d51b2eca', 132: 'a772a9bf-6f82-46bf-9a58-d8956fe42952', 133: '0c6a632c-1ea7-4d0c-9abd-b1e15522741f', 134: '02e58a1b-abab-4522-9a05-198dd50752b4', 135: 'e807b095-2295-49d4-af41-945622b08a11', 136: '669c90de-c6b1-4ea0-b0d0-b650729b2fca', 137: 'aeb8e8d2-ea01-426e-9528-145f84d3d4f3', 138: '5f30a23d-703d-4c55-929b-d7eefc4c095f', 139: 'a9979788-5d22-4572-93d1-f632eee6180e', 140: 'e5ef88dd-0443-4c78-b05c-ad71eb906dcf', 141: 'b1c3ec4a-c2f8-42c8-978d-d3002dad928a', 142: 'b5cfba4f-ffe8-464b-bf3b-68f784dff647', 143: '94df58f7-9999-4921-bcae-5eafd422d654', 144: 'c60acd56-d87d-4033-96ab-7466391c9f0c', 145: '536880e6-1f0c-4a03-9f43-db9e702afd80', 146: '12ad99f3-3f9e-4d16-8249-b1633b20e795', 147: '90f5efa8-af03-45a4-99e1-3feb43362eeb', 148: '1fbaed19-c3f0-4f3d-8576-bb31cc6d1981', 149: '39718c35-1d3e-43f1-8fc2-1390ad18f503', 150: '7d3f7253-85dc-4606-8e8d-f00d8c1fbc3a', 151: '243b60dc-b9b6-4cce-8763-1006abcc56fd', 152: '91d03cb2-80b8-4911-9137-7b1fe81468aa', 153: '7488aa32-7054-4917-bdb0-a507a982815d', 154: '607794ba-61f3-42ff-8fbe-45a6bbedd3d6', 155: '33f0d0e8-be4e-48b7-ab95-88e5887d96d4', 156: 'de723806-203b-4924-b54e-58b1bc87c4b5', 157: 'fc426b29-fa9e-4128-be7b-521662f96267', 158: '6471458a-c61c-4742-a5c4-0cce8fce6bb0', 159: '4c9e8f1e-ebef-4eee-a5dc-05a23016d542', 160: '1d0ed1d6-aeb2-4b9f-bd6a-60c49833df20', 161: '3abca641-c028-4cd7-baa3-6a6ee6c20bb2', 162: 'a7110294-de87-4c85-bc99-a1a6744162be', 163: '089975e6-525d-43d8-aa30-297cda672f0b', 164: '0d08c98f-5d74-4791-8048-9c1d46cdf6e6', 165: 'b342e5a0-14f9-410e-bec1-10398a90573b', 166: '4d83452a-d843-4a66-af95-b79f5e42e962', 167: '4b68d4bb-6d67-4a91-b715-903dabd2b886', 168: 'c058a17e-46ae-4959-8b0e-c92e3992935c', 169: '5e21ac11-486e-4a0e-acef-bfb6648486f9', 170: '200c97ea-6320-4040-a61f-95acc1161e9b', 171: '7bb0f4bc-b911-4c9d-8464-963125b39e6d', 172: 'b4fac588-9c2e-433a-9d1e-aab264d650b7', 173: '10ebd229-e1ba-414b-9c6f-5727d43296f1', 174: '885dce12-3cd6-4c1c-a3b0-d9e339bd0637', 175: '0e1ce6fe-d64b-47b9-bad1-6d1ac0b8a15c', 176: 'cd8be73d-3a6a-4a68-9984-b7d62cf5d8e5', 177: '74213427-c784-4d9c-87d2-7bdf85863373', 178: 'f5bf358b-2787-4e9b-96fa-41d4a44383c3', 179: 'af68a218-24f1-47e9-9b18-98a9d4cc3c86', 180: '902e20ba-a7a1-4e7f-a899-2c299847bd5c', 181: 'e1b4e832-c557-46a6-bdc2-53dbe35637b3', 182: '8421437a-5b7e-4a77-9199-c43d8c05a8b2', 183: '8b18633c-728a-40a9-8447-d6d58c3ebaa7', 184: '9643404f-d45b-437d-adcd-ac6a4118365f', 185: 'bd16d179-e731-42b8-8fa6-dd84c93838db', 186: '63a79406-3dd1-4eb8-a278-957d3ad2a115', 187: 'eeefd73e-113b-4ab6-9e2b-eba09f0e884a', 188: '710d2961-bb93-43e7-b527-9de03e905741', 189: '60598179-ccb4-461a-8c7d-d7884ffc6c7c', 190: '3749be8c-0349-4ba3-b9d2-3f63a23ca049', 191: 'c592fa74-892b-4a86-b2c4-597c79f95e2f', 192: 'bb1979b4-db06-4482-829c-bb234001aadc', 193: 'dd663a54-96f3-456d-8bd7-e03a8fdc28ff', 194: 'fc2d3a0e-45e0-4e85-b4d3-42ab350db04c', 195: '15693f0a-ecb3-4d52-8034-a9cda4cad0d5', 196: 'c90bd949-bc51-424a-9b32-4e0b9bcd8eb0', 197: '9300ab4f-7d3e-4d4d-93e2-7f4dd8257875', 198: 'c341e9c0-abd6-449e-863e-6fc9b27094a0', 199: '57974b42-cbfc-49fa-8c49-cbd3358bcb32', 200: 'f28b0534-9f2d-4c7b-9323-d4f0b0f43b71', 201: '29cfe584-7d7c-4d18-ab38-a43a2f76fe95', 202: 'b914f3e4-5d2c-4d6c-a368-c5f0796a8bb9', 203: '6424c3f2-8cbe-4cd7-adf7-1b186b134d77', 204: 'f0daed88-4305-4d1d-82cb-29d41f9879e0', 205: 'f8b7186e-73d2-4f61-a2cd-38bee83a036b', 206: '67eda194-b11a-4d24-82ba-c046c0fe3014', 207: '4ccac805-2f19-4ac6-8709-e38d98d20542', 208: '56262401-9ae8-43d4-a71d-b7b6d169d3a7', 209: 'a36a5bfb-4f1b-41f3-93a9-81ab73d4f562', 210: '682929f8-f82a-4af3-bf14-66a084b74d48', 211: 'da0aefbc-6a0c-4a26-aaa7-83a10abaf2a4', 212: '609b4f4a-6964-43e8-9850-cb8de2df4982', 213: '90afc119-122d-452d-8688-1aac691364f0', 214: '288759ae-f819-41c5-be08-4d1ea8e31827', 215: '6216a913-f003-4426-9bf4-e734c825fb19', 216: 'a3cbd230-8159-4cfd-b5d5-47e4764e9b25', 217: 'f8e7a5f0-e27d-40b1-b47f-8d50ca8e41a2', 218: '1447b48e-8c5d-4e93-a4f1-04262ed14083', 219: '135e51c0-3ccb-469a-9afe-8de16b8aefe5', 220: 'c2ff0544-ad91-407b-8ade-82ab829e4646', 221: '18dcd9d7-959d-41f2-ada0-3f77bea5739e', 222: '4b8bb79f-97fd-4d86-9f96-192793bc4a23', 223: '6b2ce5a8-64f6-416c-84c9-b49c849b4197', 224: 'de4d3b11-490d-488e-bed5-85f3c24fbd6c', 225: 'c66e1417-d877-4171-8718-412f75fb41f1', 226: '12929c6c-46b0-427c-b879-bd6cb9582f49', 227: 'af64ff2b-c3dc-4219-921d-6721bb329c84', 228: '32bca6ad-682e-4aa7-9095-63428ebab12e', 229: '91cf69a7-1e69-4e97-bd0c-904bc8226aa1', 230: '0c4d7d4e-af92-454e-8807-54dc41d2cf28', 231: '20a88f7a-3269-4eb5-bf3c-0da65d196d90', 232: 'f2c800ec-6d3e-41ce-841c-8dfb73635446', 233: '3797b57a-c6cd-4f8f-bb02-0bac48fb613b', 234: '6f195bc5-e425-4c48-8d7b-5dd9f933a7db', 235: 'a3bad1cc-f481-4086-a88c-f9cbab6392ab', 236: 'f755fb39-735e-417d-b2b5-0bd865984cb8', 237: '09fcd1e8-0893-4357-9e7e-fbf850f415ec', 238: '53af3599-6f37-4704-8c52-8afe4a2b78fd', 239: 'd58018bd-b6f7-47a1-b9cf-9d970d14f59f', 240: '0ee17fef-6298-4b02-b206-d12587500b92', 241: '9c8b386a-7331-40d6-bd60-2b1b881bb7e5', 242: '619d65b3-973a-4f22-b2f9-79c4f3586eb7', 243: '2054ff00-e573-4344-8bb5-0c695fd8808c', 244: 'e1b92ab1-8e01-405c-83b6-03fd11dec4e2', 245: 'bdeb2037-532e-4ceb-9afa-052114cbe357', 246: '1a0cf968-25fe-45ad-b138-c523ddb0ae0b', 247: '60af0e9b-4ccb-43da-a7aa-f16eb829157f', 248: '7bd977d0-1722-4a4e-b698-de49ec69124f', 249: 'a80c9421-d0b0-4898-aa0f-9cc044e84260', 250: 'f493ce4b-4ac7-443f-916d-65ec8e6b3aab', 251: 'ea32837f-b752-4e9f-8e51-fa4cae7730a9', 252: '00b0f643-0478-4ce1-b824-90842e32edec', 253: '9e218f98-10b0-4986-ac05-c4a81772ce7b', 254: '3ee94ed9-e83f-4f0e-8e79-4ff721ff4669', 255: 'eb795be3-e005-4761-9c62-de128a119e72', 256: '5226edc2-da8e-41dd-a42c-20edfa41a0d0', 257: '85cd3916-76af-4937-a38d-03a1e56a0425', 258: '01caf96a-1d74-4b16-8dd0-25e18e608b1b', 259: '3d181b6c-7817-47c8-ac7b-ae500bf3ff0a', 260: '12bd00e8-8cfb-4ea7-9085-8b5bd7c982c2', 261: 'dcd9fd2d-127f-48cc-ab68-6f8280c27791', 262: 'bcf36276-f5c6-44fe-ab8d-ca4b82bcbd18', 263: '6845729b-dc6e-4de6-a3a0-10678af08015', 264: '565f2c1c-20c7-4b92-a7d2-9bdb52a998c6', 265: 'c31b758f-f8f4-482e-af22-d72c3e18eb88', 266: '2e07a2a0-5846-4e2d-becb-2901eb412044', 267: '5f0af353-572c-471e-a386-79155b1d0326', 268: '24a4131e-e3c3-4511-a5f9-b6f654a03d65', 269: '52049de0-cf86-4659-a4fa-a2de9201d92f', 270: '66a00c43-be86-4b50-bfdc-5ef140ee52d0', 271: '00265fe9-b6a8-48ac-af2a-b557e76d5a08', 272: '7612041e-f278-41af-9181-8877379017dd', 273: 'ea9b0fb4-0c7f-41e1-80bc-017ae05a1da8', 274: '9401be1d-7703-4c22-aa41-bdceee1202e7', 275: '71f9991e-957d-4631-a149-b7aabf190b91', 276: '1e2643ee-4591-41a0-8e85-4415e822a643', 277: '4b3ea3c3-fde8-411f-abf5-1e56d4719c02', 278: '781e100d-ebf6-4bb6-bc9c-834ba194016a', 279: 'c6d5abe4-e287-4068-88b3-3afabfdc74bb', 280: '62ffaf3c-2071-42ca-85a8-6abd6f5cd68a', 281: '41965453-5940-4a3d-a372-699243372640', 282: '48164654-cca8-49fe-91fe-9b43c154e168', 283: 'dd5e46b6-7dca-4a79-8426-ef6f1834ceaf', 284: '56e7543d-8b04-46db-9b7c-d81867936e9f', 285: '560f0d79-fc26-449b-9e75-e20f2d3b781b', 286: '8c80f77a-daa8-4649-95df-c27b9a0af792', 287: 'f0ae6d35-109f-4a1e-b12b-af18c1b5d503', 288: '01f3f0d2-571d-458e-9dfb-fd2d8902b8eb', 289: '221fc45d-89d0-4142-9c4b-7737b9bf2b2a', 290: '2776fc0d-d668-48a5-952f-e8a6747ab3be', 291: '6033c0cb-083b-41e6-bad7-65511d8b2bc6', 292: '4880a1d2-a9a7-41de-bd74-1fdfcbb35224', 293: '465e82ec-f33f-4181-9208-f21e07862ef0', 294: '52000992-5eae-474b-aca2-621a02009b98', 295: '32fd5e6c-528f-4dd6-a521-512c25c99d3c', 296: '0d818df4-f6c1-4d7b-b51f-462a26b25f86', 297: 'a9db5d44-fa8b-4baa-9d1c-7f8da6e774b5', 298: '1294013d-3198-45b3-b7f4-9086593e03f6', 299: '16abb518-468d-439f-b29e-1d887488f294', 300: '4191951f-4802-4d23-89e1-6a0c6ddf2c2e', 301: '2ec69793-445e-4bc9-9a2a-f11a127348fb', 302: '901f59eb-2d9a-4816-8ee4-69ca94ed81c6', 303: 'ef281134-3e75-4543-961e-ceb873020b5b', 304: 'e75bf0a5-4810-49b1-9691-81abd6e87c10', 305: '9b7cfd89-8cfa-4bd3-af56-b816f90a6f46', 306: '2b983e4e-2672-4b92-8ec3-2bf47eafef0c', 307: '9951cc8b-489e-4234-82ae-1970fef4881a', 308: 'aca368cd-5bc1-4866-8f04-ff70480da70d', 309: '5c5f5117-2f8b-47af-bf19-e901d0f3dd34', 310: '4cba80a4-47ef-4bc4-8acd-33453b935d3e', 311: '1fae1c5d-4084-4f49-8cf7-991faa92e637', 312: 'fcd299d1-9bfd-4795-b384-cbfbc971edb5', 313: 'd3850395-1bfa-4383-9e0f-667961fc28e2', 314: 'ae5279b4-cb55-46ef-bd06-dfadd6fe25ca', 315: 'fa769699-4d5e-4d25-957f-176fb3854db0', 316: '06da11f4-f09a-4c31-aaa5-be78703db934', 317: '26fd36d2-e7d9-4594-8ca8-a02f867a6b69', 318: 'bf1b6ef3-5028-4b02-bbb3-e089896ab929', 319: 'bb741c02-9317-4778-87c2-24bb44895adb', 320: 'fa03423d-b493-4914-aa9a-aa93660415e1', 321: 'c36ca9cc-6de1-401e-baca-3e5c7dd7fd08', 322: '650c447d-bc68-4729-a995-04a34f48ba02', 323: '2e321fa2-cc07-45be-bf5d-603493f20a74', 324: 'e03e0e89-e0c8-495c-b552-7eb8afa37463', 325: 'b8adbfa3-6581-459e-85fc-c194d5fac677', 326: '69accc2f-26d6-4358-820c-5f306e4dd488', 327: '95fd42c1-42d7-46fa-9e6d-ef19e940af6b', 328: 'a9fb098d-4d70-4124-aa12-21f53ebad817', 329: '176899b8-0804-4174-8dee-b382e8bf9cde', 330: '627f279c-458b-40b1-9db6-d74c2c337679', 331: '92a2210b-dedb-499a-acec-0220aba006d9', 332: '92431e33-45db-4335-a14e-b5110f24756a', 333: '0b4c2724-8fb4-44c5-809c-871f5ed5c1f5', 334: '54c1c419-1239-469e-90f4-c96cb6dfd8f7', 335: 'b79c5025-1551-4a96-bfa1-554316e74f35', 336: '957a191e-8f2d-413d-b1e6-e10acd33e193', 337: 'caf27d15-6540-449d-a337-4141aedd6e4a', 338: '95edfb5e-0658-4665-97bf-43f57fd30ae3', 339: 'b1644c2d-b2f4-45c7-abee-f7a97580fbea', 340: 'db83e79d-a080-4bfc-8026-d4d1c9c9b418', 341: '70d5f2c1-ca50-4b45-bf4c-29ca0245409f', 342: 'd4b546cd-fc16-4f2c-9443-853a0fb6c6c5', 343: '3138013a-5e99-49a4-9a2b-fe91a04541cf', 344: '8ac6a1a9-e8a9-441f-aeb1-0535ffdd4fc4', 345: '6945a977-9562-41c1-afea-69f27d207ec9', 346: '42ce122e-575f-4c1d-af63-00df0b52fdf7', 347: 'b11bc111-9d28-4d34-ac9d-2a8c86a9d907', 348: 'cd462b2a-a217-4bdb-a7e6-9ef879da1202', 349: '18e21dd6-2de8-4e57-be1b-397274035bbb', 350: 'e674f408-ce0d-4715-a2a9-8285a1193588', 351: 'f062dbb3-f04b-4205-bee8-0434131e4210', 352: 'ff570e42-0b2d-4577-8dd3-9decd00c6f55', 353: '203ab5bc-ecd6-4eda-b25f-083c226715ee', 354: '245433e2-6e2e-460a-a8a0-d33ac86d6da7', 355: 'bd680917-81f4-4b72-973b-38f1a0a78528', 356: 'f1e7f85b-c9a2-4076-ba2e-9607c48127bc', 357: 'f4c3b425-d39c-4cfe-8e51-bebc332a514d', 358: 'c98471e0-c7d5-401c-9941-99b6a8f305c7', 359: 'ad9c6116-df39-48cd-8ecf-814add0fc28f', 360: 'ff4f7bbf-7729-4c6c-8b74-7687a3da41a0', 361: 'ed465bbd-4219-4f9b-b7f4-ec1a03bc3947', 362: '87fd4365-acb0-41d0-bb18-987fcd1b7b3e', 363: '4d92225f-f096-4d38-aaa1-0fe6e61fbe8b', 364: '506739cf-8173-43c0-b7db-d4783e6e1935', 365: '08160997-de93-4265-a1a0-1840a73777a3', 366: '16419341-3afc-40b1-81fb-ffc9c63482f1', 367: 'fdcd706b-d3a0-42ef-b0e5-4b1b05e18a14', 368: '40f05d61-2f9b-4213-986b-393c33529ec4', 369: '3ac4f47e-34c8-499d-9704-11ac0bb4d937', 370: '63bc50de-9117-429b-bc75-d188d2f993f8', 371: '4a677efc-d9c2-4ade-9e6a-0c4973eb5c32', 372: '7220dcd7-8e3a-4a49-b3c8-70469861c9b7', 373: '1582e90c-73ed-481b-a88d-e853f8a8906a', 374: '1280049f-51f1-4b03-9722-f7dbc798b70b', 375: 'd421b5e5-0c58-47e9-b143-37284c13b96e', 376: '21e0454a-0040-4adc-8efc-79f6e5ad96e5', 377: 'ba01aa52-d61e-404a-a017-9b3987cc4035', 378: '952f2718-e75d-4304-827a-93c93f18c227', 379: '625e844e-c00e-4efe-b8f3-b02f1ae5136b', 380: 'f8d68105-ba0f-40b6-baba-8ac2c90527ae', 381: 'd592b92d-2482-4ed9-a1f7-feeeca69fbd5', 382: '1e5d8eb9-ca83-4252-9593-6ddd79d2bfe4', 383: '65699080-e6f9-4fbd-9e42-a150fd22a5a5', 384: '6c874bb5-93ac-432d-8dec-b2836833dd0d', 385: '9661793d-c8c0-47dd-9840-fb8b034f7750', 386: 'eaf0c00c-38a2-4f8b-8380-da609e6e3d26', 387: 'cc6a95a0-c4d3-4312-9dc7-f632d19d8715', 388: '93e01020-ebbb-4a5c-a1ae-ea56ef9825c7', 389: 'a6d30983-1af7-414e-a0aa-a8dbc2724609', 390: '058e9509-6d57-40b4-8964-c27e72bb3df6', 391: '70280501-d470-4da4-8637-8a9d96eaecf3', 392: '6edd81d8-abe2-436e-83d9-1478af9bc31c', 393: '13344811-c252-4349-8399-06676ded1350', 394: 'c92bf520-dece-4cd2-9634-08825ab2cc07', 395: '7140e047-ba9b-49b8-a556-68a24341f784', 396: '628effd0-fa34-47e7-8713-ce00a64d0d7b', 397: '25d0e4c3-314d-4fbb-8d8f-f66baac23b56', 398: '263b83ae-d742-40f0-97e9-5e65ea2d7058', 399: '33c13ace-20cb-4453-b10f-d17534feb6f4', 400: '41058e19-8aec-48cf-b8bd-6e4819758bea', 401: 'fd0a4022-7f0e-4697-a07f-38b05874bcd9', 402: '585d536d-b2bb-49bb-9ace-e3589e3d0628', 403: 'f26765e1-5bf0-44a7-8ee3-d02e274fca1a', 404: 'c7379718-e292-4928-a00c-1d6989f8de62', 405: '514dfafa-7e73-49f2-9562-01b3b466e950', 406: 'd95d0597-88c8-4ee2-85b3-32ed73cee6bd', 407: 'fe72ec21-6ff0-41a9-b4aa-d4a32c6f7dd2', 408: '396e144f-6041-4faf-9933-b05333172cdd', 409: 'ec30410b-f92b-4635-89bf-5c92ad779c81', 410: 'adbe2de0-05ce-49a8-81f3-162196ee3f3b', 411: '5a0adef5-46dd-4c2c-9216-3c5312ed5aed', 412: '5c09cef2-14dd-4a50-b996-e1d030ccc0f9', 413: '389af2a6-fcb6-4e0a-9603-1c02ec1d481b', 414: '1460981f-d46b-4329-bad1-619c3d3bc3f4', 415: '3d40c9b3-a109-43ff-85e2-e65480a6e4ef', 416: 'b163828d-d1f8-46b0-9417-dafeb1efe790', 417: '2cec911c-22d2-4233-8b69-a400250864e1', 418: '32b71e68-412a-4b92-924b-016f297877dd', 419: '0414cc05-21b7-43d4-a2f3-484b8d54ab77', 420: '1aee72cb-c3f1-42db-b614-c7c3bd3b5848', 421: '93175abd-4fb1-4f11-bcb5-e873fdd92080', 422: '0a95ccd8-9758-4610-bdb0-cae7b6629261', 423: '4a3392cc-c901-47a2-b8b7-b360c15daf24', 424: '40233890-5659-44d3-b42e-698126228ec3', 425: '69ccd4d9-f872-4c77-9179-0b0f5872df3f', 426: '83b2e58a-d83f-4254-a9b0-a7f62b5628eb', 427: '1d19f81c-ad90-47ad-addf-e5e18c9e37bd', 428: 'ca71a578-90a1-40ee-a836-8637131e661a', 429: '8b437e4a-1c6c-4f1e-b255-17bf86dbc0a4', 430: '822f8cce-4194-4500-af94-ba64c0167913', 431: '7b4bec43-1dcc-4d07-a0cb-2a445fcc592c', 432: 'd763b2af-914a-4252-9448-fa85e48000f9', 433: 'f21a280b-01ec-43c3-a5b1-ab2e063d8f60', 434: 'cad42e5c-11e2-4e0b-9c3f-e9d0bcd3f25f', 435: 'c4b6425d-81c3-49ae-9046-712de20a0486', 436: '351ab13a-f4f7-4e8e-b39f-cf323fb9d111', 437: 'ac537428-6d12-4d3d-afe3-48bfa93f7973', 438: '35d50131-7888-4cfe-b088-84e6763c32cc', 439: 'ae1ddfa7-3f71-4212-a66d-69978d9cc5e5', 440: '123e82b4-6bc0-479e-b3b8-f4591df78f06', 441: '8055cada-5889-459f-b291-d3e889549b4f', 442: 'c9de316e-9194-4c7a-862a-3cc4aea514c9', 443: 'c98adfd3-2bd1-4295-8c9a-f719b68c0e9c', 444: 'fee3b68c-03a9-4467-84a1-c40dac2161ea', 445: 'c909ba64-ba91-41e3-bf81-1170adbf6eb5', 446: 'ab62b8bc-b9f9-4b72-908f-cf103a49f8fa', 447: 'bc16fd9d-cff8-4f8d-9e63-61ff631ae5fb', 448: '7e6e9db0-09c9-42ce-b1a9-2c986f80a5c6', 449: '08870a3f-e62f-441d-aa13-36dc80a2fc38', 450: '1fe2917e-7397-4e11-ac40-4491e3df3a4d', 451: 'eed304f1-b61b-4622-acfe-8a26d87d86f8', 452: '8bc4592f-5dfa-4e39-8a83-6e40db92d3ad', 453: '4c9d483a-558f-41fc-a788-f2e2f9219956', 454: '74dee7f1-5085-453a-a2e3-bb71cd9d71ae', 455: '6e5a12f9-e233-4d34-9131-4edf05a46fa3', 456: 'bb51f721-1b66-45dc-b297-89e5978e727b', 457: '25b595fd-fcda-4059-8673-a80f88973459', 458: '380fe0d1-2fbd-4b90-8c88-38486b3f29c4', 459: 'e78338e5-9529-4449-8f43-b29d3b11565b', 460: '4a7ddd3d-3f93-4dd3-8cdb-72b72f6336b0', 461: '84a6dee2-adb8-42ad-8007-3c2a0f2e07e7', 462: 'd19243e7-4894-4608-bf90-eb9bbf8a8ded', 463: 'f5110e31-53f0-4710-b9bd-2804b4386b3b', 464: '4030ac7e-d8f2-40fb-868e-1e3ddde3c265', 465: '57f59e8a-14b4-4a26-a7ea-907d1df3336c', 466: '8d99f990-a9cf-4a91-a48d-c271f6f46020', 467: 'c0422463-0ce3-43ac-b4eb-34d995da2210', 468: 'c0e04445-5998-47b9-adc6-3534b38599b0', 469: 'a96f9952-3272-4149-a923-b43f667fd466', 470: 'a90f3194-aaa5-40b9-8ce8-60df3efdebf1', 471: '4a213ab7-c28e-4314-b4e0-f3e1b85c4b98', 472: '94b89068-7fe8-4a50-b6f7-3a28139ced5b', 473: '3419d48b-2832-4622-83c4-cb556ae93937', 474: 'ddc932b8-a633-4811-9716-95a1664c0c7a', 475: 'b1c936ef-8730-4b33-a7c0-3042ed288a7e', 476: '6949cf08-c45a-43b6-ac1e-fcc715a13716', 477: 'b0d5abdf-9b48-468b-a2e7-0fe52d9c4f7c', 478: '6dbfe62d-c638-4ac2-91e5-b9a6efd49131', 479: '93e861c9-924f-4eb5-8c48-8713926121d1', 480: 'f9048542-9215-41c0-8c59-1d1ab0066bf4', 481: '697e944c-55fb-412c-ade7-815f4b6081c9', 482: '3048c627-53dc-4481-b937-7e3f917a8193', 483: '892dce3c-2dab-418d-9340-3d68005da67d', 484: 'de9179f6-a44e-417a-ab07-c6ccef58806f', 485: '4e2f22e7-d567-435f-a063-3bc7f1090a7e', 486: '0ea4bcb3-58b3-4554-bb38-89431fcd753c', 487: 'c90dff09-27b4-4f67-9e8a-e0fad27374e8', 488: '1d169849-f0b9-4e8e-b520-8714b879e275', 489: '67ed4acc-27ef-4a0d-b37a-16c2e327ef7f', 490: '883d2ad1-6e33-468f-a4f5-e04443608b46', 491: '858cf233-eb26-4f4d-9e68-c63d430cc5f6', 492: '38138c82-0bad-43ba-a24d-9f285a6033f6', 493: '287a3548-95be-4204-87d6-8a752b6ba4ce', 494: '39cda3e8-f924-4105-aa59-7f283a09d02d', 495: '32ffc4cd-1bc4-4cf6-9435-d0837e8b0da9', 496: 'd0b9cb32-8ff7-4037-bffb-b4dae5f38af3', 497: '6cfdf502-4e84-4045-b679-012924ae348e', 498: '9dd8df07-a693-4c28-977c-09c56f32bfcf', 499: 'efdbdb48-9000-48d7-9eb4-de3cd24d551e', 500: '3dd054ab-2abf-4956-be80-7c6877ab4fcb', 501: 'f7a728fd-0cbd-4b35-9f20-afb738afb656', 502: '61dfa511-ac08-4abe-9667-69eb0cda55dc', 503: 'fe3b78d6-b04d-43a6-b4d6-351d38a4710f', 504: 'b102ced4-066d-47ba-9548-f99c24bdd248', 505: 'acd9e0e1-9a15-4a09-93e0-01b262dbf0e4', 506: '96067420-42a3-43fa-b27b-b54671c38f45', 507: 'b63880be-5c06-4fb9-9364-d3dae96f211f', 508: 'b8688f30-09d6-4695-9855-25c8afa6fdba', 509: '96350041-9e77-49ef-a38f-a06df1c45ce3', 510: '668421c9-0686-486f-84d3-61bd336bffe0', 511: 'a1d7e203-ba7a-459d-ae3b-d0514347d33f', 512: 'f5e8e426-6e19-4a27-b124-05feba79bf56', 513: '40c46995-5d75-4eba-a20b-ee5a82747e03', 514: '9762f352-22f9-4bf0-917d-ff031d86c7d1', 515: 'd64a7406-bacd-473f-a641-86de83e57078', 516: 'b71be3db-bca6-4272-8302-278cbe4debd1', 517: 'a9c4c6d0-9e0c-4256-af53-f15d88cf0805', 518: 'ca659cbc-a1ef-4831-ba8b-ceed94b0e822', 519: '247eaf5f-bf61-448b-82f3-5e08ad51c397', 520: '339ee3bc-885d-47f3-bdd5-9725c2ab6421', 521: '159f861e-6cc2-433c-9c36-6d0d8d91a98e', 522: '698aa876-0b68-4892-9799-6853cfe609b8', 523: '0f279263-9265-4fe3-a6d4-649e2083bad4', 524: 'e59fd4c9-6188-4cd7-ae84-04b8ec8b4ae9', 525: '90f3bd7b-ccd5-4877-a513-100cedb257be', 526: '861e044a-2b0f-4339-9d1f-550ee61352a2', 527: '762f0c34-b278-4712-ba1a-4292049ca9fe', 528: '3a7df8eb-685d-4522-9621-4c2ebfd5ba3e', 529: 'df356b1b-cf50-48aa-aa11-f5de3300520a', 530: 'c4ab81d4-a714-414f-853b-667d305c4efc', 531: '3ef47f4b-964b-4073-a670-f3ad153e83f1', 532: 'b6f3356d-be19-4bae-8569-e03d1c370a60', 533: 'edb6c401-a111-49d2-a01c-cf16c022ce22', 534: '62140fba-8684-4bc8-b95a-9f630cb9ece0', 535: 'f53ee774-5eff-40a2-bbf0-1b6945b265dd', 536: '578b65bf-1854-4192-86f9-fcd985601e01', 537: '84ca2efd-dcbd-4640-89ad-372bf371ae3b', 538: '028bdf10-17b9-485d-ac45-c13418e74254', 539: 'c5553387-8b01-45ed-8107-79f91d132c77', 540: '3f4d3af3-f7ce-4b4e-8429-27467960d837', 541: '0d10722d-2955-409c-950d-e47710a70801', 542: '8f2afad3-6f02-4461-82b7-81e3d3f41ca3', 543: '4cef2334-80ce-4f33-8998-37a4eb47e28b', 544: '0e65feb7-e240-49c7-96b5-5e3e85b5b645', 545: '92336d44-a421-4349-848c-4cf49bd7a0cb', 546: '545cde27-0b2a-4423-8713-16ca3032a4d3', 547: '0d78ad3e-8816-458b-a8de-bca0284badaf', 548: '42c6155b-71cb-462f-a65d-a716eba76c7b', 549: '05dce897-e307-4ede-bdf3-0f59e35b73a0', 550: '1aac1e6d-7e25-4710-b90b-dba508ae2ffb', 551: '8e0eb0ee-c056-4131-8734-a725e688496d', 552: '531d9d89-b62f-4b12-a63b-148dc3a4c6ae', 553: '49065490-ad5d-463d-95f7-aa992469d6d0', 554: 'c4882b7b-b29d-4b8e-a7f1-45b2a4200ff6', 555: 'e2cfe8de-dabe-4980-828e-bfe766a89238', 556: '37f0371a-661f-4020-b4d7-4dacec6813cb', 557: '574e9b05-0c59-49d5-af94-b5ed8eb0b4fc', 558: '85ce6c37-f548-4343-bdc0-54ee83b68e44', 559: 'ca5fcd0d-5ee0-4666-889a-40953360d8eb', 560: '78f69d30-a6f8-4bb4-9c5a-805b78464c99', 561: 'f7c2023c-1bdd-4a6e-8caf-a672bcd10355', 562: 'edd5f9ea-f13a-424b-80d6-846d21c69779', 563: '599f1f50-9430-4fbc-af45-c8a472e3e79e', 564: '3a7d8611-189b-445d-b1a4-ea009a550251', 565: 'd83d0aac-7424-4bd3-be03-fad5ed6e55e8', 566: 'e9c703ae-2cf2-46bf-be02-4b4546937694', 567: '4e91acb8-06cc-4871-8b6e-a838b2bcba8a', 568: '1b08d5b0-03f6-4086-a2f2-abd62a5ce8a1', 569: '1c964d99-b7c7-4dfa-ac29-35b702a7ee84', 570: 'a3bfdf82-e44d-4744-a423-3bca61640502', 571: 'f3caccfe-8a96-44f6-aee5-c7d27841ff32', 572: '0f99af3c-94b8-4916-943c-357320d1ddfb', 573: 'bc912453-4c28-4b15-a417-18c27bdc8904', 574: '2f4f68f5-70da-4a77-95b3-111b49b99894', 575: 'abe94a8c-15b7-411c-8bcf-923f120f5a47', 576: '3c39908c-2421-46b9-a5d5-bdade5ae45ec', 577: 'd1ed0f70-e608-4bbc-80c4-328b4facc378', 578: '6f2cfb08-11c0-4848-bb53-76dbb45a1fd6', 579: '48dda34e-d26a-4df5-9b08-19d9e905413f', 580: '20f86ba4-0f3e-4441-bbe3-99b56e69ff82', 581: '459a71ab-6146-4b9a-b9c7-f804f3ef72ca', 582: 'f5c282c8-a1e0-4082-978d-697fbd385f08', 583: 'f989c31c-4ec3-4573-8554-f50213ed047e', 584: '779cacfc-3bf6-4c70-bb49-a4de4dfa589f', 585: '91d66dd1-4c62-4e1e-ae88-5cb14492a4db', 586: '0c262752-1da7-4668-8349-c0844996e0ad', 587: 'a30c9fc7-97f4-435b-832c-70f1ce50ee58', 588: 'fbd1d570-da1f-4f47-be84-c7e8781dccbe', 589: '764b962b-dadf-4b4c-98a5-4b3b974e9195', 590: '04d74f7e-cbac-4fef-8639-41c6143f5cc9', 591: '30ee7fec-a539-4b70-8285-d2ee205c9f63', 592: 'c2465a42-f57f-4ff0-befb-511f938db75d', 593: '51e120ba-a6da-4761-80aa-bb193630072b', 594: '7ba06a45-a53b-4dc5-8689-66b5511ed891', 595: 'cc77414b-71cd-4701-bbf4-96f3c9bfee0a', 596: 'b493f2ef-0fe9-4191-bce4-e5ea7a3f0024', 597: '7fbf7f62-bc3b-49e4-8c93-97f0b7fbff4e', 598: '3600a1d6-37eb-4cae-b464-12b1adaa1705', 599: '858e859c-17a7-42fc-b7f5-8d049724809d', 600: '08f51bcb-05a9-41a3-9c9a-5a59b6ee4040', 601: '55800b3f-3c7d-4c65-bdfa-469ad367316d', 602: 'db5afb2c-6bb4-42fb-9641-34c137671e07', 603: '2a42d561-f203-4366-b6a4-c758e624a8a0', 604: 'a19b72f1-22e0-4931-86e5-049fc8bf779a', 605: 'cc96bc3b-7eda-4791-84ec-79c5cc0133cf', 606: 'acb573e8-2a25-4745-8ad8-2ffd8578d47a'}
2025-07-07 02:10:23,550 - INFO - 607
2025-07-07 02:10:23,552 - INFO - Retriever is working good.
2025-07-07 02:10:23,584 - INFO - text="\n      You are a helpful assistant.\n      Answer ONLY from the provided transcript context.\n      If the context is insufficient, just say you don't know.\n\n      in the watch window so before recording this video I was practicing that's you see X here let me select this and delete it so in your watch section you're not going to have any variables to add one we simply click on this and then type the name of our variable okay so this is how we can step over various lines so we can press F10 again and again so this function is executed and now back in the browser we see the final result now let's do something more interesting so back to our code let's close the\n\nis a great opportunity to use an autocomplete field so pause the video and convert this field to an autocomplete field [Music] let's talk about data validation so by default our forms include basic data validation Logic for example because we have defined all these fields as required meaning none of them are nullable if we try to save this form without supplying any values we get all these validation errors beautiful we don't have to write a single line of code to get this functionality right now let's go\n\nsuch as building restful apis authentication and authorization logging caching sending emails deployment and more so if you're serious about learning D Jango and want to become a back developer don't miss the next part and if you enjoy this course please support me by telling others about my coding school Cod with.com I really appreciate your support and send you my best wishes once again thank you so much for your support and I hope to see you again in the next part [Music]\n\na look so we should always specify one item otherwise we're going to get a validation error so this is a tabular in line what we have here is a table of rows and columns now in contrast we can replace this with stacked inline and now each item will be represented as a separate form so this is how we can edit children using [Music] inlines now let's talk about using generic relationships so here in our product form we want to add a new section down here for managing the tags so back to our code first we\n      Question: is the topic of nuclear fusion discussed in this video? if yes then what was discussed\n    "
2025-07-07 02:10:31,370 - INFO -  No, the topic of nuclear fusion is not discussed in this video.
2025-07-07 02:10:31,413 - INFO - {'context': "quick introduction to what D Jango is and why it's so popular then we'll talk about the fundamental web development Concepts that every web developer must know next we'll set up our machine for development and create our first Jango project once that project is up and running I will show you two essential techniques for debugging D Jango applications this is going to be a short and sweet introduction to D Jango so let's jump in and get [Music] started so what is D Jango and why is it so popular well Jango\n\nwith an authentication package for identifying users it also has a package for caching data and much much more so since D Jango offers all these amazing features we can focus on our application and its requirements we don't have to reinvent the wheel and code all these features from scratch now once in a while you might come across someone like our popular super star developer John Smith who thinks D Jango is a piece of crap because it's old and Bloated with so many features he used it hated it and then\n\nso let's jump in and get [Music] started so what is D Jango and why is it so popular well Jango is a free and open-source framework for bu building web applications with python it's not the only web framework for python but it's the most popular one because it helps us build a website in less time with fewer lines of code that's why a lot of companies like YouTube Instagram Spotify and Dropbox use D Jango in their text stack now Jango is what we call a batteries included framework which means it comes with\n\nthe user or the customer that owns this cart where is that in the diagram well I haven't connected cart with an entity like Customer because we don't want to force people to register and log in before they can add products to their shopping cart okay so there's no relationship between carts and customers so carts are essentially Anonymous anyone can have a cart whether they're Anonymous users or registered customers Okay so so we're done with the cart now let's talk about customers so our customer entity", 'question': 'who is Demis'}
2025-07-07 02:10:31,414 - INFO - Parallel chains are working.
2025-07-07 02:10:55,493 - INFO -  The video explains how to use variables, step over lines with F10, and adds an autocomplete field in code. It also discusses basic data validation in forms and emphasizes watching the entire course from start to finish while taking notes for effective learning.
2025-07-07 02:22:11,851 - INFO - Transcript : welcome to the ultimate Django course in this course I'm going to teach you everything you need to know about Jango from the very Basics to more advanced concepts so by the end of this course you'll be able to use Jango to build production grade backends for your web and mobile apps if you have always wanted to learn web development with python you are in the right place we'll use Python and Django to build and deploy the back end for an e-commerce application if you're looking for a comprehensive organized and practical course that takes you from Zero to Hero and prepares you for the job this is the right Django course for you everything you need to know about Django is in one place in the right order so you don't need to jump back and forth between random tutorials I'm msh hamadani and I've taught millions of people how to advance their software engineering skills through my YouTube channel and online school Cod with.com if you're new here be sure to subscribe as we upload new videos all the time now let's jump in and get started [Music] let's talk about what you need to know to take this course for starters you need to know python you need to know the basics of python as well as objectoriented programming Concepts such as classes inheritance polymorphism and so on you should also know the basics of relational databases so you should be familiar with Concepts such as tables columns primary and foreign Keys relationships and so on if you need to refresh the fundamentals I have a couple of beginner level tutorials on my my YouTube channel as well as comprehensive courses on my website codewithmosh docomo that you're the right student for this course now let's talk about how you should take this course first and foremost I want you to watch this entire course all the way from the beginning to the end even if you're familiar with jangle because along the way I will share a lot of tips and tricks and I don't want you to miss out on any of them if you taken any of my other courses you know that I'm not going to waste your time with repetitive or useless stuff so make sure to watch every lesson now while watching each lesson I want you to take notes you can just write down some keywords on a piece of paper if you don't want to write a lot of notes I strongly believe that the act of writing things down will help you remember new things that you learn then after each lesson go through your notes and repeat the same steps I show you in the video this is exactly how I personally learn new things also I've care designed tons of exercises that help you understand and remember the materials so make sure to do all these exercises because the more you practice the better you'll be at Django or coding in general welcome back to the ultimate Jango course in this section we're going to talk about the basics of Django first I will give you a quick introduction to what D Jango is and why it's so popular then we'll talk about the fundamental web development Concepts that every web developer must know next we'll set up our machine for development and create our first Jango project once that project is up and running I will show you two essential techniques for debugging D Jango applications this is going to be a short and sweet introduction to D Jango so let's jump in and get [Music] started so what is D Jango and why is it so popular well Jango is a free and open-source framework for bu building web applications with python it's not the only web framework for python but it's the most popular one because it helps us build a website in less time with fewer lines of code that's why a lot of companies like YouTube Instagram Spotify and Dropbox use D Jango in their text stack now Jango is what we call a batteries included framework which means it comes with a lot of features out of the box so we don't have to code them from scratch for example it gives us an admin interface for managing our data which is a huge timesaver it also has an object relational mapper that abstracts a database so we can query or persist data without writing a lot of SQL code it also comes with an authentication package for identifying users it also has a package for caching data and much much more so since D Jango offers all these amazing features we can focus on our application and its requirements we don't have to reinvent the wheel and code all these features from scratch now once in a while you might come across someone like our popular super star developer John Smith who thinks D Jango is a piece of crap because it's old and Bloated with so many features he used it hated it and then rewrote his entire project with a new shiny framework that is faster well saying a framework is better than Dango because it's faster it's kind of like saying a Ferrari is better than a truck because it's faster what if you want to move something you're not going to use your Ferrari for that right so a white software engineer doesn't pick up a framework merily based on it performance there's so many other things you need to take into account like the maturity of the framework how stable it is from one version to another its learning curve the size of the community and so on D Jango has been around for a long time and it has a huge community so there are tons of Jango packages built by the community that you can reuse in your applications also if you get stuck there's always someone out there to help you if you want hire people there are tons of people to choose from so these are the benefits of having a huge Community around the framework now regarding Jango features yes Jango comes with a lot of features but you don't have to use or even learn all of them because all these features are optional so you can use the features that make sense for your own application so in my opinion debates about the best framework in the world are useless we all like different things and just because someone doesn't like Django it doesn't mean it's bad a lot of companies are using D Jango and are looking for Jango developers here in the US the average salary of ajango developer is just over 100 $177,000 a year so if you like Python and want to get into web development learning Jango is a good investment for your [Music] future so you learned that D Jango is a framework for building web applications with python now let's talk about some of the fundamental concepts you need to understand to build web applications let's say we're going to build an online store and publish it at mh.com now this website is going to have two parts or two applications a front end and a back end the front end is the part that is loaded inside a web browser on a client machine it's the part that the user sees and interacts with the back end is the part that runs on a web server and is responsible for data processing validating business rules and so on now let's imagine that Alice wants to visit our website so she points her browser to mhbay.com this address is also called a URL which is short for uniform resource locator it's basically a way to locate a resource on our internet a resource can be a web page an image a video a PDF and so on so Alice types mosh by.com in her browser and presses enter at this moment a browser sends a request to the web server that hosts our website and says hey Alice wants to see the homepage so the web server should take this request process it and return a response back to the client this data exchange is defined by a protocol called HTTP which is short for hypertext transfer protocol it defines how clients and servers can communicate so this is the big picture as Alice navigates our website for each page her browser sends an HTTP request to the server and receives an HTTP response now as part of building the backend for this website we need to decide how we're going to respond to clients one option is to generate the requested page on the server and return it to the client we use HTML for that HTML is short for hypertext markup language it's a simple language for representing web pages on their content every web page you have seen on our internet is built using HTML so one option is to generate the page on the server and return an HTML document to the client the other option is to return only the data needed on the requested page and have the client generate the page so instead of putting a complete page or a complete HTML document in an HTTP response we only return the data like the list of products now what is the difference well if we push this responsibility to the client we can free up the server so it can serve more clients our application will be more scalable that's why over the past few years this approach has become more trendy and is now considered the industry best practice these days we have tools like react angular and view for generating web pages on the client these are all client side tools that are used by frontend developers in contrast we have server side tools for building back ends D Jango Falls in this category so you should not compare Django with let's say react you may compare Jango with other server site Frameworks like as.net core which is used by C developers Express used by JavaScript developers and so on so if you push the responsibility of generating web pages to the client the server essentially becomes a gateway to the data on the server we can provide endpoints that the client can talk to to get or save various pieces of data for example we can provide one endpoint to get the list of products and another endpoint to get the list of orders someone has placed now all these endpoints together represent the interface that clients use to talk to the server in technical terms we say the server provides an API or an application programming interface to clients this API is essentially like the buttons on a remote control all these buttons together represent the interface or the API we use to interact with the TV Okay so so in this course our Focus will be on using D Jango to build an API for our online store client applications can use this API to get or save the data how these clients are built is irrelevant here we can use react angular or even plain JavaScript that falls under frontend development which has nothing to do with Jango once we build this API if you know frontend development you can always build a client app that talks to this API all right now that you understand the big picture we ready to set up our development environment and that's what we will do [Music] next all right let's make sure you have the right setup before we start coding the first thing I want you to do is upgrade your python to the latest version so head over to python.org download and download the latest version of python for your operating system once you do that then open up your terminal window and run python D- version to make sure you have upgraded your python correctly now here we see Python 2.7 because on Mac we have two different versions of python running side by side we have the old python 2 which is now deprecated and we also have Python 3 so if you're using a Mac you have to run python 3-- version but if you're on Windows or Linux you have to run python D- version okay so here I'm using python 3.9.5 great next we're going to use pip or pip 3 if you're on Mac to install pip NV I talked about pipn in my python course it's basically a dependency management tool for installing our application dependencies in Virtual environments this way our application dependencies will not clash with other applications dependencies okay so let's go ahead and install this now in this course just like my other courses I'm going to use Visual Studio code or vs code as my editor it's just my personal Al preference if you have a preference for a different tool like pie charm that's totally fine having said that I highly encourage you to use vs code because throughout the course I'm going to show you a lot of shortcuts and time-saving tips that will not apply to your editor in case you don't have vs code you can get it from code. visual studio.com now once you run it I want you to go to the extensions panel over here and search for python make sure to install this extension because with this we get features such as intelligence debugging code navigation and so [Music] on all right now that we have installed all the necessary tools let's create our first triango project so here in the terminal window I'm going to go to my desktop you can go anywhere on your machine it doesn't really matter now we're going to create a directory called store Front that is the n project next we go inside this directory and run pipm install Jango so we're going to install Jango using pipm inside a virtual environment now let's go ahead all right now take a look so over here you can see that pipm has created a virtual environment for this project down below you can see the path to this virtual environment if you're on Windows you're going to see something like C drive backs slash whatever now if you're on on Mac and using zshell which is this fancy colorful terminal window we can hold down the command key and click on this path to go into it otherwise you can just copy this and use the CD command to go inside this directory now take a look so here's our virtual environment in this environment we have this bin folder that contains a bunch of binaries for example we have python pip Jango admin and so on so back to the terminal pipm created a virtual environment and installed D Jango inside that environment but in addition to this pipm also created two files in this directory pip file and pip file. loock so I'm going to open this directory using visual studio code by running code period if this doesn't work on your machine just drag and drop this folder onto vs code all right so here's our pip file this is like package.json for JavaScript projects so in this file we can see that our project needs this particular version of python and under packages you can see the packages that our application is dependent upon so here we have D Jango equals asterisk that means any version or the latest version of Jango if we installed a particular version of Jango we would see that version here now back to the terminal window we need to activate this virtual environment so we'll use the python interpreter inside this virtual environment not the one that is installed globally on this machine to do that we're going to run pipm shell okay next we're going to use D Jango admin to start a new project D Jango admin is a utility that comes with Django so if you run it we can see all these commands that we can use to work with Django project as we go through the course you'll become familiar with this commands in this lesson we're going to use Jango admin start project and we're going to call that project store front now back to vs code Jango admin created this directory for our project and inside this directory it created another directory that is the core of our application in this directory we have this files which I'm going to talk about in a second but before I do so let's get rid of this redundancy because we have three storefront directories the top one is the one that we created earlier in the terminal and then we have these two other d director is one for the project one for the core of our application so I'm going to delete this project directory now we're back in the previous step so we don't have a Jango project at this stage now back in the terminal let's bring up the last command but type a period at the end this tells D Jango to use the current directory as the project directory so D Jango is not going to create an additional directory for our project okay now take a look so we have this directory which is the core of our application in this directory we have this init file which defines this directory as a package we have the settings module where we Define our application settings we have the URLs module where we Define the URLs of our application and these two other modules that are used for deployment for now don't worry about them now next to this directory we have this file manage.py this is a wrapper around D Jango admin so going forward instead of D Jango admin we're going to use manage.py the reason for this is that manage.py takes the settings of this project into account let me show you what I mean so now that we have a project we want to run a web server so another command that jangle admin provides is run server however if you run jangle admin run server we get an error saying requested setting debot but sending are not configured because at this point Jango admin doesn't know about the settings of our project so now that we have a project instead of Jango admin we're going to run python manage.py now look we see the same commands that Jango admin provides so here we can say python manage.py run server now optionally we can supply a port number if we don't Supply this by default this will use port 8000 but you might have another application running on Port 8,000 in that case you might want to explicitly set the port number so let's go ahead with that now we don't get an error because manage the P knows about the settings of our project now here we get this warning saying you have 18 unapplied migrations don't worry about this yet we'll talk about this soon so if you look over here you can see that D Jango has started a development server at this address so we can copy this and paste it into browser or if you're on a Mac and using zshell you can hold down the command key and click this all right beautiful our first Django project is running successfully so let's move on to the next [Music] lesson so far I've been using a separate terminal window but vs code also has an integrated terminal window that is easier to use but to use that we have to properly configure it to use the python interpreter inside our virtual environment let me show you how to do this so back to our terminal window first we're going to stop the web server by pressing controll and C okay now back in vs code on the top Under The View menu look we have this command pallet the shortcut on Mac is shift command and P now here we're going to search for python interpreter So currently vs code is using this python interpreter that is installed globally on this machine we don't want to use this we want to use the one inside our virtual environment but how can we find the path to our virtual environment very easy so back to the terminal let's run pip andv d-van all right here's the path so let's copy this good now back to vs code we're going to select enter interpreter path then we're going to paste the path and append slash bin slash python at the end if you're on Windows instead of a forward slash you have to use a back slash okay good now in this project we have an extra directory vs code we have a settings file and here we have the pass to python interpretor good with this we can go to the view menu now look we have this integrated terminal the shortcut on Mac is control and back take now vs code automatically activates the virtual environment for this project so here we can run python manage.py run server good so going forward I'm going to use the integrated terminal window here it's easier we can always hide it by pressing control and back take or bring it back we can maximize it move it around and so on Now One Quick tip sometimes when running this command you might get a syntax error saying invalid syntax this happens every now and then when vs code fails to activate the virtual environment for this project to solve this problem all you have to do is open a new terminal window and look vs code executed this command to activate the virtual environment for this project now we can run python manage.py run server great [Music] all right let's talk about apps so every Jango project is essentially a collection of various apps each providing certain functionality just like the apps on your mobile phone each app provides a certain functionality right Jango projects are exactly the same so in this project let's open up the storefront directory and then look at our settings module now we can collapse this panel by pressing command and B on Mac or control and B on Windows okay now in this module we have a bunch of different settings in this lesson we're going to look at the install apps so every Jango project by default includes these apps the first app is the admin app which gives us an admin interface for managing our data then we have the off app which is used for authenticating users then we have content types app which we'll talk about later in the course next we have the sessions app which is kind of Legacy we don't use sessions anymore a session is a temporary memory on the server for managing users data these days when building apis with Django we don't use the sessions app so we can come here and delete this app then we have the messages app which is used for displaying onetime notifications to the user and finally we have the static files app for serving static files like images CSS files and so on so each app provides a certain piece of functionality okay now we can also create our own apps here so let's save this file now let's open up the terminal window by pressing control and back tick so here's our terminal window where we have our development server running we're going to open a new terminal window okay now let's expand this to clear the window we simply press contrl and L now we're going to run python manage.py start app and we're going to call this app playground okay so let's close this window and open up the Explorer panel all right look here's our new app which is represented using a folder with a special structure so every Jango app has the exact same structure here we have the migrations folder for generating database tables we'll talk about that later in the course we have a complete section about this topic we have the admin module where we Define how the admin interface for this app is going to look like next we have the apps module where we configure this app app so the name is misleading I don't know why Jango developers decided to call this module apps it would be better if it was called config that's just my two sets next we have the models module where we Define the model classes for this app we use model classes to pull out data from the database and present to the user next we have the tests module where we write our unit tests and finally we have the views module which we'll talk about in the next lesson again the name is misleading this is not the view that you think if you come from a frontend develop background so what we have here is essentially a request Handler it's not a view it doesn't have a template or HTML again we'll talk about that in the next lesson so we created a new app now we need to register this app in the settings module so every time you create a new app you need to register it here in the list of installed apps we simply add the name of the app which is called playground save the changes done in the next lesson we're going to talk about views [Music] all right let's talk about views so earlier you learned that HTTP is a request response protocol so every data exchange involves a request and a response this is where we use views in Django so here in the playground folder let's open up the views module this is where we Define our views or view functions a view function is a function that takes a request and returns a respon response so more accurately it's a request Handler in some Frameworks it's called an action in Jango it's called a view but I don't agree with this name because from an architectural point of view a view is often associated with something that the user sees that part in Jango is called a template and we'll talk about that later in this section now that aside let's create our first view function so we're going to create a function we can call it anything we want I'm going to call it say hello now this function should take a request object and return a response so first on the top from Jango that HTTP package we're going to import the HTTP response class now in this function we can do anything we want in a real word scenario we can pull data from a database we can transform data we can send emails and so on for now let's just return a simple response so we're going to return an instance of the HTTP response class and in this object in this response you want to add a simple string so let's say hello world okay so this is our first view or first view function now we need to map this View to a URL so when we get a request at that URL this function will be called and that's what we're going to do [Music] next all right here's our Django project now let's say whenever we send send a request to playground /hello our view function should be called and return hello world to the user let's see how we can do that so back to our project here in the playground folder we're going to add a new file called urls.py we could call it anything the name doesn't matter but by convention we call it URLs now in this module we're going to map our URLs to our view functions so on the top we're going to import the pass function from Django the URLs so from Jango URLs we're going to import the path function now don't worry about memorizing any of these as you practice all of this will become second nature also from the current folder we should import the views module so we can reference our view function now we should Define a special variable called URL patterns all in lowercase make sure to spell it properly because this is what jangle looks for we should set this to an array of URL pattern object we use the path function to create a URL pattern object so if we call this function look at the signature of this function this function has a bunch of parameters the first one is Route which is a string the notation you see here is called type annotation which is kind of a new feature in Python with type annotation we can see the type of parameters and the return value of a function so the first parameter is Route which is a string the second parameter is view which is a function that returns HTTP response object object now look over here this notation represents the return type of this function so the pth function returns a URL pattern object so I'm going to call this function and give it two arguments a route or a URL which is playground SL hello and a view function so from the views module we're going to get say hello note that I'm not calling this function so here we don't have a pair of parenthesis we're just passing a reference to this function okay so what we have here is called a URL conf module that basically means URL configuration so every app can have its own URL configuration but now we need to import this URL configuration into the main URL configuration for this project where is it you saw it earlier so back to the Explorer panel here in the storefront folder we have another URLs module up here we have a bunch of comments about how we should use this module now look over here if you want to include another URL conf there are two things we need to do first we need to import the include function from jangle URLs so over here we have from Jango URLs we're going to import the include function next we need to add a URL to URL patterns so in this module we also have a URL patterns object which is an array of URL patterns object so here we're going to call Path give it a route and then we use the include function to reference the URL configuration module in this app so we're going to call Path and say any URLs that start with playground followed by forward slash should be routed to our playground app so this is where we use the include function now the include function requires a parameter that is a string here we're going to reference playground. URLs so if we send a request to playground /hello D Jango knows that all requests that start with playground should be handled by this app so it's going to chop off the first part of this URL and pass the rest to the URL configuration module in the playground app so back to this URLs module we no longer need to add playground here because we added it once in in the main URL configuration module so we simply add hello followed by a forward slash I forgot to add that we always end our routes with a forward slash so let's save the changes now whenever we change our code D Jango web server automatically restores itself so let's open up the terminal window make sure we don't have any arrows good so back to the browser let's send a request to this endpoint great we see Hello World on the screen so so this is how we can map URLs to view functions next we're going to talk about [Music] templates so I told you that views in Django are not really views they're more like request handlers or actions what we often call a view in other Frameworks is called a template in Django so let's see how we can use a template to return HTML content to the client so here in the playground app we're going to add a new folder called templates and in this folder we're going to add a new file called hello.html and of course we could call it anything here we can write some HTML markup for example we can type H1 and press tab to add an H1 heading and say hello world now don't worry if you don't know HTML we're not going to use it in this course I just want to show you how Jango templates work so let's save the changes now back to our view function instead of returning a plain HTTP response we're going to use the render function to render a template and return HTML markup to the client so let's remove this line and call the render function now look at the return type of this function it returns an HTTP response object so here we're going to return the response now let's remove the brackets and type them again so we can see the function signature the first parameter here is a request object and the type of this is HTTP request so we're going to pass this request object right here now the second parameter that's the name of our template which is a string so here I'm going to say hello. HTML the other parameters are optional so don't worry about them at this point now save the changes let's make sure our project works up to this point so back in the browser refresh beautiful now we see HTML content we can verify it by right clicking on this page and looking at the page source so look we returning HTML content great now let's make this a bit more interesting so back to our template instead of hello world we can dynamically render some value so back to review function let's type a comma to see the next parameter that is a context object and the type of of this is a mapping of string to any that means we can pass any mapping object that Maps a string value to any other type of object so here we can pass a dictionary so let's pass a dictionary the type of the key should be a string so we can call that name and we're going to set that to a value like let's say MH now back to our template instead of hello world we can render the name that we passed here so we type two pairs of braces and in between we type the name of the key save refresh beautiful now in this template we can also write some logic so we can type an if statement so we type braces and in between them we add two percentage signs in between them we can write an if statement so we can say if name is set we can render it here otherwise we can render hello world and of course we need an end if Clause as well so and if now this syntax is kind of ugly but the good thing about D Jango is that it's modular so you can easily replace D jango's default template Engine with your preferred template engine but once again we don't really use templates in D Jango projects that often these days there are special cases for them but for the most part we use Django to build apis that return data not HTML content so I just included this lesson so you know what templates are and how they work we're not going to spend any more time on templates for now unless we encounter a situation where we really need [Music] them let's talk about debugging Jango applications in vs code this is particularly useful if our application doesn't produce the right result and we want to run it line by line and see where exactly something has gone wrong so click on this icon to open the run and debug panel now the first time you see this message saying we should create a launch. Json file basically we need to create a launch profile so vs code knows how to run or debug this application so let's click on this now in this list select Jango all right here's our launch. Json file what you see here is kind of like a dictionary in Python you have a bunch of key value pairs these key value pairs Define a launch profile so vs code knows that to run this application it should use the current python interpreter to run manage.py which exists in our workspace folder and then as an argument it should Pass Run server to it here we can add an additional argument to specify the port so it doesn't clash with Port 88000 which is currently in use okay save the changes we're done with this file so let's close it now if you're curious let me show you where this file exists is added to our project up here inside the vs code folder so here's our launch profile now that we have a launch profile if we go to the run and debug panel we see something else so here we can start our application for debugging but before doing so I want to write some dummy code here in our view function so let's set X to one one and Y to two now I'm going to click on this line to insert a break point when we add a breako vs code will execute every line of code until it hits our breakpoint from that point onward we can execute our code line by line so let's add a breakpoint and then start the application for debugging all right let me collapse this window good so in this new terminal window we have a development server listening on Port 9000 so let's hold down the command key on Mac or control on Windows and click on this link all right here's what we get the homepage of our project is gone because we have registered a custom route that is playground SL hello so we see the homepage only the first time we run our Jango project so let's go to playground SL hello all right our breakpoint is activated and we are on this line now on the left side in the variable section you can see the local variables So currently we have the request object that is the request object that we receive in this function so we can expand it and inspect its various attributes we don't want to do that for now so let's close this we want to execute our code line by line so here we have a bunch of functions the first one is step over and the shortcut for this is F10 with this we can step step over the current line so if we press F10 this line gets executed and now we on the second line now look over here in the list of local variables we have X and its value is one this is very useful when debugging applications so if something is not calculated properly we can inspect it here now most of the time you can see your local variables here but if not you can always add them in the watch window so before recording this video I was practicing that's you see X here let me select this and delete it so in your watch section you're not going to have any variables to add one we simply click on this and then type the name of our variable okay so this is how we can step over various lines so we can press F10 again and again so this function is executed and now back in the browser we see the final result now let's do something more interesting so back to our code let's close the terminal window so we have more space I'm going to define a function here called calculate and here we're going to set X to one y to two and return X just some dummy code now over here we're going to call the calculate function okay now save the changes back in the browser let's refresh so our view function gets C now we are right here now this time instead of stepping over this line we want to step step into it because if you step over this line we're not going to see what happened in the calculate function we see the final result so we see X is set to one and we can verify that over here as well but sometimes we need to step into a function to see what is happening there maybe there is a bug inside the calculate function so let's restart the debugger okay I'm going to close this back in the browser let's refresh this page okay we're back to this line now this time we going to step into this function so look over here this is the icon for stepping into a function and as you can see the shortcut is f11 so if you press f11 we go inside the calculate function now we can execute each line using F10 or step over and see where something has gone wrong now let's imagine this calculate function is a large function with a lot of code at some point we want to step out of it without having to execute every line of code in this function there's a shortcut for this so look over here that is step out the shortcut is shift and f11 so if you press shift and f11 we get back to the previous function so this is how we can debug Jango applications in vs code now once we're done it's always a good practice to remove these break points otherwise they get in the way so as you debug your applications you place various break points in different parts of your code and you will hit them all the time so always remove your breakpoints once you're done with them so we're done with this debugging session now we can disconnect by pressing shift and F5 or clicking on this icon all right now one last step before we finish this lesson on the top Under The Run menu look we have a command called run without debugging the shortcut on Mac is control and F5 so if we use this shortcut we can start our application without having to run python manage.py run server let me show you what I mean so first let's bring up our terminal window here's the second terminal window that we use for debugging I'm going to delete this here's the first terminal window where we started our application by running python manage.py run server so let's press contrl and C to stop the server good I'm also going to delete this terminal window let's imagine we just open this project in vs code day one now to run this application without debugging we can press controll and F5 now our application has started on Port 9000 so we can go to this address and then hit playground /hello so this is how we can run our application without debugging just remember that if you use this command your breakpoints are not going to get hit so if you want to debug your applications you should start it in the debug [Music] mode there is another way to debug Jango applications using a powerful tool called D Jango debug toolbar so if you go to Google and search for Django debug toolbar you're going to find this page over here you're going to find the installation instructions so I highly encourage you to follow along with me and repeat the same steps so we install this toolbar together so first we have to use pip or pipf to install D Jango debug toolbar so back to vs code I'm going to open up a new terminal window and as you can see vs code used the source command to activate our virtual environment so now let's run pipn install django-debug-toolbar good now back to the documentation the next step is to add debug toolbar in the list of installed apps in our settings module so back to vs code we can press command and P on Mac or control andp on Windows to bring up the search box now we search for our settings module good now in the list of install apps at the end we're going to add debug underline toolbar good now the next step the next step is to add a new URL pattern in our main URL conf module so I'm going to copy this line and back to vs code let's bring up the URLs module we're going to pick the one in the storefront folder okay now we add a comma here and paste that line now here we have a compilation error because debug toolbar is a module that we have to import on the top so if you look at the documentation you can see that over here import debug toolbar so copy this and paste it right here good now back to the documentation the next step is to add a middleware we use middleware to hook into D jango's request response processing so in our settings module we have a setting for middleware we're going to add this line in that file so copy this back to the settings module here we have the install apps right after that you can see the middleware setting so we're going to add that on the top now the final step is to add our IP address in the internal IP setting so for local development we should use 1271 so I'm going to copy this entire setting because by default this doesn't exist in a new Jango project so copy this and you're going to paste it anywhere in this settings file it doesn't really matter okay save so we have completed all the steps now back in the browser if you go to this URL playground /hello we don't see the toolbar it should appear here because the toolbar only appears when we return a proper HTML document if you right click here and look at the page Source you can see that we are not returning a proper HTML document so we don't have the HTML head and body elements so let's open up hello.html now on the top we type HTML press tab now in inside these elements we're going to add a body and then inside the body we're going to add the code that we had earlier so let's move that right here good now we have a proper HTML document of course the head element is missing but it doesn't really matter now back to the browser refresh and here's D Jango debug toar here we have different panels like history we're seeing the URLs we have hit so far we have versions to see the version of Django Python and debug to we're running we have processing time we have our settings we have request headers and so on now my personal favorite panel is the SQL or SQL panel here we can see the queries that are sent to the database so later in the course where we talk about quering the database using D jango's object relational mapper we're going to come back to this panel and see what queries Jango will generate and send to the database so that's it for this lesson we're done with this section in the next section we're going to talk about about building a data model so I will see you in the next section welcome back to another section of the ultimate Django course in this section we're going to talk about models which are used to store and retrieve data we'll start off by quick introduction to data modeling to make sure you know the essential Concepts then we're going to design the data model for an e-commerce application next we're going to talk about organizing our models in apps to improve reusability this is one of the areas that is often misunderstood so I'm going to demystify it once for all and then we'll spend the rest of this section in coding model classes we'll use these classes to store and retrieve data throughout the course so let's jump in and get [Music] started the first step in every Jango project is figuring out the pieces of data we want to store so what entities or concepts do we have in an e-commerce application well for starters we need the concept of a product with attributes like title description price and imager now in a real scenario our product entity might have other attributes it really depends on the requirements of our application for now we just want to keep things simple okay now quite often our products are divided in different categories like shoes beauty products fruits and so on so we need another entity called collection or category with an attribute called title now we need to add a relationship or an association between these entities so we can start from one end and navigate to the other end for example we can get a collection and find all the products in that collection okay now let's assume that in our application a product can belong to one and only one collection and a collection can have multiple products so an asterisk represents many we could also use an N here okay now we have a one to many relationship between collection and product so relationships can be one to one one to many and many to many back to our diagram now over here we can add a label called products and that means when we code these entities or these classes in the collection class we're going to have an attribute called products for now I just want to hide this for Simplicity okay now sometimes we can have multiple relationships or multiple associations between two entities so let's imagine that a collection can optionally have a featured product that is the product whose picture we want to show to the user so we can add a second relationship between these entities now look at this number here 0 to one means a collection can have zero to one product and we're going to call that attribute featured product so once again that means in the collection class we're going to have an attribute called featured product okay now you might ask what about the ID attribute shouldn't every entity have an ID attribute yes but jangu is going to automatically create that for us that's why I haven't shown it here now A little exercise for you grab a piece of paper and identify the other essential entities we need in an e-commerce application just the bare minimum don't go ahead and create a complex diagram like this I don't want this there are only five entities that I want you to identify so spend a couple minutes and identify these entities along with their attributes and relationships then come back see my solution [Music] all right so this is what we ended up with in the previous lesson we have a one too many relationship between Collections and products now don't take this as a hard and fast rule maybe in your application a product can belong to many collections then you're going to have a many to many relationship between products and collections okay so back to our model I'm going to remove the collection from here so we have some free space on the screen now what else do we need here well in every e-commerce application we have the concept of a shopping cart right so we're going to have an editing or a model or a class called cart with an attribute called created at let's assume that we need to know when each card is created so every now and then we can do a clean up and remove cards that are 30 days old I just made this up but in a real scenario you should always design your models based on the requirements of your project they make up your own rules okay now we need a relationship or an ass association between products and carts because a cart can have multiple products and a product might be in different carts so here we have a many to many relationship between products and carts now sometimes the relationship between two entities can have attributes for example if a product is in a shopping cart we need to know how many instances of that product we have in the shopping cart so this relationship itself should have an attribute called quantity so we're going to add a new entity here called cart item now look at the notation I've used to represent this concept I've connected cart item to the relationship using a dashed line that means cart item represents the relationship between these two entities product and cart this is what we call an association class so cart item is an association class okay now there's another way to show this instead of using an association class we can add a relationship between cart and cart item because a cart might contain multiple items and an item belongs to one and only one cart and similarly we can add a relationship between product and cart item because each card item represents a single product and a product might be referenced by many card items so here we have two one too many relationships between these entities now compare this with the association class notation so we can either add a many to many relationship with an association class or two one to many relationships it's a matter of personal preference okay so we're done with the shopping cart but you might ask what about the user or the customer that owns this cart where is that in the diagram well I haven't connected cart with an entity like Customer because we don't want to force people to register and log in before they can add products to their shopping cart okay so there's no relationship between carts and customers so carts are essentially Anonymous anyone can have a cart whether they're Anonymous users or registered customers Okay so so we're done with the cart now let's talk about customers so our customer entity can have attributes like name email username password and so on now for Simplicity I'm only showing name and email here now a customer can have many orders and each order belongs to one and only one customer so we need a one to many relationship between customers and orders now once again the order entity might have multiple attributes for now we just want to know when this order was placed okay now an order can contain multiple products and a product can be in multiple orders so we have a many to many relationship between orders and products and similar to the shopping cart example this relationship itself needs attributes so here we need another entity called order item with an attribute called quantity that's our association class alternatively we could add a relationship between order and order item because each order may contain multiple items and each order item belongs to one and only one order similarly an order item references one and only one product while a given product might be referenced by multiple order items so two one to many relationships so these are the entities that I wanted you to identify but to make this project more interesting I decided to throw in one more enti tag here we have a many to many relationship between products and tags because a product can have many tags and a tag might be referenced by different products we'll come back to this anti in the next [Music] lesson so I told you that a Django project contains one or more apps and just like the apps on your phone each app in a Django project provides a specific piece of functionality so that means each app is going to have its own data model so in this lesson we're going to look at a few different ways to organize our entities in different apps one way is to have a single app called the store and drop all of our entities here now we can bundle and distribute this app for a pip and this way anyone can install this app in their project and get all these models and the functionality around them so next time we're working on an e-commerce project we don't have to rewrite the same functionality over and over we simply install this app in our project and write extra code for customization great but there's a problem here as this application grows and gets more complex it gets bloated with too many things like too many models too many views and other stuff this is what we call a monolith like a large heavy piece of stone so at some point our application might become hard to understand hard to maintain and hard to reuse it becomes like one of those remote controls with too many buttons when designing these apps we want to follow the unix's philosophy so each app should do one thing and do it well so here's another solution we can break down this project into four small apps the products app which represents a product catalog so here we're going to have three entities product collection and tag then we're going to have the customers app for managing customers we're going to have the shopping cart app for adding the shopping cart functionality and the orders app for adding the ordering functionality not bad right well this is actually a poor way of breaking down this project for a number of reasons look at the coupling or dependency between these apps the orders app is dependent on the shopping cart app which is dependent on the products app so next time we're working on an e-commerce project we'll have to install all these apps one by one first we have to install the products app followed by the shopping cart app the customers app and the orders app ideally each app should be self-contained so we can easily drop it into a new project the other problem is that if we publish a new version of the products app that might cause a breaking change in the shopping card and subsequently orders apps so anyone using these apps have to upgrade all these apps together together again more and more work also it doesn't really make sense to have the shopping cart functionality without having a product catalog right why would we ever want to add the shopping cart functionality to a project without a product catalog so shopping cart functionality and product catalog always go together by the same token why would we ever want to add the shopping cart functionality to a project without the ability to place an order just to allow people to add something to their shopping cart then what again it doesn't really make sense so these concepts are highly related and should be bundled together if we separate them we increase coupling between apps and we end up with the problems I just talked about so doesn't mean we have to go back to the monolithic design no there is a middle ground here look at the tag entity the ability to tag products is optional we don't necessarily need it in every e-commerce application in fact we might need it in other types of applications like a blog or video platform and so on so so tagging is not specific to products or an e-commerce application it's a separate piece of functionality so I'm going to move the tag entity to a separate app called Tags and here we're going to have another entity called tagged item which represents an item that is tagged it can be a product an article a video and so on it's an abstract concept now with this separation each app is self-contained and provides a specific piece of functionality so we can use either or both of them them in a new project depending on what we're going to build plus we have zero coupling between these apps so we can independently change and deploy them without affecting other apps this is the proper way to break down this project into multiple apps so here's the takeaway if our app boundary is so large we'll end up with a monolith that gets bloated and becomes hard to reuse on the other hand if our app boundaries are so small and fine grained we'll end up with a lot of coupling between them a good design is one with minimal coupling and high cohesion meaning High Focus so each app is focused on a specific piece of functionality and includes everything needed to fulfill that piece of functionality okay so back to vs code we're going to create two new apps so we run python manage.py start app the first app is store and the second one is tags okay now as I told you before every time we create a new app we should add it in the list of installed apps so let's close this window and go to our settings module here's the list of install apps I'm going to add those apps right here so store and tags all right we're done with this step starting from the next lesson we're going to create the model classes for these [Music] apps all right in this lesson we're going to create our first model class so let's go to the store app and open the models module now on the top we have an import statement from D Jango DB which is a package we importing the models module in this module we have a bunch of useful classes that you're going to learn about as we go through this section so over here we're going to create our first model class so we Define a new class called Product and have it inherit the model class in Jango that class is defined in the models module so models. model now here we need to define the fields of this class What fields do we need here well every product needs a title so we set title to then we go to the models module now here we need to choose a fi type so let's take a break here now here on Google let's search for Jango fi types okay here's the model filled reference we're going to get back to this page over and over so on the right side over here you can see all the built-in field types for example we have Boolean field for storing Boolean values we have charfield for storing a sequence of characters or more accurately short or mediumsized strings we have date field datetime field decimal field and so on so as we go through this section you're going to become familiar with this field types so back to our code we want the title to be an instance of the chart field class now all these fi types have a bunch of options so back to our documentation on the top look over here field options these options are common to all field types for example using null we can determine if a field is nullable or not we also have DB index with this we can create a database index on this field we can also set the default value and so on so all these options are available to all fi types now some field types depending on their type have extra options so let's scroll down and find the CH field okay now read over here charfield has two extra arguments we have max length which is required and DB colation which is optional so using max length we can specify the maximum number of characters we can store in this field so here we're going to set max length to let's say 255 characters so this is our first buil now in the next section where we talk about migrations you will see that we can generate our database tables based on the definition of this model so then we're going to have a table called Product and in that table we're going to have a column called title and the type of that column is going to be varar of 255 for now let's not worry about this so that's our first fail what else do we need here we need a description that description can be a long text so instead of a chart field we're going to use a a text field okay the text field doesn't have any required arguments so here we don't have to set the max length Okay what else next we need to add the price field for this I'm going to use decimal field always use decimal field for monetary values we also have float field but floats have rounding issues so for storing monitary values we should always use decimal field now decimal field if you look at the documentation has two required arguments so as an example let's say the maximum price with support in this system is going to be 999999 I'm just making this up so how many digits do we have here six digits how many digits do we have after the decimal point two digits we need to specify these values as arguments here so max digits equals 6 and decimal places equals 2 these two arguments are always required for decimal Fields okay now let's remove the comment another field is inventory we can set this to an integer field we also have positive integer we have small integer big integer and so on and the last field I'm going to Define here is last update let's say every time we update this product you want to store the current daytime here so we're going to set this to models. daytime field and optionally we can set auto underline now to true that means every time we update a product object Jango automatically stores the current datetime in this field we also have Auto Now underline ad with this only the first time we create a product object D Jango stores the current daytime here okay so we don't want this we're done with the definition of the product class now A little exercise for you I want you to create the customer class with this bus first name last name email which should be unique phone and birth date which should be nullable so spend a couple minutes on this and then come back to my solution all right here's my implementation of the customer class so first and last name fields these are both CH Fields with a maximum length of 255 characters next we have email which is an instance of the email field and here I've said unique to true so we don't end up with duplicate emails next we have phone which is also a CH field with a max length of 255 characters and finally we have birth date which is an instance of date field and here I've said null to true so this field is nullable now for birth date I've used a date field not a daytime field because we don't care about the time someone was born okay now you might be curious why we don't have an ID field in any of these classes because as I said earlier Jango creates it for us automatically so every an or every model class is going to have an ID field that is going to be a primary key but what if we don't want to have an ID field what if in this product class we need a field called SKU and this is going to be our primary key so we can set this to let's say a CH field with a max length of let's say 10 characters now here we can set primary key to True with this D Jango is not going to create an ID field and make it the primary key so SKU is going to be primary key okay so since we don't need this field for now I'm going to remove it good so this is how we create model classes next we're going to talk about Choice [Music] Fields sometimes we need to limit the list of values that can be stored in a field for example here in our customer class let's define a new field called membership and set it to models the chartfield with a max length of one now let's imagine in this field we can have one of these three values we can have B that is short for bronze or s for silver or G for gold how can we implement this well let's go back to our documentation earlier I told you that all fi types share these options one of these options is choices and we use this to specify the possible values for a field so what we need to pass here is a sequence consisting of a durables of exactly two items now I know this is a mouthful let's look at a real example so over here we have an array of top holes where each top hole includes two values the first value is the actual value we're storing in the database and the second value is a human readable name so back to our customer class here I'm going to define a new attribute called membership underline choices I'm using uppercase letters here to indicate that this is a fixed list of values we shouldn't mess with it okay so we're going to set this to an array in this array we're going to add three topples here's the first topple for the value I'm going to use B that is for bronze and for human readable name I'm going to use bronze now let's duplicate this a couple times and change this to S and silver and finally G and gold now that we have this array we can go to our membership field and set choices to membership choices okay like this now we can also set the default value so we can set default to let's say B that is for bronze now this works but there is a tiny problem in our implementation if tomorrow we decide to change B to something else then there are two places we have to modify here's one place and here's the other place so the best practice is to Define these values separately so here we can Define another attribute called membership underline bronze we set it to B so this is where we store the actual value and now we reference that in multiple places so here we use membership underl bronze and also we're sending the default value we use membership underline bronze okay now for consistency we should also Define separate attributes for S and G I'm going to pause the video and do this on my own all right here's the end result we have three attributes membership bronze silver and gold and we have used them here now you might be wondering why we need the human readable name well later when we talk about the admin interface you will see that this human readable name will be used in a drop- down list to populate this field we'll talk about that later in the course now A little exercise for you I want you to create the order class with two Fields placed at and payment status place at should be a daytime field and it should be autop populated at the time we create an order object payment status should be a chart fi with these values so P for pending C for complete and F for fail spell a couple minutes on this then come back see my solution all right here's my implementation of the order class so first we have our constants which are payment status pending complete failed and choices and then we have our fields which are place at which is a daytime field and here I've said Auto now add to true so the first time we create an order D Jango automatically populates this field next we have payment status which is a CH field with a max length of one I've set choices to our area of choices and the default value to payment status [Music] pending so you have learned how to create model classes now let's see how we can Implement a onetoone relationship between two models so here in the models module let's define a new class called address and assume that every customer should have one and only one address and each address should belong to one and only one customer so here we have a onetoone relationship between customers and addresses right now let's add a couple of fields here like Street which is going to a CH field with a max length of 255 characters and city with the same definition now as you probably know a database relationship has two ends a parent and a child the parent should exist before we can store the child right I've got a question for you in this relationship which class or which entity is the parent it's the customer because we say the customer has an address so the customer should exist before we can can create an address so here in the child class or the child entity we need to specify the parent so we add a new field called customer and set it to models. one:1 field now this field has a couple of required arguments the first one is the type of the parent model so here we type customer now the second argument is undelete and with this we specify the delete Behavior what should happen when we delete a customer so if we said undelete to models. Cascade when we delete a customer the associated address will also be deleted this is the Cascade Behavior alternatively if this field accepts null values we can use set null so when we delete the customer or the parent record the child record in this case the address is not going to get deleted it's going to stay in the database and the customer field or the customer column is going to get set to null in this case this field doesn't accept null value so it doesn't make sense to use set null alternatively we can use set default so this field will be set to its default value and one other option we have is protect and with this we can prevent the deletion so if there is a child associated with this parent we cannot delete that parent first we have to delete the child now which value we use really depends on the requirements there is no one siiz fits all in this case I believe we should use Cascade because if we delete a customer the associated address should also be deleted now there is one more argument we need to set here and that is primary key equals true if we don't set this Jango will create another field here called ID so every address is going to have an ID and that means we're going to end up with a one to many relationship between customers and addresses because we can have many addresses with the same customer but if we make this field the primary key we can only have one address for each customer because primary keys don't allow duplicate values right so this is how we can Implement a onetoone relationship between two models now you might be wondering if we should Define the reverse relationship in the customer class in other words do we have to go to the customer class and add a new field called address for the reverse relationship no we don't have to do that because Jango automatically creates this for us so we're done with this lesson next I'm going to show you how to implement a onet to many [Music] relationship now let's assume that a customer can have multiple addresses so we want to change this one toone relationship to one to many relationship how can we do this really easy first we need to change the type of the field to foreign key so we're telling D Jango that customer is a foreign key in this table okay next we need to remove primary key equals true because we want to have multiple addresses for the same customer so we want to allow duplicate values in this column right so remove this option this is how we can define a one to many relationship between two models really easy now it's your turn I want you to create a onet to many relationship between these entities so a collection can have multiple products a customer can have multiple orders an order can have multiple items and a card can have multiple items as well so spend a few minutes on this then come back see my solution all right let's look at my solution so I've defined a new class called collection with a single field called title pretty basic but note that I have defined this class before the product class so we can reference it over here so in the product class we have a new field called collection which is a foreign key and this is where we referencing The Collection class defined earlier now sometimes we cannot arrange our code in such a way that the parent class is further up in those cases we can pass their string just a little tip for you now for the delete Behavior I've used protect so if we accidentally delete a collection we don't end up deleting all the products in that collection okay what else do we have here here in the order class we have a new field called customer which is also a foreign key and for the delete behavior I'm using protect so if we accidentally delete a customer we don't end up deleting orders in fact we should never delete orders from our database because all these orders represent our sales so they should never be deleted okay now once again in this case I had to rearrange my code so the customer class is defined before the order class so we can reference it here now we have a new class called order item with four fields we have order which is a foreign key to order and once again we are using protect here so if you accidentally delete an order we don't end up deleting the order items so if an order has at least one item we will not be able to delete it okay then we have product which is also a foreign key and here we're using protect so if you accidentally delete a product we don't end up deleting the associated order items next we have quantity which I have said to positive small integer field this way we can prevent negative values from getting stored in this field and we also have unit price which is a decimal field now you might be wondering why have defined unit price here don't we have it in the product class yes we do but the price of products can change over time so we should always store the price of a product at the time it was ordered okay what else do we have here we have a new class called cart we could also call it shopping card here we have a single field create an ad which is a daytime field and I've said Auto now add to true so this field gets autop populated when we create a new cart and finally we have a new class called cart item with three Fields cart which is a foreign key to cart and here I've used Cascade so if we delete a cart we don't need it anymore we should delete all the items automatically then we have product which is a foreign key to product and here I've also used Cascade so if you can delete a product meaning if that product has never been ordered before then that product should be removed from all the existing shopping carts as well that's why I've used Cascade here and finally we have quantity which is again a positive small iner [Music] field all right let's talk about many to many relationships so I'm going to introduce a new class called promotion and Define a many to many relationship between promotions and products so a product can have different promotions and a promotion can apply to different products so let's define a new class called promotion which is a new model now here we're going to have Fields like description which is going to be a CH field with a max length of 255 characters we're also going to have discount which is going to be a float field we can also have start date end date and so on now we can Define the relationship in either of these classes and as I said earlier D Jango will automatically create the reverse relationship now in this particular case it makes more sense to define the relationship in the product class because we might have a product that we're showing to the user and at the same time we want to show all the promotions that apply to that product so I'm going to go to the product class and over here I'm going to define a new field called promotions so we use a plural name here because we might have multiple promotions now we're going to set this to models do many to many field and just like before we need to specify the name of the target model which is promotion now with this implementation Jango is going to create the reverse relationship in the promotion class so in this class we're going to have a field called Product underline set that returns all the products that a part particular promotion is applied to if you don't like this name you can always change it so in our product class where we Define our many to many field over here we can supply a keyword argument related name if we set this to products D Jango will use this name as the name of the field in the promotion class so instead of product set we're going to have product just remember if you change the default convention in Django it's best to change it consistently everywhere otherwise in some classes you're going to have a field like products and in some other classes you're going to have a field like product online set and this makes your code really ugly so in this implementation I'm not going to use related name I'm going to stick to the default convention okay so this is how we Define a manyo man relationship between two models [Music] earlier I told you that sometimes we can have multiple relationships between two models so here we have two relationships between collection and product now out of the two you have only implemented the one to many relationship now as part of implementing the other relationship we're going to face a situation called a circular dependency which is something we should avoid a circular dependency happens when two classes depend on each other at the same time so the product class is going to be dependent on the collection class and at the same time the collection class is going to be dependent on the product class so let me show you how to handle this situation so back in the code here in the product class we have this field called collection which is a foreign key to the collection class so here we have a dependency from the product class towards the collection class now to implement the other relationship we have to go to the collection class and add a new field here called featured underlined prod product which is going to be foreign key to the product class now here we're going to set UND delete to well if you delete a product and that product happens to be the featured product for a collection here we want to set this field to null so I'm going to set this to models. set null and that means we should make this field nullable so here we pass another keyword argument null equals true now look over here we have an error saying product is not defined we are seeing this error because the product class is defined after the collection class now this is where we have a circular dependency so in the product class we have a dependency to the collection class and that's why we Define The Collection class before the product class however because of the circular dependency now the collection class also needs to be dependent on the product class which is not possible to solve this problem we need to wrap this in quotes and pass a string here so this solves our problem however this introduces a new kind of problem if tomorrow we decide to rename this product class to something else this string is not going to get updated let me show you so we put the cursor here press F to to rename product to something else let's say product one now look this string is not updated so use this technique only if you have to okay now let's rename this back to product good save the changes now let's open up the terminal window we have an error saying reverse query name for Featured product clashes with field name collection what is going on here let me explain so in the collection class we have a field called featured product right now as you know jangle is going to automatically create the reverse relationship for us so that means in the product class we're going to have a field called collection which represents the other end of the relationship and this is exactly where the problem happens because in the product class we already have a field called collection so Jango cannot create the reverse relationship because of the name Clash so here we have two choices one solution is to set related name to something other than collection or if we don't care about the reverse relationship we can simply Type A plus sign here this tells D Jango not to create that reverse relationship now I save the changes look at the terminal the error is gone and our server has started at this address [Music] Perfect all right let's talk about generic relationships so I told you that we want to design the tags app such that we can reuse it in any projects anywhere we want to have the ability to tag items that's why we have two two models in this app tag which represents an actual tag and tagged item which represents a tag applied to a particular item which can be a product a video an article literally anything so let's see how we can Implement these models so back to vs code let's go to the tags app and open the models module here we're going to Define two classes the first one is tag and we're going to give it a field called label which is going to be a Char field with a max length of 255 nothing new so far now the second class is the one that is interesting tagged item Now using this class we can find out what tag is applied to what object now to determine the tag we simply add a fi here tag which is going to be a foreign key to the tag class now here we need to set UND delete to what well if we delete a tag we want to remove it from all the associated objects right so here we're going to Cascade again nothing new so far now the interesting part is identifying the object that this tag is applied to here's the poor way of implementing this if we add a field called Product then we need to set this to a foreign key to product now with this implementation we have to import the product class on the the top and that means the tags app is going to be dependent on the store app so look if we say from store. Models import product now the tags app is dependent on the store app we don't want to do this what if tomorrow we want to tag articles or videos these are completely different apps so the tags app should know nothing about these models so delete this line what we need here is a generic way to identify an object to do that we need two pieces of information the first one is the type of an object which can be let's say product video article whatever the second attribute we need is the idea of that object using these two pieces of information we can identify any objects in our application or in database terms we can identify any record in any tables because using the type we can find the table and using the ID we can find the record right so instead of using a concrete model like product we should use an abstract model called content type which comes with Jango so earlier we talked about the list of installed apps in the settings module let's go there real quick so over here we have an app called content types using content types we can create generic relationships between our models so content type is a model that represents the type of an object in our application now we need to import this on the top so from Django the contri which is short for contribution then we're going to go to content types app then we're going to go to the models module and import the content type class so this is a model just like any model that we have in our application but this model is specifically made for allowing generic relationships now back to the business so we're going to have a foreign key to content type and that means instead of product we should call this field content type now for undelete once again we're going to use Cascade because if that object type is removed we want to remove all the associated tags so models. Cascade now the second attribute we need here is the idea of the target object so we can call this field object underline ID and this has to be a positive fi because we're assuming that every table is going to have a primary key and all primary keys are positive integers now what if in a particular table our primary key is not an integer let's say it's a GID well this solution is not going to work so this is the limitation of the solution so now with these two pieces of information we can identify any object in our application now one last thing when quering data we might want to get the actual object that this tag is applied to like like the actual product to do that we're going to add another field here called content underline object and of course we could call it anything that we should set this to a particular type of field called generic foreign key now we need to import this on the top so I'm going to duplicate this line and change models to fields and content type to generic foreign key Now using this field content object we can read the actual object that a particular tag is applied to so let's quickly recap to define a generic relationship there are three fields we need to Define content type object ID and content object now A little exercise for you I want you to create an app called likes for tracking the objects that a user likes so in this app we're going to have a model called liked item and using an instance of this model we can tell what user likes what object so here we need a field called user which is going to be a foreign key to the user class defined in this module Jango cont trip. o. models so o is another app that is automatically installed in every Jango project and using this app we can authenticate and authorize users so go ahead and spend a couple minutes on this then come back see my solution all right here's my solution we have a new app called likes and in this app we have a new model called liked item now here we have four fields we have user which is a foreign key to the user class defined in Django cont trip. o. models now here for UND delete I've used Cascade so if a user is deleted you want all the objects that the user has liked to be deleted as well okay then we have three Fields exactly like before no changes so we have content type for identifying the type of an object that the user likes we have object ID for refereshing that particular object and content object for reading an actual object so that was pretty simple let's move on to the next lesson welcome back to another section of the ultimate Django course in this section we'll use Jango migrations to generate our database schema based off of the models we built in the previous section so we'll talk about making migrations running them reversing them in case make mistakes we'll also talk about populating our database so by the end of the section we'll have a production grade database that we can query in the next section so let's jump in and get [Music] started Jango supports many database Management Systems the most basic one that is set up by default is sqlite which is a very basic lightweight database engine you should use it only for development or for low traffic websites nothing serious for any serious projects you should use postgress MySQL Mario DB or Oracle these database engines are officially supported by Jango but there are also thirdparty libraries for other database engines like Microsoft SQL Server now out of all these options postgress and MySQL are the two most common database backends used in the Jango community in this section we'll start off by having a quick look at SQL light and then shortly after we'll switch to mySQL for the rest of the course now don't worry if you have never worked with mySQL we're not going to use any fancy MySQL features all you have to do is install MySQL now if you don't want to use MySQL and prefer a different database engine like postgress that's totally fine with me but I'm not going to cover connecting the project to postgress you need to research it on your own so next we're going to talk about creating migrations [Music] all right let's talk about migrations in D Jango we use migrations to create or update our database tables based off of the models we have in our project so in Jango projects we're not going to manually create or modify our database tables we're going to let Jango take care of that let me show you how this works so open up a new terminal window and run python manage.py make migrations make sure to spell it properly all right let's see what's going on here D Jango looked at all the installed apps in our project and for each app it created a new migration file so here we have the migrations for the store app we have a new file at this location store SL migration SL here's the name of the file so every migration file has a sequence number like 1 2 3 4 and a descriptive name if you're on a Mac you can hold down the command or if you're on Windows you can hold down the control key and then click to open this file so let's have a quick look here as you can see this migration file is just a python module so here we have a class called migration with a bunch of operations so here's the first operation for creating a model called cart with two Fields ID which is a big auto field which translates to a big Auto incremented column in a database and as you can see this field is used as a primary key so earlier I told you that we don't have to explicitly Define a primary key for each model because jangu is going to do that for us okay now in the same model we have another field called created at which is a daytime field now similarly we have other operations for creating other models like collection customer and so on now at some point we're going to run these migrations against a database at that point Jango is going to translate this python code into SQL code and run it on top of our database we'll see that soon so here's what I want you to take away as you build new models or modify existing ones you run the make migrations command to generate a new migration let's go through this exercise a couple more times so let me show you a cool trick let's say we want to quickly jump to the product class we can hold down the command key on Mac or control key on Windows and press T this is the go to symbol command you can find it on the top Under The Go menu so here we have go to symbol in workspace and the shortcut is command and T on Mac so if you search for product we can find all symbols that contain the word product a symbol can be a class a function a variable and so on so let's jump to the product class and rename the price field to unit price so here we press f2 to rename this to unit underline price now save the changes back in the terminal window we run make migrations one more time that Jango is asking did you rename product. price to product. unit price yes with did so we type y good now we have a new migration in the store app with this sequence number and this description rename price product unit price if you don't like the description you can always change it so let's go to the Explorer panel here's the store app the mation spoiler now we can simply rename this to rename price to unit price just remember if you rename a file here make sure to update all references to that file in other migration files let me show you what I mean so if you open this migration file over here you can see this migration is dependent on this other migration in the store app so if tomorrow we decide to rename this file from initial to let's say first migration then we'll have to find all references to this file and update them as well okay so now we have any new migration and in this migration we have a different kind of operation instead of a create model operation we have a rename field operation so when we run this migration Jango will go to the product table and rename the price column to unit price okay now back to the terminal window we haven't made any more changes so if you run make migrations one more time D Jango says no changes detected now sometimes you see this message even though you have changed your models why does this happen this happens if you forget to add the app in the list of installed apps so one more time we're going to use our shortcut which is command and team to jump to the installed apps variable okay so over here we have all the apps we have created so far store Tags and likes if likes was missing here Jango wouldn't detect any changes in this app okay now let's go back to the product class and make a different kind of change you want to introduce a new field called slug now a lot of people don't know what a slug is let me show you so here on stack Overflow if you search for question in the address bar you can see the idea of the question and the actual question itself what you see here is called a slug but this slug can only contain letters numbers underscores and hyphens so any other character is going to be replaced or removed for example here we have a space between each word but in the UR L the spaces are replaced by hyphens now the whole point of adding a slug here is to make it easier for search engines to find our Conta so this is a search engine optimization technique now similarly we want to give each product a slug so search engines can easily find our product so we're going to set this to models. slug field save the changes back to the terminal let's run make migrations one more time now this time we see a different kind of message saying you're trying to add a non-nullable field slug to product without a default now here we have two options one option is to provide a oneof default value right now the other option is to quate and add a default in our model file let me show you both options so if we type two we can quit now back to our model we can set a default value let's say hyphen the other option is to make this nullable if you make this nullable Jango is not going to complain that this field needs a default value now let's remove this and create the migration one more time so back to the terminal make migrations all right this time I'm going to select the first option so we want to provide a one of default value now Jango is asking what is that default value so we're going to supply a string that contains a hyphen exactly like before all right so Jango created a new migration file with this sequence number let's open this file real quick now in this file we have a new operation for adding a field to an existing model or table so when we run this migration jangu is going to go to the product table and it's going to add a new field called Slug and it's going to populate it with a hyphen so the difference between this option and the previous option is that this default value is not in our model it's only in the migration file it will be used only once okay so this is about migrations now before we finish this lesson let's give this migration file a more descriptive name so because this is our last migration file we don't have any other migrations that are dependent on this file so we can safely rename this file to let's say add slug to product okay so now we have a bunch of migrations in our project next I'm going to show you how to run these migrations [Music] so now we have a bunch of migrations where each migration describes a set of changes so each migration is like a commit in a version control system like git right now we're going to run these migrations to generate our database schema so here in the terminal we run python manage.py migrate all right so Jango went through all the installed apps and executed all the pending migrations so as you can see we have a migration that comes from the content types app we have another migration that comes from the off app we have a bunch of migrations from the admin app and so on now where is our database well if you look at the Explorer panel over here you can see a file called db. sqlite 3 so this is our SQL light database which is a very lightweight database you should only use for development or very small websites now here in vs code I have an extension called sqlite which we can use for opening a sqlite database so if you don't have this extension go ahead and install it there are also other tools like there is a tool called DB browser for sqlite which you can get from SQ light browser. org it's a free but crappy application but it gets the job done we're going to use it only in this lesson because from the next lesson we're going to switch to mySQL okay so install this extension and then bring up the command pallet so on the top you can go to view menu and open the command pallet the shortcut is shift command and P on Mac or shift control p on windows so we open this up search for sqlite open database you can see our database in the list so let's select it good now let's open the Explorer panel and collapse our project we have a new note here called SQL light EXP Explorer now here you can see our database as well as all the tables we have in this database so we have a bunch of tables that belong to the O app these tables are used for authenticating and authorizing users we'll talk about them later in the course then we have three tables that are used by D Jango to do his job again we'll look at this soon we have one table that belongs to our likes app we have a bunch of tables that belong to the store app and as you can see all these tables are named using singular names so we have address cart cart item collection and so on if you don't like singular names you can always change them I'll show you how to do that later in this section we also have a couple of tables that belong to the tags app okay now let's open the migrations table so we right click on it and select show table this table keeps track of the migrations that have been applied to this database so the first migration comes from the content types app here's the name of the migration and here you can see the date and time this migration was applied So currently we have 22 migrations applied to this database and that means if we go back to the terminal and run the migrate command one more time nothing is going to happen because all the migrations we have in this project have been executed so using this table Jango can tell which migrations have been applied and which migrations haven't so this is how we can run our migrations now we have another command called SQL migrate and using this command we can see the actual SQL code that is sent to our database at runtime for example if you want to see the SQL code for the third migration in the store app here we type the name of our app and the sequence number of our migration file so this is the actual SQL statement that D Jango will send to our database and this will be dependent on the database backend we use So currently we're using sqlite later when we switch to mySQL or a different back end the SQL code that will be generated will be different okay now one last thing before I finish this lesson is it SQL or SQL well this language was originally called SQL which is short for Structured English query language but SQL was a trademark of an aircraft company so IBM didn't want to get into legal issues that's why it changed the language to SQL now some people prefer to call it SQL other people call itq SQL so don't hate me for calling it SQL that's just my paraphrase now what about MySQL isn't that my SQL well according to mySQL team they prefer their tool to be called MySQL but they don't mind it if you call it my SQL so I personally call this tool MySQL but I prefer to refer to the language as SQL and now a little exercise for you add the zip fi to the address class create a migration run it and then inspect the migrations table so you see the whole work flow in [Music] action sometimes you need more control over the database schema for example you may want to overwrite the name of a table or you may want to add an index to a couple of columns and so on let me show you how to do this so let's press command and T on Mac or control and T on Windows and jump to our customer class okay now in this class we're going to Define metadata so inside this class class after our Fields we're going to add an inner class called meta the name of this class is important so this is where we Define metadata about this model now here we have a bunch of options if you simply search for Jango model metadata on this page you can find all the available options here so we have DB underline table for specifying the table name we can also set the ordering that will be used by by default when cing objects we can also create indexes and so on so let's look at a couple of examples so back to our code here I'm going to set DB underline table to store underline customers so here I'm using a plural name now even though this is possible it's not something that I personally recommend because if you want to use plural names then you would have to set the table name for every model in your project I find it unnecessary the whole reason we use Jango is because it comes with a lot of conventions that we can follow to quickly build applications if you want to constantly override these conventions and customize things maybe Jango is not the right tool for you that's just my personal opinion so here we can set the table name we can also create indexes so we set indexes to an array of index objects to create an index object we can use models. index like here we set a keyword argument called fields we set it to an array of strings so we can add an index on last name and first name columns now if you're not familiar with indexes basically we use them to speed up our queries I cover them in detail in my SQL course in case you want to learn more so we have made a couple changes now it's time for what it's time for creating a migration so save the changes back to the terminal we run python manage.py make migrations great so Jango created a new migration file but it couldn't come up with a good name for this file because we have mixed two different types of operations here on the one hand we're creating an index on the other hand we renaming a table so it's best if you don't mix up different types of operations write a bit of code to solve a specific problem create a migration and then move on to the next problem okay so I'm going to leave this file as is now let's run this migration so python manage.py migrate good now let's open up our database one more time so here in the Explorer panel here's our database I'm going to refresh good now look at the name of our table now we have a plural name here but look this is not consistent with other tables that's why I personally think we should stick to the default convention injo so in the next lesson I'm going to show you how to undo the last migration [Music] let's imagine that the migration that we applied in the previous lesson was a mistake so how can we undo it well there are a couple of different ways to do this if you want to selectively undo what we did in the previous lesson we have to create a new migration for example if you want to keep the index but remove the new table name then we have to remove this line save the changes create a new migration and apply it that's the only way however if you want to undo every everything that we did in the previous lesson we can completely revert the last migration let me show you how to do this so let's look at the Explorer panel here in the store app look at the migrations folder this is the last migration that we want to undo migration number four so we want to downgrade the database to the previous migration which is migration number three so we open up a terminal window and type python manage.py migrate we want to migrate the store app to migration number three okay beautiful the last migration is unapplied perfect so now our database is back to the previous date let's verify it so here in SQL light Explorer let's refresh look the customers table is gone and now we have the customer table and also if you look at the migrations table look the last migration which was migration number four in the store app is gone so we properly downgraded our database but the changes are still in the code so if we go to the Explorer panel and look at the migrations folder in the store app look the new migration is still there so if you open up a terminal window and run python manage.py migrate then the last migration which is currently on applied will be applied so to properly revert the last migration we should delete this migration file as well as all the changes we made in our code so let's go to the customer class earlier we added this meta class over here if we keep this code but remove the migration file the next time we create migrations D Jango is going to create a new migration for applying this change to our database we don't want this to happen so the proper way to undo the last migration is delete this code as well as the associated migration file now this is where we use Version Control Systems like git undoing code using a version control system like git is a lot easier than manually removing code from different places so in this project I've been using git and after each lesson I made a commit so let's open up the terminal window and run get log d-1 line this shows the list of commits I've have made so far so here's my last commit customizing database schema and this is where I created method data for the customer model now here we have this head pointer pointing to this commit so to undo this commit we have to make the head point to the previous commit now if this is all new to you don't worry just follow along with me and if you're interested I have a comprehensive course about git on my website so let's press Q here now to reset the head we type G reset D- hard head till the one so we want to move the head pointer one step back so it points to the previous commit okay let's go with that great now all the changes we made in the previous lesson are gone let's verify it so here in the migrations folder we no longer have the force migration and also if we go to the customer class the metadata is gone great now here's a little exercise for you in the customer model rename the first name field to give a name create a migration played and then reverted all right from this lesson we're going to switch to mySQL if you don't like MySQL you can use someone else's SQL that's totally fine with me but let's see how we can install MySQL on your machine if you already have MySQL feel free to move on to the next lesson so open up your browser and head over to myql.com then go to downloads on this page down the bottom you see a link called MySQL Community download now over here we're going to download MySQL Community server now on this page you can select your operating system so I'm on a Mac and then we're going to download the latest version now on this page you don't have to sign up or login there is a link down the bottom so let's just start the download great so open this DMG file or setup wizard on windows so here we have a set set of wizard pretty simple but there is one thing that I want to highlight here let's click on continue and again agree and install now here it's asking for your computer's password this is the password that you use to login so let's type that in now on this page we can select a password for login into MySQL this is different from the password you use to log into your computer so we're going to select use strong password encryption click on next and then here we type the password for the root user of MySQL so I'm going to type a complex password here and then finish now once again it's asking for my computer's password so let's type that in all right the installation was completed successfully great if you have any problems if you get any errors the best way is just to Google bu the error because every computer is different unfortunately I cannot help you resolve the errors on your machine so now that we have MySQL next we're going to talk about GUI tools for connecting to [Music] mySQL all right now we need a tool to connect to mySQL and manage our database there are many different tools out there you can use MySQL workbench which is absolutely free and you can get it from myql.com personally I've used it a lot in the past it gets the job done but quite frankly it's not the best tool out there we also have table plus which is a great tool it's very lightweight and it supports many different database engines so it's not limited to mySQL and of course that comes with a price at the time of recording this video the license for table plus is $59 and by the way I'm not an affiliate for table Plus or any other products these are the tools that I've personally used and introduced in my courses and of course there are many other tools out there you can research and find your favorite tool we also have data grip which is my favorite tool I believe this is the best database tool in the market because it's built by jet Brands which is the same company that has built intell webstorm resharper and many other amazing tools and of course this is the most expensive product you can get a license for $89 for the first year but for the second and third years the price will reduce to $70 and $50 so every year you have to pay to use data grip having said that you can download a trial version and use it for free so if you want to follow along with me you can just download it you don't need to provide a credit card just download it and use it for 30 days so the first time you open it you're going to see this window you're going to evaluate it for free now you can optionally supply your email address and evaluate great so this is our tool we're going to create a new project we can call that stor front now over here you're going to click on the plus ass sign to create a new data source which is going to be MySQL so look there's so many data sources available here you can use Amazon red shift Apache Cassandra and so many other data sources so let's go with mySQL now on this dialog box you can give your connection a name I'm going to accept the default next we're going to specify the host which is Local Host the port by default is 3306 the user should be root and the password should be the password that you set when installing MySQL server so I'm going to type my password here now pay attention to this Arrow we have missing driver files so let's download them good now let's test the connection we get this error saying server returns invalid time zone so let's set the time zone over here let's set the time zone to UTC press Tab and test the connection one more time okay we successfully connected to mySQL server perfect let's click on okay now let's right click on Local Host and go to new query console now in this console window we can type SQL commands so for this course we're going to create a database called storefront we have to create the database first before we can connect with it using Django so even if you're not using data grip let's say if you're using MySQL workbench you need to create create a database called storefront or whatever you want to call it now to execute this we click on this icon good so we have a new database called storefront and we're going to use this in the next [Music] lesson all right the next step is to connect our D Jango project to mySQL and to do that we have to install a package called MySQL client so here in the ter let's run pip and install MySQL client make sure to spell it properly all right the installation was done now before recording this video I was practicing these steps and there I got a weird error when installing my SQL client and quite honestly it took me over an hour to troubleshoot the issue so if you encounter any errors don't give up keep going this is a natural part of software development you have to be patient and determined just Google the ex ER message and I promise you you're going to find something on stackoverflow.com you can also post your questions on our Forum at forum. cwi.cc was corrupt so before going further let's make sure you have installed MySQL properly open a new terminal window and run MySQL so we're going to connect to mySQL using the root user and a password that we're going to supply now so let's type our password all right if you see this that means you have installed MySQL properly if you get an error saying MySQL command not found that means either you didn't install MySQL properly or MySQL is not in your path so then depending on the operating system you're running you need to research how to add MySQL to your path all right so let's stop this by pressing contrl and D good now we installed MySQL client package which great the next step is to change our database settings so we're going to go to our settings module now let me show you a new shortcut under the Go menu look at this command go to symbol in editor the shortcut is shift command and o on Mac so if you press this we can see all the symbols in this file these symbols can be variables classes functions and so on so all these symbols you see here these are various settings in this module so if you type databases we can jump to the database settings straight away so look at our default database engine that is sqlite and here's the name of our sqlite file so the project directory followed by db. sqlite 3 now we're going to change this to mySQL and this is the reason why we installed MySQL client package if you don't install this you cannot change the engine to mySQL okay now we're going to change the name to the name name of our database this is the database that we created in the previous lesson next we're going to set the host to Local Host next we set the user to root and password to the password we used when setting up MySQL now this is purely for development so we're not going to use this in production in production we're not going to include our password as PL text in this file so later in the course where we talk about deployment I'll talk about a different strategy for our database settings for now don't worry about it so let's save the changes now let's go back to our terminal window where we're running our server you should not get any errors at this point so your server should be still up and running if you get any errors then you have to stop here and troubleshoot otherwise you should run the migrations so all the tables are created in our myql database so let's open a new terminal window and run python manage. I migrate okay all the migrations are applied to our database so if you go back to data grip and do a refresh look our storefront database has these tables perfect so hopefully you didn't encounter any issues if you did just be patient and determined don't give up I deal with these issues all the time even with more than 20 years of software development so our database is ready let's move on to the next lesson [Music] sometimes we need full control over generating or updating our database schema this is really easy with Jango all we have to do is create an empty migration and there we can write any arbitrary SQL code let me show you so here in the terminal we type python manage.py make migrations we're going to go in the store app and create an empty migration okay so now we have a new migration migration number four with this name of course we can change the name to something more meaningful now let's open this file in this file we have an empty migration so the operations array is empty now here we can use migrations do run SQL so this is a class that is defined in the migrations module that is imported on the top we can create an instance of this class and here in the Constructor we Supply two two SQL statements the first one is for upgrading our database the second one is for downgrading it so here we can use triple codes in Python to break down our SQL statements into multiple lines so for this demo I'm going to insert a new record into the collection table so store underline collection we want to set the title column and for the value I'm going to use collection one okay now us the using the same Technique we could also create a stor procedure a function a view and so on now as I said this first argument is for upgrading our database so as a best practice we should Supply a second argument even though it's optional because if you fail to do this then you won't be able to revert this migration okay so in the second statement we want to undo what we did earlier so we want to delete the collection with this name so we say delete from store underl collection where title equals collection one now let's save the changes back in the terminal we run python manage.py migrate okay the last migration is applied so let's go to data grip and look at our collection table so double click on this and here's our new collection beautiful now let's unapply the last migration to make sure sure our implementation is right so we want to downgrade the store app to migration number three so here in the terminal we say python manage.py migrate store to migration number three perfect now back to our database let's refresh the collection table our new collection is gone great [Music] all right the last thing we're going to do in this section is populating our database with some dummy data and for that we're going to use a great website called mau.com it's one of my favorite tools so let's say we want to populate our customers table over here we can specify our columns and their type so we have ID which is a number we have first name which is a first name column so this tool will generate a bunch of random first names for us okay similarly we have last name email now instead of gender we're going to use phone so I'm going to change the type of this column to phone now we can optionally specify the format for the phone I'm going to leave it as is next we need to add the birth date column and for that we're going to use a date column and I'm going to change the format to this format four digits for the year followed by two digits for the month and the day now we should also add another field for the membership so if you recall in this column we can have B for bronze s for silver or G for gold so I'm going to change the type of this to regular expression and over here you can type any valid regular Expressions if you're not familiar with regular Expressions you can click on this and see some examples so what I'm going to type here is a pair of parentheses and inside the parenthesis I'm going to type B or and s or G so one of these characters will be used to generate the values for this column okay now over here we can specify the number of rows to generate I think a th000 is good for customers next we can specify the format which can be CSV Json tap delimited SQL and so on I'm going to select CSP for now and preview our data so this is what we're going to get we're going to get a thousand customers with these values now we can download the CSV right away or we can change the format to SQL and over here we specify the name of our table which is going to be store underline customer and then we can download our data so now we have a SQL file we can open this with data GP or MySQL workbench to populate our table so now I'm going to drag and drop this file onto data grab so we have a bunch of insert into statements now on the top make sure the current schema is storefront if it's not just select it over here then select all these rows and execute them all right so now we're done let's open a new query console for the storefront database and find the number of records at the customer table so we type select count of everything from store underline customer so as you can see over here we have a th records in this table beautiful so we have reached the end of this section now I'm going to stop recording and generate data for a bunch of tables we're going to work with in the next section so at the beginning of the next section I will give you a sequel file to populate your database with dummy data okay so that's it for now I hope you learned a lot and I will see you in the next section welcome back to another section of the ultimate Django course in this section you will learn how to query and manipulate data using Jango RM or object relational mapper we'll start off this section by quick overview of Jango RM and the problem it solves then we'll spend the rest of the section on various ways to query and manipulate data we'll cover filtering sorting grouping data and much much more so by the end of this section you'll be able to confidently pull out data or store it in a relational database so let's jump in and get [Music] started let's start off this section by a quick overview of object relational mappers and the problem they try to solve so you know that in relational databases data is stored as rows in tables so when pulling up data from a relational database we need to map these rows into objects in the past we used to do this by hand and this was pretty repetitive and time consuming so we would have to write a SQL query send it to the database read the result and map it to a bunch of objects so for each record you'll have to create a new object and set its attributes this is where an object relational mapper comes into the picture an object relational mapper as the name implies Maps objects to relational records and that frees us from writing a lot of repetitive code so using an object relational mapper we don't have to write SQL code to query or manipulate data we can code in an objectoriented programming language like python the URL will then translate our python code into cql code at runtime so does it mean we never need to write SQL no when dealing with complex problems ORS can produce efficient SQL queries so that's when we need to jump in and write optimize SQL queries by hand but overall orms help us reduce complexity in our code make it more understandable and get more done in less time a good example of that is Jango migrations using these migrations we generated our database tables almost instantly we didn't have to write any SQL code or use a tool like data grip to create our tables add relationships indexes and so on Jango migrations took care of all of that for us so migrations are part of D Jango RM also all the model classes we have created so far inherit from the model class in Django this model class is also part of D Jango RM so as you will see in this section all our model classes inherit the functionality to query or manipulate data from the base model class now once in a while you see someone like our popular John Smith who hates orm and prefers to write every bit of Code by hand because he believes orms are slow what JN is missing here is that he doesn't understand that the more code he writes the more bugs he or someone else has to fix in the future there is an old saying that says the best code is no codee writing and maintaining all that extra code costs time and money someone is paying for it your employer or your client if you were that person you wouldn't want someone else wasting your money writing code that was unnecessary right throughout my career I've seen so many projects over engineered by people like John that never made it into production in my opinion a good software engineer is one who delivers working software in time building the best most optimized solution that will never make it to production is not something to be proud of so use the right tool for the job as I said ORS don't perform well when dealing with complex queries but that doesn't mean we should never use orms we can use them in a lot of cases perhaps for the most part remember the old saying premature optimization is the root of all evils so don't optimize your code unless you have proof that it's slow so that's it for the Chango RM let's move on to the next lesson [Music] all right before we get started let's make sure that we're on the same page I want to make sure that we're both using the exact same code and database so what you see on your machine will be exactly the same as what I'm going to show you in the videos so please follow everything I'm going to show you in this lesson so at the beginning of the course in the first section I give you a zip file that contains all the resources for this course so here we have a folder called code that contains the code for each section now we're going to go to the fifth section and open the starter code so here we have the storefront project let's drag and drop it into vs code okay we get a message saying no python interpreter is selected don't worry about this so let's close this now let's go to the settings module and here in the section for our database settings change the password of MySQL otherwise you're going to get a connection error so use the password for the root user next we open a terminal window and here we're going to run pep and install so this is going to create a new virtual environment and install all of our dependencies there okay great now let's open up data grip or any tool you use for managing your database here we have the storefront database I'm going to delete this database and recreate it from scratch so delete good now we're going to right click on Local Host and open a new query console and here we're going to type create database store Front make sure to spell it properly because this is the name that we use in our project okay so now we have a new database let's verify it great so this database is currently empty the next step is to run all of our migrations to create our tables so back to our project here in the terminal we run python manage.py migrate now we get an error saying invalid syntax because in this window our virtual environment is not activated so back to our project let's activate our virtual environment good now we're going to run python manage.py migrate okay all of our migrations are applied so back to data grip let's refresh all of our tables are created beautiful but these tables are currently empty so the next step is to populate them with data but before doing so I want to close all the sessions I have open in data grip so down the bottom over here we have the services tab I'm going to right click on Local Host and close all sessions now I'm going to right click on storefront and open a new query console now back in the resources folder we have this data folder and here we have a seed file that will populate five of our tables collection product customer order and order item so let's drag and drop this into this window good now on the top we have to select the schema so I'm going to select storefront good now make sure that all these statements are selected So currently all of them are selected if not just press command and a on Mac or control and a on Windows and finally we're going to execute them all in one go good so now five of our tables are populated with data let's look at the customer table all right so here we have 1,000 customers beautiful and now the final step is to start our server so python manage.py run server great so now that we're on the same page let's move on to the next lesson [Music] all right the first thing you need to understand about D Jango RM is the concept of managers and query sets so let's press command and T on Mac or control and T on Windows and jump to our say hello function so we're going to go back to our playground and write all the code here now for this section we don't really need the calculate function so I'm going to delete it and I'm going to delete this line as well now on the top from store. Models we're going to import the product class now every model in Jango has an attribute called objects and this returns a manager object a manager is an interface to the database it's like a remote control with a bunch of buttons that we can use to talk to our database so here we have a bunch of methods for querying or updating data for example we have all for pulling out all the objects in the products table we also have get for getting a single object we have filter for filtering data and so on now most of these methods like the all method return a query set so when we call this method we don't get a list of products we get a query set object a query set is an object that encapsulates a query so at some point Jango is going to evaluate this query set and this is when Jango will generate the right SQL statement to send into our database but when will this happen well under a few scenarios one scenario is when we iterate over a query set so if you write code like for product in query set at this moment Jango will evaluate this query set and get the result from the database so for this demo let's just print the product on the terminal I'll save the changes back in the browser here on the Hello page let's refresh okay now let's open Django debug toolbar so look at the SQL tab over here you can see the actual SQL statements that Jango sent to our database so here we have three queries the first two are just used by Jango to do his job the third query is our select statement to get all the products from the products table so let's expand this this is the exact query that Jango has sent to our database so select ID title Slug and other fields from product table now over here we can click on the select button to see the actual result that is returned from the database so this is very useful when debugging applications now back to our code so one scenario where a query set is evaluated is when we iterate over it another scenario is when we convert it to a list so if we call the list function and give it this query set this query set will be evaluated another scenario is when we access an individual element like the first element or when we slice this so if we use the slice operator and pick the first five elements then the query set will be evaluated so because of this we say query sets are lazy which means they're evaluated at a later point now you might be wondering why query sets are lazy why doesn't Django simply call the database the moment we call the all method well the reason for this this is that we can use Query set methods to build complex queries so over here we can call query set filter to filter the result and this will return a new query set so once again the query is not going to get evaluated at this point so we get a new query set and then right away we can call the filter method to apply a second filter now similarly we can call the order by method to sort the result so by chaining all these methods we'll build a complex query and at some point when we iterate over that query or converted to a list that query will be evaluated now imagine if query sets were not lazy the moment we call the all method the query would be evaluated and this would result in thousands or even millions of objects returned from the database but what if you were only interested in a subset of these products then calling the filter method would filter the objects in memory so would get thousands or millions of objects will store them in memory and throw most of them out so to recap every model has an attribute called objects which returns a manager which is an interface to the database now the manager has a bunch of methods for querying an updating data most of these methods like the all method return a query set now in contrast we have some other methods that return result immediately for example we have the count method which Returns the number of Records in the product table now why don't we get a query set here well because this method returns a number so it doesn't really make sense to do something extra with that number we're not going to apply a filter to it we're not going to sort the result or build a complex query around it so this was the basics of managers and query sets as we go through the Section you will learn more about these query sets next we're going to talk about retrieving objects in detail [Music] all right in this lesson we're going to talk about a few different methods for retrieving objects the first method is the all method that we briefly talked about in the previous lesson this method returns a query set and when this query set gets evaluated we get all the objects in a given table like the product table now sometimes we want to get a single object like the product with the ID one to do that we use the get method and here we pass a lookup parameter like ID equals 1 that we could also use PK that's a special argument so when we use PK D Jango will automatically translate this to the name of the primary key field so our primary key field might be ID it might be code whatever we don't have to remember this is the benefit of using the PK argument okay now unlike the all method the get method returns an actual object not a query set the reason for this is because once we get an object it doesn't really make sense to do anything extra with it we're not going to sort the result we're not going to apply additional filters and so on so here we get a product and that means we should rename this variable to product so always pay great attention to the name of your variables and functions I cannot emphasize this enough because this is one of the main issues I see in a lot of people's code they have a function like get airplane so you see that function and you think you're going to get an airplane but when debugging the application you realize that this function actually returns an orange and that orange ends up getting stored in an object called book don't do this so always pay great attention to the name of your variables okay so let's save this and see what we get back to the browser refresh let's look at the SQL tab so here's our select statement so we're selecting all these columns from the product table and here we have a we Clause to select the product with the ID one now Jango also adds a limit Clause a limit of 21 I'm not entirely sure why they use 21 here to me it looks like a magic number but this is something you can find in Jango source code so for now don't worry about it this limit doesn't really make a difference for us now one thing you need to know about the get method is that if it cannot find this object it will throw an exception so if we set PK to zero look we get an exception of type does not exist so to handle this we have to wrap our code inside a TR catch block so back to the code first we're going to import the type of the exception on the top so from Django core. exceptions we're going to import object does not exist now not that I put all my Jango import statements next to each other so my code is cleaner and more organized compare this with this so we importing something from Django then something from another app then we're going back to Django again this is a little bit ugly so I prefer to put all Jango import statements next to each other now we need to wrap this line inside a tri catch block don't tell me that you don't know what the tri catch block is because I covered it in detail in my python course so here we type try then we type accept followed by the type of exception which is object does not exist also note that you don't have to type the full name of the class so here I'm typing obj d n e and with that we can easily look up this class so we can use abbreviations okay Enter now in a real scenario here we want to show an error to the user but for now don't worry about it so I just want to pass okay now back to the browser refresh this time we didn't get an exception great now this TR catch block looks a little bit ugly we don't want to repeat this pattern over and over in our code so let me show you a better way first I'm going to delete the track catch block good now instead of the get method we can use the filter method now this method returns a query set so right away we can call the first method of the query set now if the query set is empty the first method returns none so in this case product is going to be none we're not going to get an exception check this out so save and refresh great now sometimes we want to check the existence of an object so over here right after the filter method instead of the first method we can call another method called exists so first we apply a filter and then we check to see if there is an object in our query set with this criteria so in this case we're not going to get a product object we get a Boolean value so we should rename this variable to something like exists okay so these are various ways to retrieve objects now in the next lesson we're going to talk about filtering in detail [Music] all right let's talk about filtering data so let's say we want to find all the products that are $22 so here we pass a keyword argument and say unit price equals 20 pretty straightforward now what if you want to find all the products that are more expensive than $20 we cannot use our logical operators here look we have an error because this expression this piece of code is a Boolean expression and returns a Boolean value which can be be true or false but when calling the filter method we need to pass a keyword argument so we need to pass a keyword followed by a value right so to solve this problem after the field name we type two underscores followed by a lookup type so in Jango we have GT which is short for greater than we also have greater than or equal to we have less than less than or equal to so for this demo I'm going to change this to GT equals 20 now we're passing a keyword argument to this method but the name of our keyword is kind of special right save the changes now to find all these lookup types we can search for query set API and on this page look over here where is it it's right here filled lookups so we have various lookup types for numbers strings and dates in this lesson we're going to cover a lot of them and I'm going to leave the rest to you so back to our code another useful Lookout type is range and with this we can find the products whose price is in a given range so over here we cannot pass a single value we need to pass two values a minimum and a maximum so we need to pass a topple with two values let's say 20 and 30 now out of curiosity let's render these products in our template and see what we get so here's the context the object that we're passing to our template in this object in this this dictionary I want to add another key value pair called result we could also call it product that's better and set it to query set so we're passing the query set here now it would be better to convert this to a list so the name of the key reflects the type of the value once again we don't want to get an airplane and store it in a book right so save the changes now let's go to hello.html and after our if block we're going to render an unordered list which represents a list of bullet points so tab inside the unordered list we're going to add a for Loop so we add a pair of braces with a perent and here we say for product in product we don't need a colon here just the expression okay now in our for loop we're going to type a list item for rendering a bullet point and over here we add two braces to render product. type finally we need to close our for Loop so once again braces with Ampersand and here we type end four now back to the browser here are the products whose price is between 20 to $30 great now we can also filter across relationships so let's remove this argument let's say we want to find all the products in collection number one so here we type collection followed by two UND scores so we navigate the relationship and over here here we can type the name of any of the attributes or fields of the collection class so we can say ID equals 1 we can also use our lookup types so we can add two underscores followed by a lookup type like greater than or range and then we can set this to a topple of let's say three values so with this we get all the product in any of these collections okay so these were the lookup types for dealing with numbers now let's look at an example involving a string so I'm going to remove this argument so let's say we want to find the products that contain coffee in their title so over here we can type two underscores and use the contains lookup type we set this to coffee and with this we don't get anything because this lookup type is case sensitive so to perform a case insensitive search we have to use I contains now take a look so here are are all the products that have coffee in their title now we also have starts with ends with as well as their case insensitive variation okay now for dates we have a bunch of lookup types so let's say we want to find all the products that were updated in 2021 so last update double uncore here we can use year and set it to 2021 now take a look so this is what we get so we can extract individual comp components in a date like year month minute second and so on we can also compare this with a date value not something we use that often and the last lookup type I'm going to cover here is checking for null so to get all the products without a description we can say description Dore is null equals true we don't get anything because all of our products have a description okay now it's your turn I've attached a PDF below this video in that PDF you're going to find a bunch of exercises and their Solutions so make sure to do this exercises before moving on to the next lesson where we talk about complex [Music] filtering all right let's see how we can apply multiple filters so let's say we want to find all the products with inventory less than 10 and unit price less than 20 there are a couple of different ways to implement this way one way is to pass multiple keyword arguments here so we can say inventory less than 10 and here we pass a second keyword argument and say unit price less than 20 so let's go back to the browser refresh here are the products we get let's look at our SQL query so here's our select statement as you can see in the work class we have two conditions combined using the and operator okay now there is another way to write the same query instead of passing multiple keyword arguments we can chain the call to filter method so I'm going to remove the second keyword argument so here we have the filter method the filter method returns a query set now we can get that query set and apply a second filter on it so here we can say unit price less than 20 now here we get a new query set which we store and this object and the moment we call the list function this query set will get evaluated so if we go back to the browser and refresh we get the same result as before so let's take a look at our query so exactly like before where we have two conditions combined using the and operator now how can we combine these conditions using the or operator well to do that we have to use Q objects back to our code first we need to import the Q class from Django so from django.db Models import Q so Q is short for query and using this class we can represent a query expression or a piece of code that produces a value okay so using this Q class we can encapsulate a keyword argument so let me remove all this code and start from scratch so we want to combine these conditions using the or operator so here here we say filter now instead of passing a keyword argument here we're going to pass a q object so we create a q object and right here we pass a keyword argument so we say inventory less than 10 so each Q object encapsulates a keyword argument or a query expression now we can combine this Q object with another q object using the bitwise operators so if we use the bitwise or operator this will translate to a log iCal or in a SQL query so here we pass a second Q object and at the second condition unit underline price less than 20 now let's save the changes so here's what we have implemented back to the browser refresh let's look at our query there you go so two conditions combined using the or operator beautiful now back to our code here we can also use the end operator but this syntax is a little bit too verose if you want to combine multiple conditions using the and operator we don't really need Q objects we can simply pass multiple keyword arguments to the filter method just like before like here we can also negate a q object so this will translate to the not operator in SQL so when we execute this we'll get all the products whose inventory is less than 10 and their unit price is not less than 20 okay so this is how we can build complex lookups using Q objects next we're going to talk about referencing Fields using F [Music] objects sometimes when filtering data we need to reference a particular field for example let's say we want to find all the products where their inventory equals their unit price now I know this doesn't really make sense in terms of a business rule but let's just imagine that we want to compare two f so here in the filter method if we say inventory equals unit price we get an error because unit price is not a valid value for this keyword argument where is unit price defined we don't know right now if we convert this to a string that's not going to work either because the inventory field is a number and we cannot compare a number with a string so to solve this problem we need to use an F object so first on the top from the same models module we're going to import the F class now using this class we can reference a particular field that's why it's called f so over here we're going to create an F object and in the Constructor we're going to pass the name of a field okay so let's run this query and see what we get refresh obviously we don't have any products that satisfy this criteria but let's look at our SQL query so over here look at the work Clause we are finding products whose inventory equals their unit price now using F objects we can also reference a field in a related table for example here we can say collection _ ID and with this we'll compare the inventory of a product with the idea of its collection okay so this is how we can reference Fields using F objects pretty simple next we're going to talk about sorting data [Music] all right let's talk about sorting data so here we have this order by method that I briefly mentioned before using this method we can sort the result by one or more fields for example here we can get all the products and sort them by their title in ascending order take a look so save and refresh there you go so all the products are now sorted in alphabetical order beautiful now let's look at the SQL tab so here's our query now with this implementation we have an order by clause for sorting the products by their title in ascending order if you want to change the sort direction we simply add a negative sign here that we can also sort by multiple fields for example we can sort by unit price in ascending order and then by title in descending order so with this implementation we're we're going to sort our products from the cheapest to most expensive ones and if you have multiple products with the exact same price within that group our products are going to be sorted by their title in descending order okay now the order by Method returns a query sell object and one of the methods of query sets is reverse so if we call the reverse method here this will reverse the direction of the sort so with this implementation we're going to sort the products by unit price in descending order and then by title in ascending order now we can also call the order by Method after filtering data because the filter method returns a query set object and orderby is one of the methods of query set objects so here on query set API reference over here you can see all the methods of query set objects so we have filter exclude order by and so on so as an example we can filter all our products to get products in collection one and then sort them by their unit price pretty straightforward now sometimes we want to sort the result and pick only the first object so let's remove the filter method here we're simply sorting our products by their unit price and then we're going to pick the first product so with this implementation we're not going to get a query set because we're accessing an individual element so up to this point when we call the order by Method we get a query set object but the moment we access an individual element in this query set the query set gets evaluated and then we get an actual object so we should rename this variable to product and of course we need to make a change here because we're not going to convert this to a list so instead of products we're going to pass product to our context and of course we need to change our template played to accommodate this but let's not worry about that in this video what I want to show you instead is a convenience method called earliest so another way to rewrite the same query is like this instead of order by we can call the earliest method to sort the result by unit price and get the first object so with the second implementation we're not going to access an individual element because the earliest method returns an object in contrast order bu returns a query set now similarly we have another method called latest which sorts the products by unit price in descending order and then it will return the first object okay so this is all about sorting data next we're going to talk about limiting [Music] results so our product table has a thousand products now quite often we don't want to show all these products to the user in one list we want we want to show pages of products so let's say our page size is five and we want to show the products on the first page to do that we use Python's array slicing syntax so if you type colon 5 here this is going to return the first five objects in this array so more accurately we're going to get objects at these indexes 0 1 2 3 and four so excluding five okay now let's go back to the browser and refresh so here are the first five objects or first five products now let's look at the SQL tab so now in our query we have the limit clause for getting the first five products now to get the products on the second page we can start from five and finish before 10 so this is going to return the product objects at these indexes 5 6 7 8 and N now refresh with this implementation our query is going to have an additional Clause so we have limit five followed by offset five for skipping five [Music] records so you have seen that when we query objects by default all of their fields are read from the database but what if your only interest set in a subset of these fields for example look at our product table our product table has a bunch of fields or columns some of these columns like the description column contains a lot of text what if we don't care about the values in this column what if we only want to return the ID and the title of each product to the user this is where we use the values method so we call the values method and specify the fields we want to query let's say ID and title now refresh we get the same result as before but look at our query with this implementation we're only reading the ID and the title of each product okay now we can also read related fields for example we can go to the collection and read the title field so using the double underscore notation we can access the related field now let me show you something interesting so back to the browser refresh let's look at our query one more time with this implementation now we have an inner join between the product and the collection tables because we reading a related field so this is how we can use the values method now one thing you need to know about this method is that with this method instead of getting a bunch of product instances we get a bunch of dictionary objects let me show you what I mean so let's go to our template instead of rendering product. title let's just render the product object itself so save and refresh see what's happening so each object in the result is a dictionary it's not a product instance so in this dictionary we have three key value pairs we have ID title and collection Dore title now we have another method called values list and with this method we get a bunch of toppos instead of dictionaries so take a look refresh now each object is a topple of three values so here we have the ID followed by the title of the product and the title of the collection now here's your exercise I want you to write a query to select products that have been ordered and sort them by their title now let me give you a hint before we get started so in our database we have this product table that contains all the products in our system but not all products have been ordered so to find the products that have been ordered you need to go to the order item table here we have a column called product ID you need to select all these values all these product IDs and use them as an argument when filtering products so spend a couple minutes on this then come back see my solution all right the solution as we said we should start with the order item table so first we go on the top and import the order item class now we go to order item the object now here we need to select all the product IDs from this table so this is where we use the values or values list method it doesn't really matter so I'm going to go with values because it's shorter so we go to values next we go to the product field and select the ID field now we can also use a single uncore because Jango will automatically create this field for us at runtime so even though we didn't declare a field called product ID on the order item class look we only have product right but angle will automatically create a field called Product underline ID at runtime and essentially this is our foreign key field okay so back to our query we select product idas and store the result in query Set Let's test our implementation up to this point so here in the browser this is what we get a bunch of dictionaries and as you can see we have a lot of duplicates now before I show you how to resolve duplicates let's look at our query so we have a simple query for selecting product ID from the order item table beautiful now to get rid of duplicates here we can use the distinct method so values returns a query set and distinct is another method of query set objects with this let's go back to the browser and refresh we no longer have duplicates beautiful now the last step we want to go to the product table and select all products with these IDs very simple so we're going to say product objects filter ID double uncore in so here I'm using the in lookup type to find all products whose ID is in a given list and we're going to set this to this expression over here where we select product IDs from order item table so cut move it here and we're going to set the query set right here so this is the end result let's see what we get in the browser so refresh we get a bunch of product objects so product with ID 1 four five and so on now let's go to our template and render the title of each product so instead of rendering the product we're going to render product. title and there you go so here's the list of products now the last thing we need to do is sort the list so after we filter our products we're going to call the order by method to sort the products by their title now take a look here's the final result these are the products that have been [Music] ordered so in the last lesson you learned how we can optimize our queries by specifying the fields we want to query now we have another technique called deferring in fields so we have a method called only and with this method we can specify the fields we want to read from the database let's say ID and title now you might be wondering how this method is different from the values method well with the only method we'll get instances of the product class whereas with the values method we'll get dictionary objects okay now let's save the changes back in the browser refresh so we get the same result as before let's look at our SQL tab so here's our query pretty simple we're selecting the ID and title from the product table great so this is how the only method works now you got to be careful with this method if you don't know what you're doing you will end up with a lot of queries sent to the database under the hood let me show you what I mean so let's go to our template and after the title of each product render its price so we had a dollar sign here followed by two braces and here we render product. unit underline price let save back in the browser refresh look what's happening our application is freezing so it's going to take several seconds until we see the result all right here's the result now let's look at our SQL tab how many queries do we have here 1,002 let's see what's going on here so here's our main query where we read the ID and title from the product table now after the main query for each product you have a separate query to read its price so look at this query here you're reading the ID and unit price from the product table where ID equals 1 we have a similar query for every other product in this list so because we have a th products in this list we have a th000 extra queries for reading the price of all these products this is what I was talking about so you have to be careful when using the only method if you don't know what you're doing you'll end up with a lot of extra unnecessary queries now we don't have this problem with the values method because with the values method we get dictionary objects and these dictionary objects don't have this Behavior so if you access a field that doesn't exist in a dictionary that dictionary is not going to issue a query to the database okay now we have another method which is the opposite of the only method and that is called defer with this method we can defer the loading of certain fields to later so let's say our product table has a bunch of columns you're interested in all of them except the description field so we can defer this to later but once again you have to be careful so if somewhere else you have let's say a for Loop and in that Loop you're iterating over the products and rendering the description of each product once again you're going to end up with all those extra queries [Music] sometimes we need to preload a bunch of objects together for example here we're loading all the products now let's go to our template and render the collection of each product next to its title so here we add a hyphen followed by two braces to render product. collection. tile now save back in the browser refresh look we have the same problem as before our application is hanging because Jango is sending a thousand extra queries to the database to read the collection of all these products because when we ask for products D Jango is only going to quate the product table it's not going to query the related tables unless we specifically instructed to do so so here we want to pre-load the products with our collection to do that before we call the all method we call Select related and here we specify the field we want to preload so that field is collection then we call the all method now back to the browser refresh our products loaded instantly now let's look at our SQL tab so here's our query see what's going on here we're selecting all these fields from the product table followed by these three fields from The Collection table and and here we have a join between product and collection so when we use the select related method Jango creates a join between our tables now we can also expand relationships so let's say collection has another field that we want to preload as part of this query so we add two underscores here and then type the name of that other field okay so this is Select related now we have another method called prefetch related so we use select related when the other end of the relationship has one instance like in this case a product has one collection right but we use prefetch related when the other end of the relationship has many objects what is an example of that the promotions of a product so let's go to the product class real quick look each product has one collection but it can have many promotions so to preload the promotions we use the prefetch method so back to our playground I'm going to replace this with prefetch related and the field we want to preload is promotions now before we go back to the browser I'm going to go back to the template and remove the collection of these products otherwise we're going to end up with all those extra queries so save now refresh all right let's look at our SQL tab so now we have two queries here's the first query to read all these columns from the product table now after that we have another query to read the promotions of these products so we reading three columns from the promotion table and we have a join between promotion and product so essentially we have two result sets the first set includes the products the second set includes promotions Jango reads these sets and then populates are objects in memory now we can also combine these two methods so let's say we want to load all the products with their promotions and collection so after the call to preface related we can call Select related to load the collection of each product so both these methods return a query set and that's why we can chain all these methods to build a complex quer okay now the order of these methods doesn't really matter so we can put select related first or less it doesn't really make a difference so now let's save the changes and add the collection back in our template so product. collection. tile now let's test the result great so we see the collection of all these products now in our SQL tab we have two queries the first query is to read all the products and and their collection so here we have a join between product and collection and the second query is to read the promotions of all these products all right here's your exercise I want you to write a query to get the last five orders with their customer and items including the product reference in each order item so pause the video spend a couple minutes on this then come back sa my solution all right here's the solution you want to get a list of orders so we should start with the order class then we go to objects now we want to preload these orders with their customer so this is where we call Select related to preload the customer field now we don't want to show all the orders we want to show the last five orders so first we need to sort them by place that in descending order so the latest orders come first and then we use array slicing syntax to pick the top five orders okay now let's test our implementation up to this point so we store the result in query set and then to keep our code clean we should change the name of this key from products to orders next we go to our template and rename products to orders and product to order now here we can render the idea of each product followed by let's say the first name of the customer so two pairs of braces to render order. customer. first name save now here we can see the last five orders and their customer beautiful let's look at our SQL tab to make sure we don't have any extra queries so we have a single query to read the orders and their customer so we're selecting all these columns from the order table followed by all these columns from the customer table and here we have a join between order and customer tables great so let's move on to the next step now we should preload the items of these orders so here we call prefetch related because each order can have many items now what is the name of the field we're going to query well let's have a quick look at our order class so each order has three Fields place at payment status and customer we don't have a field called items but look at the order item class here we have order which is a foreign key to order so Jango is going to create the reverse relationship for us now what is the name of that relationship that is order item underline set this is the convention that Jango uses to create the reverse relationship if you don't like this name you can set it using the related name argument so over here we can set related name to items so with this implementation the order class is going to have a field called items now I don't want to set this because we're going to end up with inconsistency in our code and I don't want to change the name for every relationship so for the purpose of this exercise let's go with jango's convention so back to our playground we want to prefetch order item underline set so the name of the target class in lowercase followed by an underscore and set okay let's see what we get after this point so refresh our page loaded instantly let's look at the SQL tab we have one extra query to load these order items so we're loading order items for orders in this list so everything is fine so far now the last step is to load the product referenced in each order item so over here where we are prefetching the item we can span the relationship by adding two underscores and then we type the name of the Target Field which is product save now refresh let's look at our query one more time now we have one extra query to read the products referenced in these order items so we reading all the columns from the product table where the idea of the product is in this list and this list is the list of order items we have queried so far so this is how I want you to write code write a little bit of Code test your code make sure everything works before doing a big step with this technique we can prevent a lot of crazy issues down the [Music] road sometimes you want to compute summaries like Max or average price of our products this is where we use the aggregate method so we call product. Objects do Aggregate and here we pass an aggregate object so first on the top we import an aggregate class so from django.db models. aggregate we import one of these classes so we have count we have Max Min average and sum so let's say we want to count our products here we create a count object and specify the field we want to use for counting if we use ID we can count the total number of products because every product has an ID but if we use a different column let's say description and assume that description can be null this will count the number of products that have a description okay so the proper way to count the total number of Records is to use the ID or the primary key field now the aggregate method doesn't return a query set because once we calculate a summary value it doesn't really make sense to do anything extra with it we're not going to add filters or sort data and so on so here we get a dictionary let's call that result and add that to our context object over here so I'm going to add a new key called result and set it to result okay now we go to our template and I cleaned up the code from the previous lesson so we don't have a for Loop for rendering the list of orders so right after our hello word message we can render the result object now let's see what we get refresh so we get a dictionary with one key value pair look at the name of the key it's idore count because we use the ID column for counting objects and as you can see we have a th000 products in this table now we can easily change the name of this key so back to our code over here we can pass a keyword argument we can say count equals this now take a look so the key is us name pretty simple now we can also calculate multiple summaries so in addition to the total number of products we can also calculate the minimum price of our product so we can pass another keyword argument say Min price and set it to Min of unit underlying price so here's what we have we have two keyword arguments count and Min price let's see what we get in the browser so refresh there you go M price is a decimal object with this value now one last thing before we finish this lesson since aggregate is one of the methods of query sets we can apply it wherever we have a query set so we can filter our products and pull out the products in a given collection let's say collection number one and then calculate these summaries over that data set all right so that's all about aggregating objects now I've attached a PDF below this video where you can find a bunch of exercises and their Solutions make sure to do these exercises before moving on to the next [Music] lesson sometimes we want to add additional attributes to our objects while quing them this is where we use the annotate method so we go to customer. objects and call the annotate method now let's say while cing customers we want to give each customer a new field called is new and we want to set it to true so let's get the result and store it in a query set now in our context object I'm going to add a new key value pair called result and set it to list of query set now in our template we are not doing anything in this lesson so let's just focus on the code here now here in the browser refresh we get this error saying query set. annotate received nonone expression what this error is telling us is that we cannot pass a Boolean value over here we need to pass an expression object so in Jango we have this expression class which is the base class for all types of Expressions derivatives of this class are value for representing simple values like a number a Boolean a string we have F which you have seen before using the F class we can reference F field in the same or another table right so an F object is essentially an expression object we also have funk for calling database functions so all these database engines have a bunch of functions for manipulating data to call those functions we use a funk object I'm going to show you that in a second we also have aggregate which is the base class for all aggregate classes so those aggregate classes you learn about like count sum Max and M all these classes derive from the aggregate class okay so let's go through a few examples so back to our code we cannot pass a Boolean value here we need to pass an expression object the simplest expression object is a value object so on the top from Jango db. models we're going to import the value class and now we're going to wrap this value inside a value object so we pass value of true okay now save take a look no more errors let's look at our query so I'm going to execute this query so in the list of customers now we have a new column called is new which is populated by one which is the numeric equivalent of a Boolean true so when Jango read this data it's going to give each customer a new field called is new and it's going to set it to True let's look at another example this time we want to give our customers a new field called new ID and for this demo we want to set this to the same value as the ID field so we need to reference another field in this model to do that first we need to import the f-class from django.db do models and then over here we can reference the ID field now let's run our query one more time so take a look now we have a new column called new ID which is populated with the same value as the primary key now we can also perform computations here so for example we can add one to the ID to generate the new ID now take a look so now the new ID is the original id+ [Music] one all right now let's see how we can call a database function so from the same module we're going to import the font class now we're going to give our customers a new field called full name and this is where we're going to call the concat function of a database engine so pretty much all database engines have this function for concatenating Strings so here we're going to create a funk object and give it a bunch of arguments so we want to specify two Fields here first name and last name how can we reference Fields using F objects so F of first name and F of last name name next we need to give this a keyword argument that specifies the target function so we set function to concat okay now if we run a query first name and last name are going to be concatenated but we also need to add a space in between so we cannot pass a white space here we need to pass an expression object so we need to wrap this inside a value object okay now let's run our query and see what we get so refresh and here's our query take a look so in our query we are selecting all these columns from the product table but we also have a new computed colum using the concat function of MySQL so we're concatenating first name with a space and last name and here in this table we have the full name of each customer great now there is also a shorthand to achieve the same result so back to our codee first we're going to import the concat class from Django so from django.db Models functions we're going to import the concat class and then we're going to use that class instead of a fun class so let me duplicate this query so you can compare them side by side in the second implementation we are not going to create a funk object we're going to create a concat object now here to specify our Fields so first name and last name now note that over here I'm not wrapping this Fields inside an F object so that is the benefit of using the concat class but to add a white space we need to wrap it inside a value object because otherwise Jango thinks this is a column in our table so let's wrap this inside a value object good now unlike the first method we don't have to specify the target function because that is reflected in the class itself so the code is shorter and gives us the exact same result now if you're curious about D Jango database functions just Google Django database functions on this page you can see various functions in different categories for example we have a bunch of functions for working with dates we have mathematical functions we have functions for manipulating text and so on these functions are common across all database engines but different database engines have their own unique functions so to call those functions you have to go back and use a funk [Music] object now let's say we want to see the number of orders each customer has placed so we're going to annotate our customers with a new field called orders count and here we're going to use the count class now look vs code offers to automatically import this class for us so we just press enter and it's imported on the top now let me show you a shortcut we can also import the count class from the models module and with this we can avoid an extra import statement now what is the difference between these two classes nothing the models module simply Imports the count class from the Aggregates module and then re-exports it okay so let's delete this line good so we create a count object now what field should we use to count the number of orders well let's go to our customer class so our customer has these fields but we don't have a field called orders so let's look at the order class here we have customer which is a foreign key right and you know that with this implementation Jango is going to create the reverse relationship for us so here in the customer class we're going to have a field called order under underline set so the singular name of the target class followed by underline set and this is all in lowercase now for some reason that is known to Jango developers we cannot use this name to count the number of orders for each customer let me show you what I mean so back to our playground if we type order underline set here we get an exception look cannot resolve keyword order set into field our choices are address birth date email first name ID last name membership order and phone so the name of the field that we should use for counting is order why honestly I don't know so back to our code let's change this to order and rerun our query great now let's look at our query so now we are selecting all these fields from the customer table and we're also counting the number of orders now look we have a left join between customers and orders because not every customer has an order now if you're not familiar with left joints you really need to look at my SQL course I cover this in detail there and finally we have a group by clause for grouping the number of orders for each customer so if you run this query we can see the number of orders for each customer so let's quickly recap what you have learned so far we talked about the expression class which is the base class for all types of Expressions derivatives of this class are value for representing simple values like a Boolean a number a string we have f for referencing Fields funk for calling database functions aggregate which is the base class for all aggregate classes like count sum and so on now in this lesson we're going to talk about another derivative of the expression class CL called expression wrapper we use this class when building complex Expressions so here's an example let's say we're going to annotate our products and give them a new field called discounted price so here we're going to get the unit price and multiply it by let's say 0.8 now if we run this query we're going to get an exception so take it look so we get this error saying expression contains mix types because we have mixed a decimal field which is our unit price field with a float field which is our 08 number now the area is saying that we must set the output field so to solve this problem first we need to import the expression wrapper class from the same module from the models module now we should wrap this expression inside an expression wrapper object and that's where we specify the type of the output field so so to keep our code clean I would prefer not to wrap this expression right here I would prefer to create an expression wrapper object over here then we move this right here and as the second argument to the Constructor of this class we specify the output field so we need to decide what is the type of the output field for monetary values we should always use a decimal field because float Fields have a rounding issue and are not very accurate so back to our code we set the output field to a decimal field object so make sure to create an object we're not simply passing the name of the class we're creating an object okay now we can store the result in a separate object like discounted price and then use that over here now let's run our query okay no more error so let's see what is sent to the database there you go we have a new computed column which takes the unit price and multiplies it by8 so this is how we can use expression wrapper objects now once again there is a PDF below this video where you can find a bunch of exercises and their Solutions so spend a few minutes on those and then come back see the next lesson [Music] all right let's talk about querying generic relationships so earlier in the course we created the tags app with two models we have tag and tagged item now if you remember we decided to use the content type framework to decouple this app from the store app so this app knows absolutely nothing about the store app it doesn't know we have a model called Product so with this decoupling we can reuse this app in any kind of project tomorrow we can use it to tag articles block posts videos and so on but now let's see how we can find the tags for a given product so let's go to our database and look at this table Jango content type in this table we can see all the models we have in our application so in the admin app we have a model called log entry we didn't create this this is built into the admin app that comes with every Jango project similarly in the off app we have three models group permission and user in the likes app we have a model called liked item and in the store app we have all these models that we have defined so far okay so this is the content type table now let's look at the tagged item table in the tags app so here we have a few columns object ID content type ID and tag ID so to find the tags for a given product first we have to find the content type ID of the product model so in this table currently in my database we have the product model and the content type ID for this model is 11 so once we find this then we can go to this table and write a query to filter all records where content type ID equals 11 and object ID equals the ID of the product whose tags you want to find out that is the big picture now let's implement this in code so back to our playground first we have to import a few classes from Jango contri content types. models we're going to import the content type model this is the model that represents the content type table that you just saw then from store. Models we're going to import the product class and finally from the tags. models module we're going to import the tagged item class now first we need to find the content type ID for the product model so here we say content type doobs so because content type is a model it has the objects attribute just like all the models we have created so far now here we have a method called get for model this is a special method that is only available in this manager remember I told you that the objects attribute returns a manager object which is a gateway to the database so content type manager has a special method called get for model so we call this method and give it our product class now we get a content type instance now more accurately this object represents this Row in our content type table so this is how we can find the content type ID for the product model now you might be wondering why we're not just using the number 11 because we cannot rely on these numbers in your database in your development database the content type ID for product might be 11 but in your production database it might be something else that's why first we have to find the content type ID for the product model now that we have this we can use it to filter tagged item so we say tagged item. objects filter you're going to give it two filters first is content type which we set to our content type object and then we set object ID to the idea of the product whose tags you want to query let's say product number one this should be calculated dynamically for example depending on the product that the user is looking at we're going to get the product ID from the URL and pass it here but for now let's not worry about that part so this will return a bunch of tagged item objects now back to our database look at our tagged item table in this table we have a field called tag ID which is a foreign key to the tag table so the actual tag is not stored here it's stored in this other table so we need to pre- load this field otherwise we'll end up with a lot of extra queries to the database so back to our code here we're going to call Select related to preload the tag field now let me show you a better way to format this code it's getting a little bit ugly so we can put this on a new line now we get an error because python interpretor doesn't know that this line is the continuation of the first line to solve this problem we add a backs slash here and now the error is gone so I would like to indent this line and then one more time we put filter on a new line and add a back slash here and then format our code like this I think this is nicer especially when you're building a complex query by chaining a bunch of method cost here so this returns a query set let's get it and now we can add a new key value pair in our context object so we can call that result or we can call it tags and set it to list of our query set list of query set now let's run our query and see what happens so refresh good no errors so we have two queries the first query is for finding the content type ID for our product model and the second query is for reading the tags for a given product like currently we don't have any data in these tables but if you're curious you can just populate these tables and render the the tags on the page so this is how we can get the tags for a given product now in the next lesson I'm going to show you how to encapsulate this logic inside a custom manager so our code is cleaner and easier to work [Music] with so our tags app is decoupled from the store app but writing code like this is not ideal every time you want to find the tags for a given object first we have to find the content type then we have to go to the tag item model we have to preload the tag field and apply a filter there must be a better way so wouldn't that be nicer if you had a method like tagged item. objects. G tags for product one obviously calling this method is much nicer and cleaner than writing all this code so let me show you how to implement this method to do this we have to build a custom manager for the tagged item model so we want to replace the default manager that is returned from the objects attribute we want to replace that with a custom manager so let's go to this class before this class we have to create a custom manager so class tagged item manager this class should inherit from the manager class in the models module so this class is the base class for all managers now here we're going to implement that custom method so get tags four now the first parameter should be self so this becomes a method of this class we also need two more parameters object type and object ID now let's go to our playground and grab all this code and move it to our new method okay let's fix the indentation good now we're going to replace product with object type and one with object ID as simple as that now finally we're going to return this query set so we can return it right away so we're done with this now we need to use this manager in the tagged item model so here's the tagged item class I'm going to add a new attribute here called objects we're going to set it to an instance of the tag item manager class as simple as that now we can go back to our playground and use this new method to get the tags for a given object like a [Music] product all right let's talk about the caching mechanism built into query sets so let's call product. objects. all and store the result in a variable called query set now you know that when we convert this query set to a list Jango is going to evaluate this query set and that's when it's going to go to the database to get the result now this is an expensive operation because reading data from the desk is always slower than reading it from the memory so when Jango evaluates this query and gets the data from the database it's going to store it somewhere in memory called the query set cache so the second time we convert this query set to a list Jango is not going to evaluate this query again it's not going to go to the database it's going to read the result from the query set cach let me show you so back to the browser refresh now let's look at our queries look we have a single query for reading the products so the second time we convert this query set to a list D Jango is going to read the result from the query set cache now the same thing happens if we access an individual element from this query set again Jango is going to read this object from the query set cache now one thing you need to know about caching is that caching happens only if we evaluate the entire query set first for example over here first we're evaluating the entire query set and then accessing an individual element in contrast if you accessed an individual element first and then converted our query set to a list you would end up with two queries to the database take a look so save refresh and look here we have two queries with the first query you're reading the first product in this table and with the second query you're reading all products so keep this in mind even though caching is a great optimization technique if you don't structure your code properly caching is going to come back and bite you so this is all about caching next we're going to talk about creating [Music] objects so far we've been only quering data now let's see how we can insert a record in the database so let's create a collection object and set his title to let's say video games now every collection has a featured product which is optional so we don't have to set it but let me show you how to set this field and create a relationship there are basically two ways to set this field we can set this to a product object like the product with ID one here we could also use PK and with this we don't have to remember the name of the primary key field so it can be ID code or whatever now the second way to set this field is like this we can set collection. featured product ID to one so we can either use a product object or use the value of the primary key field now either way this product should exist before we can create this collection in other words we cannot create this collection and this product at the same time this is how relational databases work the parent record should exist before we can create the child record right so assuming that we have a product with this ID now I'm going to remove the last line and set the feature product to a product object okay now there's another way to initialize this collection instead of setting these fields individually here we can set them using keyword arguments when creating a collection object so here we can set title to video games now there are a couple of problems with this approach one problem is that if you noticed here we didn't get intellisense so as it was typing title look we are not seeing the name of this field we're just seeing the name of other classes imported in this module so that's the first problem in contrast when we use the dot operator look here we can see that the fields in this class okay the second problem with using keyword arguments is that these keyword arguments don't get updated if you rename these fields let me show you what I mean so let's go to the collection class and for name the title field to name now back to our playground see what happened the title field is updated here but not over here so the keyword arguments don't get updated that's why I personally don't like this approach even though sometimes it can make your code shorter so let's set the fields individually here now to insert this collection our database all we have to do is call the save method so every collection has this method method for saving data now in this case because we haven't set the ID of this collection D Jango will treat this as an insert operation so it's going to create this collection okay now there is another way to write this code there's a shorthand so instead of writing these four lines we can call collection. objects. create and here we have to set the fields using keyword arguments so we set name to whatever and featured product look again we don't have intelligence so we can set feature product ID to one so the create method is available in the manager object and what happens inside this method is exactly what we have on the top so this method is going to create a collection object it's going to initialize this object based on these keyword arguments and then it's going to call the save method to insert this collection in the database and of course at the end it's going to return the actual ual collection object so either way here we can read the idea of this new collection that's going to be available here as well so the second approach appears shorter but again here we have the problem with our keyword arguments so if you rename this Fields our code is not going to get updated so I always prefer to use the traditional approach and before we finish this lesson let's go back to our collection class and rename this field back to title good so let's make sure everything works up to this point save back to the browser refresh now let's look at our query so we have an insert into statement for inserting a new collection with these [Music] values all right let's talk about updating objects so here we have this collection now to update it all we have to do is set its ID or primary key so in my database this new collection that we created it's ID is 11 so I'm going to set PK to 11 and by the way even though I'm using a keyword argument here this is not going to be an issue in the future because if tomorrow we decide to rename the ID field to something else our code is not going to break PK will always work okay so here we have an existing collection now let's set its title to games and featured product To None save refresh good let's look at our query so here we have an update statement for setting the title and featured product ID perfect now let me show you something tricky let's say we only want to update the featured product for this collection so we don't want to set the title save refresh and look at our query one more time now something crazy is happening here can you tell look at this line Jango is setting the title of this collection to an empty string and this causes data loss so as part of updating this field we end up losing the title for this collection but why does this happen here's the reason this collection object that we have in memory by default is title is set to an empty string so even if we don't explicitly update this field Jango is going to include it in our SQL statement and this is where Jango is different from some of the other RM you might have worked with some other orms out there have this feature called change tracking so the SQL statement that is generated here will be based on the fields that are updated so to properly update an object in Jango applications first we have to read it from the database so we have all the values in memory then we can update it so over here instead of creating a collection object first we have to get it from the database so get PK equals 11 good now we have a collection with all the values so we can update certain Fields I am might worry that reading this object first may cause a performance penalty but speaking from experience I'm telling you this is not an issue in most cases so don't try to prematurely optimize your code always profile first see if you really have a performance problem in this part of code before optimizing it okay so once again reading this object first before updating it is not an issue in most cases but let's say in your application you really have a performance problem in this part of your application so let me show you how we can avoid this extra read in the previous lesson we talked about a convenience method called create so collection. objects. create now on this manager we have a similar method called update for updating objects and with this method we can avoid reading this collection first before updating it so we can update it directly in the database so we call this method and pass one or more keyword arguments so here we can set featured product to n and that means here we have that problem with keyword arguments that I told you about so with this new method we can avoid reading an object first but at the cost of making our code a little bit fragile okay now this update method will update this field for all objects in our query set so if we use it like this it's going to update the featured product for all collections in the collection table but here you want to Target a particular collection so before calling the update method first we have to filter to get the collection with the id1 and then we can update its featured product so let me comment out this VI lines and run our code one more time refresh good so take a look with this new implementation our update statement is only setting the featured product okay all right that's it for this lesson next we're going to talk about deleting objects [Music] all right let's talk about deleting objects again we have two options here we can delete a single object or multiple objects in a query set so if you have a collection we can delete that collection by calling collection. delete pretty straightforward now to delete multiple objects first we need to get a query set for example we can say collection. object. filter let's let say we want to delete all collections whose ID is greater than five so here we say ID greater than five this returns a query set now on that query set we can call the delete method to delete all these objects in one go so these are two ways to delete objects in Jango now it's your turn download the PDF below this video and spend a few minutes on the exercises when you're done come back see the next lesson [Music] sometimes we want to make multiple changes to our database in an atomic way meaning all changes should be saved together or if one of the changes fails then all changes should be rolled back a typical example is saving an order with his items so let's create an order object here we should set the customer or the customer ID field and then save the order before we can save its items this is how relational databases work we should always create the parent record first before we can create create child records okay now after this we can create an order item here we should set a few field first we should set the order to the order that we just created then we should set the product or product ID we should also set the quantity and unit price with all this now we can save this order item now imagine while saving this order item something crazy happens we get an exception what's going to happen our database is going to be in an inconsistent state so we'll have an order without an item we don't want this to happen so this is where we use a transaction so we're going to wrap both these operations inside a transaction and either both of these will be committed together or if one of these operations fails then both changes are going to get rolled back so on the top from django.db package we're going to import the transaction module now in this module we have a function called Atomic which we can use as a decorator or a context manager so we can apply it as a decorator to this view function and this will essentially wrap this entire view function inside the transaction so all the code that is here will be run inside a transaction okay now sometimes you want to have more control over what parts of your view function need to be inside a transaction in those cases you can use this as a context manager so I'm going to remove move this decorator from here let's say we want to wrap these lines inside a transaction but let's say we have some other code here that is not going to be part of a transaction so we're going to leave this out and then wrap the rest of the code inside a width block so we say width transaction. Atomic this returns a context manager now we need to indent this code good now let's test this so I'm going to run the code refresh good so now in our database let's open a new query console and say select everything from store underly order and order by ID in descending order so here's our new order order 101 in this case both the order and its item were saved successfully but to demonstrate an exception let's go back to our code and set product ID toga1 so we're going to get an exception here because we don't have a product with this ID now back to the browser refresh so here's the Integrity error that we just got now let's look at our database so since we have wrapped both these operations inside a transaction now we should not have a new order because we couldn't save its item take a look so I'm going to rerun this query see there is no new order here so this is how transactions work [Music] all right we covered a lot about Jango RM the last thing we're going to cover in this section is executing raw SQL queries so sometimes implementing certain queries using D Jango RM can get overly complex you might end up with crazy annotations or filters in those cases you can always write your own query by hand and execute it directly using Jango RM let me show you so we're going to call product. objects. RA so every manager has this raw method for executing raw SQL queries so we call this and give it a query like select everything from store underline product so Jango is going to execute this query then it's going to map the column names to Field of product objects and return a bunch of products well more accurately it's going to return a raw query set so we're going to get a query set but this query set is different from the other query sets you have seen so so far so here we don't have the filter method we don't have annotate because these methods don't really make sense here okay so for this demo I'm going to add a new key in this context object called result and set it to list of query set now back to the browser refresh so here is our query great now a few things I need to highlight here in this case there is really no point writing this query because Jango can perfectly generate this for us so use this approach only when dealing with complex queries if you end up with complex annotations and filters and realize writing the same query using raw SQL is easier and cleaner then go for this approach or if the query that Jango generates doesn't perform well then again this is another case for using this approach okay now here we can also specify column names so instead of selecting all columns we can select title and Jango is going to load only these two Fields so the other fields are going to be deferred okay now sometimes we want to execute queries that don't map to our model objects in those cases we can access the database directly and bypass the model layer so instead of using the raw method we're going to use a different approach first on the top from Jango DB we're going to import the connection module in this module we have a function cursor for creating a cursor object so we get a cursor now this cursor has an execute method and here we can pass any SQL statements no limitations so we can have a select we can have insert update and delete now after executing our query we should always close the cursor to release the allocated resources so the proper way to use a cursor is to wrap it inside a tri final block so inside a finally block we close the cursor so this way if something goes wrong we don't end up with an open cursor but you know that Tri finally blocks are a little bit verbos so it's much easier to use a cursor using a width statement so let's delete these lines and say withd connection. cursor this returns a cursor object so using the as keyword we give it an identifier like cursor and now we can use this cursor inside the width block without having to explicitly close it so the cursor is always going to get closed even if there is an exception okay so this is how we can execute raw SQL queries Now One Last Thing Before we finish this lesson we also have another method here for executing stored procedures so we can call a store procedure like get customers and give it a bunch of parameters one two a whatever this is much better and cleaner than writing your SQL queries in the middle of your python code so you encap your SQL queries inside a stor procedure and then call that in Python now that really goes outside the scope of this course but I covered it in detail in my SQL course so we're done with this section in the next section we're going to talk about the admin interface welcome back to another section of the ultimate Django course in this section which is the last section of the first part of this series we're going to talk about setting up the admin interface for managing our data we talk about various ways to customize the admin interface how to add computed columns load related objects add searching and filtering Implement custom actions add data validations and more so by the end of this section we'll have a full-fledged admin interface for managing our data I'm super excited about this section I hope you too so let's jump in and get started [Music] all right the first thing we're going to do in this section is setting up the admin app so every Jango project comes with an admin interface which we can access at this address slash admin so here we have our login screen now to create a new user we have to open a terminal window and run python manage.py create super user okay now it's asking for username I'm going to use admin next we need to add the email address so programming with MOS atgmailcom and for password I'm going to use 123123 and repeat now it's complaining that the password is too short and it's not secure but for this lesson I'm not going to worry about this I'm going to bypass the validation by pressing y okay great now we have an admin user so let's log in now we get this error complaining about the session app because the admin app is dependent on the session app app and earlier in the course we removed this app by accident so we need to add it back in the list of installed apps so back to our project let's open up the settings module here in the list of installed apps we're going to add Jango cont trip. sessions and the order doesn't really matter so save now we need to run the migrate command to generate the tables for this app so back to the terminal python manage.py migr great now back to our database let's refresh take a look we have a new table here called Jango session and this table is used for temporarily storing some user data So currently it's empty because we haven't logged in the admin panel but once we log in we're going to see a new record in this table so back to the browser let's refresh good so this is our admin interface where we can manage our group group and users So currently we have a single user in this database let me zoom out a little bit so we can see things more clearly so we have this admin user with this email we have a bunch of filters on the right side we're going to talk about them soon we also have the list of groups which is currently empty so these users and groups are stored in the tables of the off app so back to our database look the off app has a bunch of tables for managing groups permissions and users so let's have a quick look at the user table here we have one record that is for the admin user the password is stored in encrypted format and here we can see the last login date and time we can see that this user is a super user which means it has all the permissions here's the username we don't have the first name and last name we can set that in the admin interface later we can see the email and here we can see is Staff which means this is an admin user for this website now if you forget your password you can always reset it in the terminal so back to the terminal we run python manage.py change password admin here we can enter a new password but I'm going to leave it out so contrl and C to exit okay now back to the browser let's go to the homepage of our admin panel so here on the top we can see D Jango Administration let's see how we can change this to something more meaningful now back to our project let's open the storefront folder and go to the URLs module now in this module all the URLs of the admin app are hooked up at this URL so any URL that starts with admin is going to be routed to the admin app okay now because the admin module is imported here on the top this is a good place to apply a bit of customization for the admin app so we can say admin Dot site do site underl header we can set it to store Front admin now save and refresh so we change the header on the top great we can also change the label here for example we can set admin. site. index title to let's say admin now save and refresh so the title is changed as well so now that our admin panel is ready next we're going to register our models so we can manage them here [Music] all right now let's see how we can register our models so we can manage them in the admin site so back to our project let's go to the store app now every Django app has this module called admin and this is where we write all the code for customizing the administration panel for that app so the first thing we need to do is registering our models for the admin site so the admin module is imported on the top here we're going to say admin. site. register let's say we want to register the collection model so on the top from the current folder we're going to import the models module and then here we can pass models. collection so back to the admin panel refresh now look we have the store app and currently only one of our models is registered in this app so we can look at the list of collections we can add a new collection or change one of the existing ones so let's look at our collection now what you see here is the default representation of a model object so we're going to change this and instead we want to show the title of each collection so back to our project let's go to the collection class now here's a question for you how can we change the string representation of an object in Python we overwrite the magic stir method so every python object has this magic method that is called when that object is converted to a string so here we type def Dore stir double uncore and press enter so this code is automatically created now what you see here is type annotation I talked about this earlier in the course this is basically saying that this method returns a string object now inside this method we have the default implementation which returns a string like this now we're going to change the default implementation and instead we're going to return self. tile now same take a look beautiful so now we can see all the collections the first collection doesn't have a name and this happened in the previous section when we were updating data so there we made a mistake and ended up storing an empty string for the collection title so let's select this and delete it yes I'm sure good now there is a problem here our collections are not sorted so let me show you how to sort them back to our collection collection class here we're going to define a metal class for specifying the default ordering of collection objects so we create a new class called meta we talked about this ear in the course and here we said ordering to a list of fields so here we want to sort the collections by their title so we add that here good now take a look beautiful all collections are sorted alphabetically now as your exercise I want you to repeat the exact same steps and register the product model so we can manage our products in the admin panel all right here's my solution so here in the admin module I registered the product model and here in the product class I overwrote the St method to return the title of each product and I also implemented this metal class for ordering the products by their title so now in the admin site we can see the list of products and as you can see our products are sorted alphabetically great so next I'm going to show you how to customize the list [Music] page now let's see how we can customize the list page so I'm going to show you how to add new columns here how to make them editable how to change the number of items and so on so back to our admin module first we need to create a new class called Product admin we could call it anything but by convention we use the name of our model model like product followed by the word admin now with this class we can specify how we want to view or edit our products so this class should inherit from admin model admin now in this class we can set a bunch of attributes to customize the list page for example we can set list display to the list of fields we want to display like title and unit price okay now that we have this new class we need to pass it while registering the product model so we say product admin this is one way but there's also a shorter way we can use the register decorator on this class so we say admin. register and here we pass models. product so we saying that this class is the admin model for the product class and with this we don't need the last line anymore so that is shorter now back to the browser refresh so look we have a new column where we can see the price of each product beautiful now we can sort by this column as well now we have two sort columns first our products are sorted by unit price and then by title if you don't want to sort by title you can just click on this icon where we can see a cross good so now our products are sorted by unit price in ascending order we can also change the sort order beautiful now imagine if you wanted to code all of this by hand it would probably take you a couple weeks if not longer so let's do some more customization another attribute we can set is list editable and with this we can specify the fields that can be edited on the list page for example if we set this to unit price and refresh now we can edit the price of a bunch of products in one go for example we can change this to 90 and this one to 95 now down the bottom we have the save button so we saved two products in one go now back to the code we can also set list per page to let's say 10 and with this we're going to see 10 products on each page so save and refresh look now we have 10 products and we have this beautiful pagination on the bottom so customizing the list page is really simple now if you want to see the complete list of options you can set here just Google Django model admin on this page on the right side over here look model admin options here you can see the complete list of options you can customize as we go through the Section I'm going to show you many of these but we don't have time for all of these so I leave it up to you to read about the other options all right now it's your turn set up this page where we can view our customers so here we have three columns first name last name and membership we can change the membership of each customer right here very handy again imagine if you wanted to code all of this by hand that would take you a really long time right so build this page over here we have 10 items per page and the default sord order is first name followed by the last name so spend a couple minutes on this then come back to my solution all right here's what I've done I've created a new class called customer admin in this class I've set list display to first name last name and membership I've set list editable to membership ordering to first name followed by the last name and list per page to 10 very very easy next we're going to talk about adding computed [Music] columns all right let's see how we can add a computed column to the list of products so here I've added a new column called inventory status if the inventory of a product is less than 10 here we see low otherwise we see okay so let's see how we can implement this so back to our product admin class in the list of fields we want to display we don't want to add inventory because otherwise we would see a number in this list we don't want this we want to get this number and depending on its value we want to return a string so here in this class we're going to define a method called inventory status with two parameters self and product so we want to take a product and depending on its inventory you want to return an inventory status so we can say if product. inventory is less than 10 we're going to return low otherwise we're going to return okay now instead of inventory we're going to display inventory status take a look so this is what we get beautiful but this column is not sortable by default because D Jango doesn't know how to sort the content of this column so to implement sorting we need to apply the admin the display decorator to this method and here we specify the field that should be used for sorting the data in this column so we said ordering to inventory which is one of the fields of the product model so back to the browser refresh now we have sorting here we can sort in ascending or descending order [Music] beautiful all right let's talk about loading related objects so here in the list of products I want to add a new column to show the collection of each product so back to the product admin class here in the list of fields we want to show let's add the collection field now because collection is a related field jangle will show the string representation of a collection here so back to the collection class remember early in the section we overwrote the stir method of this class so when showing the products for each product D Jango will call this method to get the title of the collection of that product okay so back to the browser refresh here's the collection column beautiful now let's open up Django debug toolbar and look at our queries so look we have seven queries on this page now don't worry about all these queries just look at the last one so over here we're selecting all these columns from the product table followed by these columns from The Collection table and we have an inner joint between the product and collection tables beautiful now what if you don't want to show the string representation of a collection in other words what if you want to show a particular field in this model unfortunately here we cannot use the double underscore notation to reference a particular fi like the title field now you might say Marsh what is the point of this we could see the title of the collection just by typing collection so here we get the string representation of a collection but imagine we have a special field here we want to show on this page let me show you how to do this first I'm going to remove this extra underscore so I'm going to define a method by this name Define collection title with two parameters self and product because we're rendering a a bunch of products so we're going to get a product and return product. collection. tile now back to the browser refresh let's hide this so our collection column is here beautiful but let's look at our queries one more time now this time we have 17 queries so we have 10 extra queries because for each product Jango is sending an extra query to the database to read the collection of that product so in the previous section where we talked about query sets you learn that we have a method called select related for eager loading or pre-loading the related fields now here we have a special attribute for the same purpose that is called list select related we set this to the list of fields we want to eagar load in this case collection now back to the browser let's look at our queries now we're down to seven queries beautiful so this is how we can load related objects on the list page now as your exercise I want you to set up the order page where we can see our orders and their customers so spend a couple minutes on this then come back see my solution all right let me show you what I have done so I created the order admin class to show three columns ID Place ad and customer and also in the customer class I overwrote the St method so here we're returning an F string for for combining the first name with the last name I also implemented a metal class for setting the default ordering of our customers so now anywhere we have a list of customers our customers will be sorted by their first name followed by their last name with this now we have a new page called orders and over here we can see all the orders the date and time that were placed and their customer [Music] sometimes we need to overwrite the base query set used for rendering a list page for example here in the list of collections let's say we want to add a new column to show the number of products in each collection so back to our admin module this is how we registering The Collection model currently we're not specifying an admin model so here we need to create a new class called collection admin which should inherit from admin. model admin and we should decorate this class with admin. register now here we set list display to title and products count now our collections don't have a field called products count so we need to treat this like a computed field so we Define a new method called products count with two parameters self and collection and here we return collection. products count but again our collection op objects don't have a field by this name so this is where we need to overwrite the query set on this page and annotate our collections with the number of their products so every model admin has a method called get query set which we can overwrite so here we have a couple of Errors because the generated code includes type annotations and these classes are not imported on the top so here we have two choices if you're on a Mac you can press command and period or if you're on Windows you can press control and period to import this class on the top alternatively if you don't care about type annotations you can just remove this okay so this is the get query set method with the default implementation so we're going to the base class and calling the get query set now we don't want to return this query set immediately we want to annotate it with products count now here we're going to use the count object for counting the number of products so let's press press enter to automatically import this good as the argument we're going to pass product okay now back to the page refresh and here we can see the number of products in each collection beautiful but look this column is not sortable because Django doesn't know what field to use for sorting this column so to solve this problem we need to decorate this method with admin. display and here we said order in to the name of the field that should be used for sorting in this case products count now refresh and now we can sort our collections by the number of their products [Music] beautiful all right now let's see how we can add links here so when we click on these links we can see the products in each collection so back to the products count method instead of returning a number we should return a string containing an HTML link now to generate an HTML link we should import a utility function on the top so on the top from Jango that utils HTML we should import the format HTML function now let me show you a cool shortcut under the Go menu look at the shortcut for the back command is control and hyphen so if you press control and hyphen we jump back to where we were that's pretty handy so here we're going to call format HTML and give it a format string that this is where we need to type a bit of HTML code in HTML we can represent a link using the anchor element with two tags the opening and the closing tag now in between these tags we can type the link text in this case I want to show the number of product so here we type a pair of braces and we're going to replace the braces with the number of products so we're going to pass this expression as the second argument to the format HTML function okay now for the actual link we go to the opening tag and set the HTF attribute to a string like this for now let's just send our users to google.com Okay and then return this value Let's test our implementation up to this point so refresh we get these links beautiful let's click on a link we go to Google now let's see how we can send our users to the products page so here's a products page look at the URL that is admin SL store SL product we don't want to hardcode this URL in our code because this URL can potentially change in the future so we should ask Jango to give us the URL of this page and to do that we have to import another utility function so back to the code from Django the URLs we're going to import the reverse function now let's go back to our method here we're going to call the reverse function and give it a special argument we type admin colon now here we need to type the name of our app followed by the model followed by the page so what app are we working on it's the store app what is the Target Model it's the product model because we want to send the user to the product list page right now what is the target page it's called change list so this list of products is called change list okay now let's test our implementation up to this point so we call the reverse function get the URL and replace Google with it so here we type another P Braes and because this is the first placeholder as the second argument to this function we should pass the URL okay now back to the browser let's go to our Collections and click on one these links great we go to the list of products but there is no filter applied here to apply a filter we need to append a quer string to the URL so we type a question mark followed by collection double uncore ID and a value okay so we need to add this part dynamically so back to the code after the call to the reverse function we're going to add a question mark that indicates the beginning of a query string now because we're going to type a long string I would prefer to wrap this expression in parenthesis so we can break it down into multiple lines so look we have reverse on one line then on the next line we have plus question mark and then plus that this is where we need to generate the query string parameters and for that we're going to use another utility function so on the top from Jango utils HTML module we're going to import the URL en code function okay now back to everyware we're going to call this function and give it a dictionary because a query string can contain multiple key value pairs so that's why we use a dictionary here now the key we're going to add is collection Dore ID and the value is collection which is this collection that we get in this method so that is collection. ID now this returns a number we should convert to a string so we wrap it with a string function okay that's pretty much all we have to do so let's test our implementation back to the collections page let's look at the beauty collection now we only see the products in the beauty collection let's look at another collection like cleaning okay beautiful now here's your exercise go to the customer page and add a new column for viewing the orders of each [Music] customer all right let's see how we can add searching to the customer page so back to the customer admin class we're going to set search fields to the list of fields we want to use for searching like first name and last name now I prefer to sort these attributes because this makes our code more readable so I'm going to move list per page up and the rest looks good all right now back to the browser refresh we get this beautiful search box so if you search for cat we see anyone who has cat in their first or last name okay now what if you search for M look at the first customer adult Mr it doesn't make sense to see adult Mr here because when we search for M we expect to see people whose first or last name start with M so back to the code here we need to use one of our lookup types remember we talked about lookup types in the previous section so after our field we type two underscores followed by a lookup type like starts with and similarly over here okay now back to the browser refresh this time we don't see any customers because this search is case sensitive so if we change this to an uppercase M now our search works so to solve this problem we need to use I starts with i is short for insensitive okay and one more time here now refresh our search works if we change the uppercase M to a lowercase M our search still works beautiful so this is all about searching next we're going to talk about [Music] filtering all right let's see how we can Implement filtering on the the products page so let's say we want to filter our products by their collection and last update so back to the product admin class here we should set a new attribute called list filter to the list of fields we want to use for filtering so collection and last update now take a look good so I'm going to collapse the left panel great now look on the right side we have this beautiful filtering panel where we can select a collection and now we only see the products in that collection very powerful also down below we have filtering by last update so we have any date today past 7even days this month and this year so we got all these capabilities by writing only one line of code imagine if you wanted to code all of this by hand that would take you a long time right now we can also create our own custom filters so let's say we want to add a filter here to see only products with low inventory so back to the admin module here we should create a new class called inventory filter we could call it anything doesn't really matter but this class should extend admin. simple list filter now here we should set a couple of attributes one of them is title and this title will appear over here after buy so I'm going to set that to inventory and the second attribute is parameter name this parameter name will be used in the query string so when we selected this colle collection you can see in our query string we have a parameter called collection ID so here we can set parameter name to inventory or anything we want now there are two methods we need to implement here one of them is lookups and with this method we can specify what items should appear here so once again we have a couple errors because of type annotations if you don't care about them you can just remove them so I'm going to remove them so we have less code on the screen so we can see things clearly now here we're going to return a list of topples so each topple represents one of the filters here okay so here's our topple in each topple we should have two values the first value is the actual value we use for filtering this can be anything here I'm going to use less than 10 the second value is a human readable description so we can say low and low will appear over here okay so this is our first item we could add as many items as we want but I'm going to stick to one filter here so this is the first method the second method is query set and this is where we implement the filtering logic so once again I'm going to remove type annotations all right now in this method we're going to write some logic like this so if self. value this Returns the selected filter if this equals less than 10 which is the value that we defined over here so as a best practice we should store this in a variable where we can reference multiple times but I'm going to leave that for now so we don't get distracted so if the user has selected this filter then we're going to take this query set and call the filter method on it now look we don't have intelligence here because python doesn't know the type of this object so this is the benefit of using type annotations if it decorated this parameter with it type which is query set now look when we type dot we can see all methods of the query set class okay so here we're going to call the filter method and get products with inventory less than 10 and of course we should return the new query set so here's our custom filter now to use it we simply type the name of the class in this list so here we say inventory filter take a look so here's our new filter by inventory this is the title that we set in our class now if you select low we only see the products with low [Music] inventory all right let's talk about defining custom actions so every list page comes with a delete action for deleting multiple objects in one go but we can also extend this list and register our own custom actions for example let's say we want to define a custom action for clearing the inventory of a bunch of products in one go so we want to set their inventory to zero let me show you how to implement this so back to the product admin class here we're going to define a new method called clear inventory and of course we could call it anything but here we need three parameters self request which represents the current HTTP request and query set which contains the objects the user has selected now we should decorate this method with admin. action and set the description to the text we want to appear in the dropdown list so clear inventory now in this method we can do anything we want for updating objects so we can take this query set and call this update method and here we set inventory to zero so this will immediately update the database and then return the number of updated records so we can get that value and store it in a variable like updated count now to show a message to the user we call self. message user so every model admin contains this method for showing a message to the user so we call this method and give it two arguments the first argument is the request object that we get here the second argument is the message we want to show to the user so here I'm going to use an F string and say updated count products were successfully updated okay so we defined a custom action now we go to the top over here where we set the attributes of this class we set actions to the list of actions we want to show to the user in this case clear inventory so we pass the name of the method as a string okay now back to our page now look we have a new action here clear inventory so I'm going to select the first two products and clear their inventory go great so we get this beautiful message saying two products were successfully updated and as you can see the inventory of these products is now low great now here we can also show error messages so when calling the message user method we can specify the type of the message as the third argument so first we go to the top and from Django cont we import the messages module now we go back to where wew and pass a third argument here so I'm going to say messages dot now here we should have different type of messages so we have error we have debug info success and so on so I'm going to show an error message once again let's select a couple of products and clear their inventory okay this time we see an error message so this is how we can Define custom [Music] actions so we talked a lot about customizing the list page now let's see how we can customize the form for adding or updating models so let's add a new product we get this beautiful form that is automatically generated based on the definition of the product model again very very powerful without Django if you used a different framework for every model we would have to create a form like this from scratch and that would be a lot of work so let's see how we can customize this form so back to the product admin class here we can set fields to the list of fields we want to show to the user so if we set this to title and slug now we only see these two Fields but of course this doesn't make sense because our product has a bunch of other required fields that we need to fill out like the unit price and inventory so if we don't show them to the user we cannot create a new product okay now we have another attribute called exclude which is the opposite of fields so with this we can exclude certain Fields like promotions now take a look so the promotions field is no longer here we also have readon Fields read only Fields so if you make the title read only now when we refresh it appears down below and it's read only again it doesn't really make sense here but I want you to know that these options are available to you now let's remove this and refresh so let's talk about the slug field let's say we want to create a new product called brown shoes it would be nice if the slug field was autop populated like this right so let's see how we can implement this back T code here we can set pre-populated fields to a dictionary in this dictionary we can specify how each field in this form can get pre-populated so we can pre-populate this lock field with the title field so here we're passing a list which means we can add multiple Fields here and Jango will combine the value of these fields to prepopulate this slog field okay remove now take a look so refresh as we type brown shoes Jango uses a bit of JavaScript to pre-populate this field but note that if we type something here and then go back to update the title the slug field doesn't get changed so it only gets pre-populated if we haven't touched it okay now look at the collection field here we have a drop down list and this makes perfect sense because we have a limited number of collections but if you had hundreds or thousands of collections showing a drop down list would have a couple of issues for St starters it would be a terrible experience for the user because the user would see a drop down list with 100 items and also in terms of performance getting all these objects from the server and rendering them on the web page would have a bit of overhead so let me show you how to convert this to an autocomplete field so back to our code here we can set autocomplete fields to collection now before going back to the browser let's look at our terminal here we get an error saying collection ad must Define search Fields because it's referenced by product admin. autocomplete Fields the reason we see this error is because D Jango doesn't know how to search for collections so we need to set this attribute in the collection admin class so let's go to collection admin okay and here we set search fields to title because we want to search for our collections by their title now refresh take a look so here we have an autocomplete field so we only see 10 Collections and other collections are hidden so we can search for them by typing a search query here so every time we type a character Django is going to send a request to the server to get the collections whose titles match our search phras okay so these are a few ways to customize this form but again if you want to find all the options available to you just search for D Jango model admin on this page we talked about this earlier look at model admin options on this page you can find all possible ways to customize the lists and forms now here's your exercise look at the page for adding a new order on this form we have two Fields payment status and customer but our order class also has another field called placed at why do you think that field is not visible here pause the video and think about it for a few seconds here's the answer let's look at the order class so here's the definition of the place at field as we can see we have marked this field to get autop populated by Jango so if you remove this argument and refresh this page now we get two fields for setting the date and time we can select today's date and the current time or we can go to a calendar and select a particular date again very very powerful we're getting all these features with very little code so let's put this back over here and refresh all right so look at the customer field currently we have a drop-down list which is a very bad experience because this drop- down list is populated with a thousand customers so this is a great opportunity to use an autocomplete field so pause the video and convert this field to an autocomplete field [Music] let's talk about data validation so by default our forms include basic data validation Logic for example because we have defined all these fields as required meaning none of them are nullable if we try to save this form without supplying any values we get all these validation errors beautiful we don't have to write a single line of code to get this functionality right now let's go through a few validation scenarios and see how we can customize the logic here first I'm going to make the description field nullable so back to the product class let's make the description field nullable okay now we need to create a migration and apply to our database so python manage.py make migrations good and then migrate beautiful so let's go back to the browser and refresh this page one more time so look we still get this error saying this field is required even though we made the description field notable why is this happening well back to our description field this keyword argument only applies to our database so to make this field optional in the admin interface we should set another argument called blank to true now let's refresh okay this time we don't get a validation error for the description field great now what about unit price well here we cannot type any characters like ABC because the type of this field is decimal and this input field only accepts numbers so that's a great starting point but what if we set the price to Zer or negative 1 the validation error goes away look we don't get a validation error but this is not a valid value for the unit price so back to our models module on the top from Django core. validators we're going to import main value validator in this module we have a bunch of built-in validators if you want to see all these buil-in validators just Google Jango validators on this page you can see all these built-in validators so we have Rex validator for validating using regular Expressions we have email validator that is automatically applied to our email fields we also have URL validator that is applied to URL fields and so on now down below you can also see we have max value validator mean value max length mean length and so on so here we imported main value validator now back to everywhere here's the unit price field let's break this down into multiple lines so our code is cleaner now we set validators to a list of validator objects so here we're going to create a main value validator object and in the Constructor we're going to specify the minimum value let's say one now optionally we can also specify a message if you want to I'm going to stick to the default message so back to the browser let's refresh all right now we get this default message saying ensure this value is greater than or equal to one great now similarly we could apply the same validation logic to the inventory field but I'm going to leave it to you as an exercise the only thing I'm going to do here is making promotions optional because when adding a product I don't necessarily want to apply a promotion to it so by to the product class here's the promotions field so we should set blank to true now refresh the promotions field is no longer required [Music] great So currently we can create a new order but there is no way to manage the items for an order so let me show you how we can edit them right here so back to our code here's our order admin class before this class I'm going to create a new class called order item inline now this class should inherit from admin. either tabular inline or stacked inline we're going to talk about the differences in a minute so let's go with tabular inline now in this class we set the model to models. order item okay now here in order admin we should introduce this class as an inline so first I want to sort these attributes and over here we're going to set in lines to order item inline okay now take a look so below the order we have this beautiful table where we can manage the items for this order so our product is currently a drop- down list we want to convert this to an autocomplete field so back to our code this inline class we have over here indirectly inherits from model admin so all the attributes you have learned about so far also apply here so here we're going to set autocomplete fields to product now take a look so now we have an autocomplete field beautiful so we can select the product set is quantity as well as the unit price we can delete them now the reason you see three rows here is because these are three placeholders if you don't want to see these placeholders just set extra to zero now take a look so by default we don't have any rows here we can add any order item set it right here we can also set the minimum and maximum number of items for our order so over here we set minum to one and maximum to 10 now take a look so we should always specify one item otherwise we're going to get a validation error so this is a tabular in line what we have here is a table of rows and columns now in contrast we can replace this with stacked inline and now each item will be represented as a separate form so this is how we can edit children using [Music] inlines now let's talk about using generic relationships so here in our product form we want to add a new section down here for managing the tags so back to our code first we should go to the tags app and here in the admin module we should register our tag model so we can manage our tags in the admin interface so here we say admin. site. register now we need to import the tag class on the top so from the models module in the current folder we're going to import the tag class and then register it right here now refresh let's go to the homepage of the admin interface take a look we have the tags app and over here we can manage all of our tags now currently we cannot see the label of each tag so we need to overwrite the St method in the tag class and that's really easy so let's go to the tag class and overwrite the St method now here we're going to return self. label okay now refresh beautiful so we can manage our tags Now using inlines we can manage the tags in our product form so let's open up the admin module in the store app here's our product admin class before this class we should create an inline class for managing a tag so we create a class called tag inline now this class should inherit from a special class called generic tabular inline so on the top from Django cont trip content types. admin we should import generic we can either import generic stacked inline or generic tabular inline I'm going to go with generic tabular in line because that's going to give us a kind of more compact interface okay now let's go back to where we were so this class should inherit generic tabular inline so this is a tabular inline but we use this with our generic objects so in this class we should set model to tagged item okay now that we have this inline class we're going to go to our product admin and set inlines to tag inline and of course I prefer to sort these so let's move this right here good let's see what we get up to this point so back to the homepage now in the store app we add a new product okay so over here we have a form for adding tags now just like before we have a drop- down list which does doesn't really make sense for tags because we can have hundreds or thousands of tags so we're going to convert this to an autocomplete field which is pretty easy here the tag inline class we set autocomplete fields to tag now take a look all right we should have an error so here in the terminal Jango is complaining that model admin must Define search Fields because is referenced by tag in line. autocomplete Fields so once again Jango doesn't know how to search for tags so let's go back to the admin module in the tags app now here we need to create an admin class for our tag model so class tag admin should inherit from admin. modeladmin and in this class we set search fields to label now we should decorate this with admin. register good so refresh okay the error is gone now we have an autocomplete field for looking up tax beautiful so this is how we can use generic relationships in our forms but there is a problem in our implementation and we're going to talk about that in the next [Music] lesson all right the last thing we're going to talk about in this section is extending plugable apps so here in the admin module of the store app look on the first line we're importing the tagged item class so that means our store app has a dependency to the tax app so we cannot build and deploy it independently remember earlier in the course I told you that ideally our apps should be self-contained so we can easily plug them into new projects so here we need to decouple the store app from the tags app but how it's actually very easy so here are the tags and store apps you want to build and deploy them independently of each other so none of these apps should know anything about each other okay now in this project we're going to create a new app which we can call store custom and this is the customization of the store app which knows about both these apps this is very specific to our project so we're not going to deploy this app for others to reuse okay so here in the terminal let's run python manage.py start app store custom good now we have this new app and in this app in the app admin module we're going to combine features from the two plugable apps so from store. admin we're going to import product admin and from tags. model we're going to import the tag item class okay now why do we have an error here that should be models okay good so back to the admin module of the store app let's jump to the tag inline class so so this class should be moved to our new app because this is where we are referencing the tagged item class so cut it from here and paste it right here now I want to import this class on the top so from Jango contri content types. admin we're going to import generic tabular inline great no errors up to this point now we need to create a new product admin which extends the generic product admin that comes with our reusable app and in this new implementation we're going to reference the tag inline class so we create a new class called custom product admin which extends product admin this is the class that comes with our plugable app now over here we set inlines to tag inline as simple as that okay now that we have a new product admin we need to unregister the old one and register the new one so here we say admin. site. unregister product and then we're going to call admin. site. register product with this new custom product admin okay now the final step we need to register this app in the list of installed apps so command and te let's jump to installed apps good now so here's the generic implementation right after we're going to add store custom okay now let's see what happens so refresh looks like we have an error so back to the terminal we have an error saying tag inline is not defined so I forgot to remove this from the old product admin so let's jump to product admin in the store app and over here we're going to remove this line because we implemented this in our custom Store app so delay and that also means on the top we no longer need to import tag item so our store app has no dependency to the tags app and we also don't need to import this generic class so delete good and refresh take a look so here's the product form now we have replaced the admin interface for this app using our custom Store app so that means if we go back to the settings module and remove this new app we see the generic implementation of the product form without the tags so this is the interface we're going to build and deploy independently now anyone can create a new custom app to customize this interface now let's bring this app back beautiful [Music] we have reached the end of this course first and foremost I want to say thank you for allowing me to be your instructor and following along all the way through I hope you have learned a lot and I'm going to see you again in my future courses this course is the first of a series in the next part we'll talk about the advanced Jango Concepts such as building restful apis authentication and authorization logging caching sending emails deployment and more so if you're serious about learning D Jango and want to become a back developer don't miss the next part and if you enjoy this course please support me by telling others about my coding school Cod with.com I really appreciate your support and send you my best wishes once again thank you so much for your support and I hope to see you again in the next part [Music]
2025-07-07 02:22:11,856 - INFO - Transcript is successfully fetched by api.
2025-07-07 02:22:11,939 - INFO - Chunks has been successfully created.
2025-07-07 02:22:11,952 - INFO - Use pytorch device_name: cpu
2025-07-07 02:22:11,953 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-07-07 02:22:44,704 - INFO - chunks has been successfully stored in vector database.
2025-07-07 02:22:44,705 - INFO - {0: '57dd6d7e-ecf5-4346-a11c-948c0c7a0cdd', 1: '1855a3c8-4818-4374-bb31-260469f9ef87', 2: 'c4965d04-98b5-4fce-8a67-e105b76f4626', 3: '0f82e5e2-70b0-4913-b657-e2f4d0d0404e', 4: 'ee8008e9-9853-40a5-899a-07e6114d2615', 5: 'c03471ff-c005-4ab6-a172-0a9462389a59', 6: 'f0d0239e-db27-4bfc-ac3d-ed15b9ad4da1', 7: '74e0acd9-3006-4a8b-b369-4aa4967dfe0c', 8: 'b84cdd76-a0fd-4132-be08-43825e4be5bf', 9: 'aad1ba76-3ede-4d23-a823-d731121efc6a', 10: 'b9269fb2-b4be-4113-a9c6-ecac185a33e4', 11: 'fb28c0d4-c2bd-48f3-bd7c-0a3b76654418', 12: '5bc84baa-9c5e-409a-94ed-d8619438fe90', 13: '14619d0d-f695-4d4d-80f3-b263d5897483', 14: 'e246ac5f-9ede-4184-852e-f4f0c9e9e902', 15: '8faa6bc6-eb7d-4647-a3a1-19f66eeeb2a3', 16: 'f65a56a7-b3b6-4c3e-b226-ec6b43a1a9ad', 17: 'edcf39bf-3c8d-46b0-99c5-fa4f86cc8fae', 18: '8aecb8d1-9e6b-4651-93ad-f202a0d9b656', 19: '79c0b2f3-29a1-4a90-b037-8d139a272377', 20: '0aafab41-5c70-43a7-84f2-efcb1c6f7088', 21: '1446f365-b5b7-4a59-ab85-3b5009280766', 22: '666cd749-9297-4d8c-8f6f-fbbe96797698', 23: '050c4f05-dca2-4c8a-a417-d14615db1b2b', 24: '0cb1c892-e80a-4b20-982d-a38893cee516', 25: '404c1b02-7dd6-4d15-a516-b48ca55d1af7', 26: '40d8fbe8-b46d-473e-af64-8ccb95029ebe', 27: '5867ed62-5dff-4b6f-bb9a-0f461e112da7', 28: 'c780b09b-0b0e-4a1c-9af3-dc0a94cf02fb', 29: '42d4c69a-c8f9-4678-a7a4-d3c6575b0657', 30: '43b0a70c-e23c-4d76-bb72-431ce810858b', 31: '97994675-420d-4859-a198-83a42075b10c', 32: 'eb7bcb46-5e1e-444f-802a-f1e2288cd397', 33: '4f7e4106-b6fa-4bcb-9f98-06d22d763526', 34: '8fab42d0-8a46-4d03-bc60-4445e51d8b00', 35: 'fec58e0d-90ca-4812-9e6f-c2577f99d2e9', 36: '9a528c0b-1d2e-48dd-a050-095a9409dc1b', 37: 'fdd08c64-850e-4f37-a286-ca6585d10e06', 38: '7da4e1b6-82c3-4da4-942e-52fc0c5de64d', 39: 'a75d97c0-4a53-4cc6-b349-5409dd90509e', 40: 'f3dc05f1-a861-49e4-95d6-c8d956dfbfae', 41: 'f4bf16e3-03d4-400e-b538-0d85ddd85856', 42: 'b886a7c5-7861-4082-9b05-df0534ca6e60', 43: '49d18576-033f-42f8-b86e-cc3d25b6179e', 44: '20d1c15e-b899-4b37-813b-c5627d7b5a58', 45: '70ebc7d1-7f64-41c6-b05f-4d9bc6967106', 46: 'da7753cc-efb9-4344-98bd-1a7f3a33e5e0', 47: '9e9e1b33-b77d-4d9b-893b-d7354f118ef6', 48: '065dc03d-98fd-4713-a3a1-fe0ce0ac6e72', 49: '68271449-83d3-4b1e-b6ca-4c56d737ae01', 50: 'c4f8eeef-bd8c-4a30-9d09-7bf364e7f237', 51: '60f36e38-066d-4b4c-94c9-041c42c05d2e', 52: '718e61d0-ca0b-48e7-9739-5f06c4bc15ba', 53: '5059f270-cab9-41cd-9750-35dd3f7fb9a1', 54: '113b9f91-9c5c-4813-9549-20f756477538', 55: '0a3242f2-ffed-429e-84dc-1a848b61a26b', 56: 'f790ff94-894e-42cd-a4bf-e819e07354bf', 57: '9a70278d-bb4e-47e4-825c-bb5078ebd92f', 58: '6efcabb8-2d23-4191-a713-f75ba26633a0', 59: 'e972ffef-a8ea-44fc-87e7-977fdf6bbca9', 60: '9f2b9506-a838-46af-8769-868fdab2f5c4', 61: '0c22e695-c506-42e5-9d88-4bfbc757e550', 62: 'c5162313-a584-4ff2-8722-4692019b558d', 63: 'f10d4539-58fc-47c2-b938-bef8ed2be437', 64: 'b981e317-b80a-486d-83f8-a070c7764285', 65: '6c630032-0b5e-45df-be02-f355991b6f9a', 66: '19e91e1f-4f08-4813-914f-241212848984', 67: '67897cd8-febd-4dd0-82dc-dd166f296975', 68: '00fe7e1e-4775-4949-ac75-95082aafcdfe', 69: '4e56a250-b1ea-464f-bc8f-d7d32f07208b', 70: 'a590455a-fcf1-45ff-a814-badb45dc517c', 71: 'c7b01ac6-d357-45c2-808e-e138e8a57da8', 72: '99b588d3-a8b0-49ee-b410-12a1f7950ce6', 73: '4b9e48b4-901d-4172-a8ea-9a1c6072f0fc', 74: 'f837f1d5-48e5-4849-834b-40fdc01d72f4', 75: '6286538f-db99-4f4f-bdd9-55a798b1dcf7', 76: '14a07a66-cbe9-4182-9dff-7676452cfb69', 77: 'ab072d5b-70fc-417d-9b96-a21b73380629', 78: 'e9e58e35-6772-4a14-8889-ceddaa899bb2', 79: '227d509f-7fcd-43ac-a8f2-611bdc879662', 80: '7630675e-9282-4cc0-8373-f791fc7441a5', 81: '62a3e956-8f27-4c8a-85d7-129c1e284ea8', 82: 'ebd0f472-08b1-4dfd-9651-c12312a1a2fc', 83: '95d1a558-b0be-4a88-8b53-4bfae4fa0dae', 84: '077a5952-b906-43fb-bdc6-6e9633d86a23', 85: '7fb7c767-e0da-4ebb-b306-87dbada10736', 86: '80e1a91f-4b7b-45bc-ab0f-8e12ceb8f574', 87: '4e885185-b6d0-4591-b7d4-b26b7bcefca5', 88: 'a2122ab9-c0a5-43aa-bf18-440448c6eb0a', 89: '4d08e4d8-4e07-4078-bc34-5214f04db1c9', 90: 'b60c510c-2715-4165-81ef-55ffa624c6a2', 91: 'd77c7636-be11-4280-b2b2-6cf73d63c1ec', 92: 'a3caa011-9fea-4a85-afe1-c2b82f0ced15', 93: '5e56fb55-4c9a-42a8-a71d-e14e1647dbe1', 94: '0178dfe2-0b63-4b5c-988a-fde1ff160aae', 95: '21d9033a-44c4-4fc9-bb7f-267ecd24c21b', 96: '7e567f9e-9b8f-4cf2-9762-eed878e03d1f', 97: 'b3ae60e4-f339-4edc-9e80-03809589529e', 98: '010aeb80-9285-4b56-973e-8fcd19474d67', 99: '5ecc4f9d-5c9f-4fb2-823d-5c9d5c1ac6b6', 100: 'ee99c5c1-37c5-4d8d-a408-cf35f55ea83a', 101: '3002559a-04ed-4dc2-b835-09f6041e66b7', 102: 'dd431a2b-f410-4bef-b9aa-9b6d21f466d0', 103: 'b8580c5f-a6b6-42e7-9c7e-b93b1c942155', 104: '85cbc634-8f82-405f-a03c-e6fe71041aa9', 105: '873d9519-122f-4308-8bbe-434cf2c2f86b', 106: 'd5b636b5-325f-48f1-9b88-516253d917a8', 107: '2e4d8504-cf89-4871-87a6-0969594ad00e', 108: '94094ed2-6ec3-4167-87af-9d151a98f1f0', 109: 'b98107ce-681e-488c-918e-a78623cb67a0', 110: '5afd74cb-5506-4bfe-9f03-de06f23fbdfd', 111: 'a534b7b0-3a42-435c-9c2b-39134816d2a7', 112: '838e7266-3489-4c26-b3f3-f2e11f3c2f0d', 113: '813568d1-c2b3-4bd2-a63a-1cf7ca5c99a0', 114: '183387fa-e142-44d0-b679-96c1e8e40bf2', 115: 'ae7b1aab-8ca5-46d5-968a-6ee6bf167de8', 116: 'ab2103da-7ad2-4218-ac32-1eacf256b48c', 117: '47d6732a-169b-4dab-8f1a-2e6b3b176cdd', 118: 'd2229fe5-df96-4357-951d-38d84459ca8e', 119: '3d29a876-8064-4970-9648-620643dcccbe', 120: '5404ad39-e83d-49c1-9187-e9fb000d2649', 121: 'fd9fda33-a0c9-4394-8196-bfdf95e54f3b', 122: '7d11bb87-0493-4081-83ff-3fc92eceed68', 123: '6b8a183f-868f-4263-b70b-b08b11540ebb', 124: 'd2466513-e681-4bc6-afe0-61b574308139', 125: '35b87fee-3fee-48bb-b07e-248d24ab1c63', 126: '36f55938-82b4-4eb9-a119-847b24ad4937', 127: 'c3aa4792-9fa4-4a55-ae3c-87db68f5029d', 128: '5ceee980-99d7-4f45-a660-c9971477e85f', 129: '2ae4a667-45f2-4bcc-a42f-dead6378ccc8', 130: 'ef515f25-bd93-4d80-a43e-5d0f9fc7d5e7', 131: '3f046c3c-b6fd-4544-8835-0f342354f121', 132: '132749f6-6b68-4b8b-b71d-63749021fba8', 133: 'd413fc21-8f44-4bb3-af63-7ceeac5eacb7', 134: 'd5763eaf-02c7-48d4-a520-23153982c8d2', 135: '99f34723-f97c-4b40-8bdf-564053764e02', 136: '4efa07c8-7030-4772-bb1d-db73a4e8e286', 137: '558f6c6b-5374-4769-a782-165a33e8d5dd', 138: '2cbf65c5-d4b6-4ede-98d4-64e9661390d2', 139: '9bf4438f-8ffd-4fce-8a91-659fe79c09c8', 140: 'd70b5868-755a-44ef-8613-149938f1010b', 141: '5412046a-8782-4949-a0af-17932d1d7899', 142: '3a82dd85-12af-4da7-8ce7-59fecf5f5271', 143: 'c28ffda9-2ff9-4295-8695-b1aa9f8b30bb', 144: '550355b1-f315-4bd6-83ac-307fc4277636', 145: '5a633662-571b-46b0-8e9b-52ffa967389a', 146: '64186ffd-3a44-447f-b046-945b1ebb1a6b', 147: '5f3ab5aa-59a0-4708-8e65-d0d66ac30e8d', 148: '16cb6f7f-f350-4bf5-88fa-3de7a48aa181', 149: 'b12e16e7-2774-4133-b61c-3f20edc4c679', 150: '81f0bb51-293e-4539-8878-512e3dc0393f', 151: 'fbd8a772-78b0-45c8-9df5-88f89b5e7e3a', 152: 'dfdeda9b-ce92-4872-8f63-bbcf6e3181f3', 153: '7345127c-9e38-475a-8c86-985d4a4e9030', 154: 'a166c093-4659-4277-9275-002f8c816f17', 155: '117c6a9c-d087-45ca-acc5-fe0561e84b6c', 156: 'e54afe1e-581d-42f8-b447-c8bea7535547', 157: 'e8dc7635-dfd1-49f6-aa19-0753133ffa39', 158: '7a8bb11a-fef8-4238-9ead-9eee6b92064a', 159: '3b08a132-2125-498c-a4ba-4cf66eefdbec', 160: '8fc6795f-2a28-46a2-90b7-49a0fc7bf644', 161: 'ba58fd2e-feac-44cb-ade0-37c137a77c20', 162: '45126a29-f0bb-4af6-bd97-e7d80802909a', 163: 'aaa00378-806c-42d0-9ecd-65531038240f', 164: 'c418b1c6-e591-4b0e-ab62-0e73f3e27fa2', 165: 'e7e9df5c-58b3-4c8f-8fa0-5a157982cd6e', 166: 'ca8726b3-b573-4825-a8b7-e0a2384b472d', 167: '517b415c-a2c7-4bf8-a4f7-cd6dd7e6ed6e', 168: '7461e393-f675-4178-9210-ec64a2e8e047', 169: '68414192-6b6e-43f8-9853-2f55122a2a3c', 170: 'bec536bc-bf53-4006-909b-d2635e78cd8b', 171: 'c6417eca-b33f-466b-88cd-b8bfed526c85', 172: 'd576dcd8-a1dc-4677-ad55-cb66ffbbcc30', 173: 'ccba240a-597a-454b-9bbc-9873732d3092', 174: 'dd17eddc-6492-48fd-a550-393f2bd1a4a3', 175: '3a2e7b40-5e94-4a1a-9169-0b8dac66c48e', 176: '0c54ed52-2439-4428-b24e-653c6568e12c', 177: '44f023dc-c328-4821-a227-59aee05069c2', 178: '03a0c6ab-d1ea-45ae-8d4a-4e25232af48f', 179: '333b3c9c-136f-4eac-8142-ab99ea3ef34f', 180: 'bc8f8fbb-0673-4138-975c-2d82d8bb237c', 181: '5c5c79b6-5b5f-46d4-8538-7d851050e1ac', 182: '34925abf-5ade-4d40-8f3f-18f3b22d24f3', 183: '2cac0a05-2a4c-44bc-bb88-d2fd55b1bd44', 184: '1e9506f3-d45a-45ae-971f-14532d01eba6', 185: 'ed125f76-662d-415a-b1a1-d6ab8b3c731d', 186: '1866a011-219b-49d3-b9a6-c4f484e632dc', 187: '321b327b-a6b1-43ae-a426-9b36720c98ae', 188: '7d0c7d46-7ffe-4bbf-8b5c-ec7674ac638a', 189: '1737bd44-3be8-4fd8-a149-cc210d9ca69e', 190: '8f978f59-7641-4ad8-a09c-32bd37655d76', 191: 'dc31201d-7710-4f9e-9e0b-43c42c63e43a', 192: 'dd51bf75-f2f9-4852-a1e2-18a67302d806', 193: '5a59dd80-a7a8-4d5f-b610-11c8384e604b', 194: '21131c32-15ab-4ed8-bbc8-97fed77ee333', 195: '19ae6e5a-2166-4ac7-b900-48213dd25a40', 196: '10134efa-eaf9-40a9-8504-6e257b84ef44', 197: '07ac86ee-d068-4ce3-b4b4-b90da7d627f4', 198: '19cc101f-8f35-4317-9279-a6407ab72bc6', 199: '054a71eb-17d1-4825-ba60-d9053c6da8c0', 200: 'ba05b5d8-b38d-4126-826a-cf6861c1e6ea', 201: '318fc5fe-9caa-4694-9fc2-25c49128466e', 202: 'e3800bfe-822a-4301-b1da-73f670cd2a81', 203: '1d7fae8c-d273-4bf7-98d6-dc99f7858250', 204: 'ed9b92b0-33b7-4ca0-a38f-27ce4759330f', 205: '344a1f51-31f5-46f0-970b-6b5d0fa4a842', 206: '1e888817-5f95-43d1-b9c9-4603578890cb', 207: '0c8a734a-adf4-4a24-80b5-75ec082cb81b', 208: 'cff61508-3bb4-4e39-b05b-d854773238d5', 209: '6f05baa5-696e-4b67-9469-7c8416dc2d39', 210: '4542ec0d-96b1-4a4f-ab73-44b0906fd086', 211: 'cc58491e-d457-4868-be15-9e1d9958248b', 212: '3fbed6ae-154e-4b33-8933-753b2226119c', 213: '49e14332-3731-489f-866a-fa85e92c6bc8', 214: '91ac1735-4025-4017-95c1-a48be18ccb75', 215: '434fcf59-6142-4198-ab69-3ef5d92c03f9', 216: '4bc4b712-ed65-4467-89b6-f0db7a927e5a', 217: '81da8f7c-441c-4e27-a5c9-48180b8924a3', 218: '567543a9-7834-4754-8f95-1f67efb594dd', 219: '04c09e1b-c545-4d33-818d-f569994e53b6', 220: '02582e6d-0d29-4ac7-8759-5dd8e9052d36', 221: 'd6957468-f55e-4fef-ac64-004b27029311', 222: '10fc032e-7d1d-4e3a-a7df-de39994c6fd7', 223: 'ddf689df-5318-4858-999a-847af870c9ad', 224: '55dc09c0-2b25-4dbf-9fa2-1ed4d71103d9', 225: '61bfa237-511f-4a6d-88f5-971a149e4753', 226: '3276de6e-2a74-4806-8449-26d9d58e316d', 227: 'a4b25566-5772-4d60-b08b-0477d8fba9b2', 228: '6dc4410a-68a2-487d-8697-720114f28c4a', 229: '43ceb855-2e49-481a-8fee-07c20d096a18', 230: '77550043-7bdf-4599-a206-a4c591f62362', 231: 'f374c147-11ca-48c4-9548-eb5c0caad624', 232: '609b59cb-4a31-4d70-b115-9d3addc8ea6d', 233: '02d77575-bda1-4c97-ae1f-89ff2a8359d3', 234: 'dbfe6ca1-b6e5-402d-92e6-2b102548ffaa', 235: 'ad13e62e-ee3d-4cf8-ab41-aed9bc85bd69', 236: '4d1b34b0-c786-413e-b64b-1b04ecea5bba', 237: '2c954a90-4eeb-4b6c-b21b-46970639a7fa', 238: '5e75219c-a52f-4a32-9cdf-19fc6ae69b1f', 239: 'bf6d1a84-2f16-42f1-a76f-0b69cc23c8eb', 240: '095f20e6-acfd-4697-93b0-8da6cf2d0e68', 241: '21321f41-2502-47d7-9346-4c0393abd96b', 242: '23082573-868c-49b0-be36-8836bb0e3896', 243: 'a60f86d5-0243-46ed-a81b-8eeacbd1ab11', 244: '2da7516c-8f39-4802-ac82-0af61be1acce', 245: '76bb9d8b-4abc-4698-9693-617c2161c017', 246: 'b732ec08-8666-4abe-8050-6c2f2c227202', 247: 'f5680dac-a1ca-4808-a08b-86332b0cf397', 248: '5535fbc3-7f89-4a50-8331-91d61a62aad4', 249: '51451d98-cdff-417b-b14d-b1f17ddcb8c8', 250: '87d9cbff-3f1a-430a-a537-1c15eab37e54', 251: '390ba8bc-9f1e-42e0-bd5f-b0b0912b73dd', 252: '43cc792f-29bf-4609-a22a-39c5ec3c0462', 253: 'a6f31e51-1c3c-4169-a597-3bb8e0b3f618', 254: '6b3735c3-403c-40ec-abfc-97a94e12e183', 255: 'e9b19a99-4525-4866-9ae7-3cfed12e6e98', 256: '8f9512c6-3d25-42ec-bdd8-8da33a2ef5a7', 257: '408d4de0-4fef-4337-a68d-af2e199ca844', 258: '9bf9123b-e939-43eb-adbd-77ab5fedad09', 259: '6129f5f1-40ff-4424-805c-3b547bf00312', 260: 'de24ce92-1a3b-4012-b9b9-94b0aadee08b', 261: '6b3669d2-1a5a-4d39-b0f0-f02c49fa1982', 262: '10c50c12-7761-4f6f-b186-d2528c521844', 263: '6a3b0d4f-03a6-4fe0-a9b5-548a0b39fb7c', 264: '8a0835c5-25a3-4832-9413-98ee8644c7d2', 265: '2990b34d-eb06-43b8-9b2c-a1578a35968e', 266: 'f52e074f-9105-4aee-89d6-5fdfaa2413a3', 267: '816d44ab-2d54-48fc-9603-c7d15b28dad0', 268: '77b6763d-3e10-4d52-a53f-2e18e9c4a0ea', 269: '51cba4e5-c480-4f75-b8a9-c37444d1d633', 270: '3711f06e-f4cc-44c5-90df-0ade5eecf0d0', 271: '8bad3633-3837-4a12-9b7c-4c8a8d07d70d', 272: '65f7c3cd-cdd1-45d8-bf1f-2f98da7d0561', 273: '9914ec5f-9dc8-44a2-b924-5fe1198c1f4e', 274: '8f0ff2a9-2693-4f47-bf09-28d6e832069f', 275: 'bde8d821-04c4-4c3a-8f73-7e5e10d56613', 276: 'e065dde7-7916-4741-ab41-1aad8a50070e', 277: 'f805fc98-19e6-4c95-8d6e-d0b3671a4393', 278: '6edb1301-0316-4f9d-927d-98ee8158e46f', 279: '95171bdf-eb72-4803-b576-31551ccdb85a', 280: 'e81addda-8698-49fc-b091-ed08ec442025', 281: 'd302da11-c965-43f2-99a6-565e7ee87744', 282: 'f16f9fbd-bc7c-4409-a6be-42a3847c3cfa', 283: 'f1f6df1e-f463-45f3-8897-ab55de606070', 284: '69b4f62c-fe61-40f8-802f-63604e22e010', 285: 'b8e89460-f9fc-427b-a3d4-ad25c0d54793', 286: '25ec4b1b-3171-4f90-9162-b2d88108a496', 287: '140e9c91-5fa4-4659-8243-0ddf0eb25667', 288: '6155a4a5-59ee-4755-9108-cd66e396ea3a', 289: '9223be3d-da01-4a00-88f7-584ee73bd097', 290: 'e3546c98-2c68-4773-92b6-918822a8ecdb', 291: '681c8536-4aa7-4616-a641-4b7ded4e8fd8', 292: '2f08538e-1aef-461d-8dbb-b339d8d81b54', 293: 'c5a5acc0-135b-4a8d-bbef-faa78544ee08', 294: '292d332e-0581-4f37-b517-84a4e2a8ba4d', 295: '0b072b64-6260-40f5-b8e3-a722176670c8', 296: 'ecb73d5c-e11b-4dfd-a043-b63fb53d22d6', 297: 'ad19f85e-f5d6-4beb-8a93-fa9b55c0bbc6', 298: '77cc0120-6312-4a98-92c1-1512c1c04a79', 299: 'ebfe2f82-086b-43a1-b9f0-543d02e70579', 300: '5d6e0f3b-9b57-4320-a592-428f0e437359', 301: '23730188-725a-4c28-b7ce-ca85f1a8a51b', 302: '08594e21-54c9-4f85-8eaf-04f0f1b77bcc', 303: 'e474c7d0-4d2a-4b70-ab34-0fff85eb7f18', 304: '0e2b65e8-c099-4b00-b0bc-855432362557', 305: '41d02ffb-498f-48c1-a70c-439a2117487e', 306: '0d65e3bd-fca4-4f16-82f5-5aebfaf18e7d', 307: '12912476-b2f5-4af4-b3ef-4c7ffa01e647', 308: '5055f3ad-3ba5-48ad-be9c-4af5b483ada5', 309: 'fb658016-c629-4976-b805-2ba029e7f5c5', 310: 'b3d80644-f86b-4dae-9738-b6215f679033', 311: 'cc87b67b-6712-4686-8435-b903ccb3076e', 312: '6863a0d8-d2cd-4085-a848-94c5aa702d01', 313: '5cd2638d-c67a-4e2b-89ff-007a90d5774d', 314: '789100bc-c99d-4e0b-a41c-a105cce9183b', 315: '1c9b0b50-158b-4d44-a9ca-27440b781395', 316: '540e2f98-33eb-49e9-b383-701090363275', 317: 'a1598298-55b6-4df6-b543-3a50ce67bc10', 318: '3dece9d5-247c-4bb0-a618-0b214130f2e9', 319: 'e0e5ea22-ff0b-4097-9ed0-03e3125914b4', 320: '7237fc6e-edb5-4b14-8839-5eef74de266c', 321: '8e002418-c0cc-4ace-af01-cd4b7ac4e91e', 322: 'a636c91b-74a3-4152-8bcc-024f4aadf99d', 323: '0ad2ab4a-b801-4882-82de-d5b89094b067', 324: '3e26b6b4-366e-4d06-a531-ef1b881460b4', 325: '1c31830b-d11a-4646-bdb7-ca21a0a9291b', 326: '8490ffb8-fd7b-4f2b-b1c4-f489fccd3560', 327: '61cc596d-53e6-473c-9e09-7879dd9e6074', 328: 'e36405b1-da62-4e6b-94c5-2d84a57bc68a', 329: 'ad69226a-e971-4e6f-a2e8-70c5617aac0d', 330: 'b88ad2ad-d04d-4587-9a5a-1d0eb72546f2', 331: 'b5b6c66d-bb4c-45a5-8843-3af6fddfd36e', 332: '831492fd-95fc-4d13-9983-2b5a22985c5e', 333: 'c54d2740-9ecc-44b1-8ae1-fcc457edc8c5', 334: 'e7da9745-e055-4aa2-96a6-080362bb058a', 335: '70f0017e-cc09-4df9-b5fe-d2717befa9d1', 336: 'e11d6404-ef5e-4454-950e-084fb66b9f55', 337: 'dd4d6bed-6ee4-4212-ae66-98e85af95d5f', 338: '1903d5bb-99f2-4467-b234-7cd981334744', 339: '924b3cc9-1cf3-4158-9780-7ee59611952a', 340: '82e61415-101d-4416-a207-70f22b99bff7', 341: '2155f3ae-6c8e-4fbf-b7b4-f021ad8f84fc', 342: 'e8782c73-1c66-45e8-9851-9d83aa937313', 343: 'd3fd98f2-68c7-46b3-b8bb-25d6462a26b2', 344: '8db32303-837c-4977-a446-36f6017ac343', 345: '4886f166-a65d-4c06-be96-9e19504f35f8', 346: 'f3644f28-6573-4a22-89b2-3745c5b58f6a', 347: 'f639a3ed-7303-4518-b04c-362e5bfa53c8', 348: '90f21b31-cba8-4d2b-9ce7-b52ee1635e9a', 349: 'b822b769-e7bd-483b-a485-c7e88e526e3c', 350: '9016b3ce-94c5-46f7-8b3e-e705dac4c7e0', 351: '311daa68-9291-4946-8955-63736e30bc0e', 352: '0447d761-dfbd-430e-82a7-df71e0c33043', 353: 'cb580ddd-bedf-43ba-904f-eda331201a62', 354: '4b534767-a4a9-434b-a8ee-317dee10cb03', 355: '579e0250-7ef6-45d1-befd-912a5e216fba', 356: 'aafd84e1-7b5e-450d-add5-5d51ee184fe5', 357: '1e43272f-b2ac-447b-8bb8-a4cab6e339fb', 358: '629d737f-b6b3-4185-9da9-6ec150c2cd60', 359: '3348ba4e-91d7-4949-9a9d-8add7d92a317', 360: '099b8125-925f-47f4-9dd7-2eb865142046', 361: '99346c51-a521-49db-8d13-efceacd3e27e', 362: 'bcd9e9a6-48ad-4d93-8951-b6244b874391', 363: '08f16880-7ea6-40fc-b916-60ec1f115608', 364: 'c22195ee-1f4c-4f10-882d-662388c6d28d', 365: 'bc78411a-347c-4ac0-88cc-d58a28f44e4e', 366: 'c906a24e-8a9e-4ba2-a1c0-1e9e350ff88e', 367: '6c0e4819-a2ce-49c2-bc37-a86acfed6387', 368: '0479a060-7dc2-4b79-90b3-db429437ad50', 369: 'f68ca19e-e310-4a0c-a408-85c842efa9e4', 370: 'a909de93-c3a0-4076-b6b8-fad5449b4b88', 371: '5af04120-111c-43af-b5d2-514385e41c03', 372: '086330e7-c64f-40a1-9031-3414384e583c', 373: '38f72f50-d5c1-498f-964e-1e529ca4f473', 374: '39b948e0-e77f-499a-bdd6-f7d0bcd2f1ae', 375: '28e033f3-a3d8-42f7-815f-f78df74a7c0f', 376: 'd0369c4a-fc57-448b-900a-904556cf54c6', 377: '9b41a957-f57e-496e-8106-f1f974a09d76', 378: 'b97e8ec4-5350-4fee-b0a4-2d5bd0cea769', 379: 'efed44a7-bf20-4709-a1dd-3c581ac74a31', 380: '50eeb489-c08a-41c7-b606-f515c13d8b4b', 381: 'c0e304af-0fc3-4429-9cdf-765d336f015c', 382: 'd37cb886-7965-4a51-be87-6dd7da97d745', 383: 'eb28b121-c457-42e8-a545-779af9d94772', 384: '8a7b1a36-428a-4a68-a408-05b9170b251f', 385: '57d3f228-d44f-4af2-b827-9f09205ae30f', 386: '9cac516e-38fb-42f5-89d1-21f173d5f0c8', 387: 'c0b2e0b0-69b2-4a46-ae86-095a4c1aaa04', 388: '7fdc76d6-8bdd-4f4c-9b5c-9a7de8336211', 389: 'a32d38ee-75de-49e1-a444-3c01c6e264b4', 390: '914295eb-5e96-4425-9534-d92fa4d3febc', 391: '76a10370-0c77-445a-ac84-f7111b389b2f', 392: '2bcd8be5-24b1-4991-b722-b143628d5f26', 393: '5fc67e3a-612b-404b-904c-54fb0ec365b1', 394: '33b00690-824f-44d6-b8a6-fc70378062d0', 395: '731499ee-6432-4c54-a81f-356742b007f3', 396: '09cc565f-1cfd-44e9-8d5f-1ffc9b4d75fe', 397: '167ba7f6-29af-4831-9739-a24adfb376cc', 398: '12cbf592-6a62-434a-92f9-1e6c8e626d94', 399: 'c13ead95-43f6-4eab-b37e-f14f08bd3cca', 400: 'ab898d58-44fd-4dfa-a0a9-1510ad8491c4', 401: '07a45bd3-5e01-4f00-b3e3-d3f67eb36145', 402: '7747ee7d-39d2-4fe1-b0b3-d19cfbc867ed', 403: '36ed16d0-48c4-4a32-9f7d-fc42f061b046', 404: '9888caa6-1235-41c7-9d20-2e99c940566d', 405: '150cf32f-4401-4513-a94e-f1f79875efe1', 406: 'ebbd72bc-73c2-4d80-b34a-54ad11aac59a', 407: 'eb2e19b7-0cff-4cf2-b55d-214d512bf8ee', 408: '924aebd4-5b5c-4ffa-8f71-96c7432222ad', 409: '6d3c3ad8-e7f0-4a21-aa13-4e4e188766fa', 410: '7e9c72ae-a291-4ec5-83b6-c9c01ca75fe3', 411: 'c08bacd1-b2ad-41c8-a298-490291bbde41', 412: '45e6aabe-a2e2-4bd6-81a5-83e6dda2ae8a', 413: '86872cc2-ca18-4c28-8848-846b247584eb', 414: 'dcf3b46e-ec02-4cad-b1c3-cd63a4fcbfec', 415: '0dbcc426-d3fd-4e49-a8dd-a7e6c537966c', 416: '5b4e88e2-93cb-4ad8-86f3-bc94e9ae237c', 417: '03df5f42-e89b-4363-a022-ee1ad2fc7443', 418: 'c19701f0-1ad0-435c-926b-e904055e0de2', 419: '0923a056-9d7b-4cb0-9d23-328ba17e60b5', 420: '8a0f71cb-2036-4254-a7de-e67483fd1aa4', 421: '3f09853b-0c99-4b10-8812-37fd87eb0924', 422: '86078bfb-7407-494a-b515-d9db62ce82cc', 423: '547b01b3-3cc9-455d-a1e0-722abad3c319', 424: '8b85cf62-db72-422c-8e07-ebb708e6c485', 425: '74476d0e-3fb2-4c4b-a50b-348444e07cb3', 426: '384bd9d8-90d3-4e60-be54-98fe5c6cc64b', 427: '0ccfb4d6-bdd6-45f4-b9c1-4885644dabb0', 428: '8b13a845-bab6-4ca9-a717-9d98d2790ffc', 429: '51937a81-32e0-43f8-9b8f-66bc54cf9a72', 430: '5947d18a-dc21-4d09-804c-97221a7f0dee', 431: '708d0ccc-a02f-46a7-9b11-cb88271ecab9', 432: '94daa223-6b04-42ed-9d96-44325d178880', 433: '08cf2b59-aec3-473a-93c5-eeb94c8f9415', 434: '3a1c41a6-d99c-408a-af50-636537cf85c9', 435: 'ac048eb8-39fc-4d26-a5e9-707a4fe8999c', 436: 'bd711e6b-92a6-4af0-9cdb-aba5ce96c09c', 437: 'a5794f85-c41f-4483-b1cc-1b0b9ac60998', 438: 'a61bc569-10a5-4195-a6ff-86e687af6113', 439: '3dfae992-d1e6-489f-9014-0f5546866c4e', 440: '3bda1ba3-631a-4d45-805d-0f7da715cd44', 441: '88063598-f1ba-40de-9619-75cdf80df291', 442: 'f36095dd-0cbb-417e-a83f-021af235aea6', 443: '54ac21e8-4ce1-4889-b385-8fccad4e8c7e', 444: 'd79a427c-5353-472f-a0ae-2dfa872c0529', 445: 'c7b3caef-edbc-4960-b2e3-d56e82cb11bc', 446: '8066d865-adf6-412a-8576-6bac8ac5a446', 447: '16857f5c-ddbe-477e-b7d9-4ea0899de63b', 448: '299e9f39-b7a4-4d65-bb1b-dd1f1161d65c', 449: 'e4e9f3e6-8351-4130-8476-bc93143a7fad', 450: '015301c7-3282-460e-bae3-031842ea594d', 451: '9790590b-45e8-4ce7-9db7-f0a9d8bf9013', 452: '4f36ec4f-133b-4bdf-9aba-51139d1e7305', 453: '4c7d4d5e-f80f-4650-b3a6-9426269909dc', 454: 'b971df05-ccb4-4185-83a5-ee49eff82f98', 455: '6a110d1a-f84a-4bfa-91b8-b39a2705b7d2', 456: '27df5643-9da5-4ed7-b203-46985a6c5e5a', 457: '0cd92471-e759-4894-a762-1e4baa963c57', 458: 'd9b539ce-0b45-4cf9-aefb-0d5855a0be7d', 459: 'b619be20-906b-4b31-ad81-0c94faf9f601', 460: 'a09409c9-84a0-4834-8512-a2f4e797a459', 461: '3c410cd6-d527-48d6-9015-e4789be30e3e', 462: '3a79a849-3c32-4542-b4d1-9ed4ed7dfd51', 463: 'f5a4fa7b-dd51-4723-8103-689df82d1464', 464: 'be4f693f-2428-480f-a7de-7cd586ed05da', 465: '59cc6c25-5c3b-42a5-8099-a50f43b2efaa', 466: '3ba22f75-01fd-42b6-9244-d95b9776f964', 467: '63a076cd-3a0a-4a13-8491-52d29d6d7953', 468: 'e31439aa-6e80-41a6-bde4-459d50a1e0fc', 469: 'fb1e98bb-71ed-4d95-aab7-a9ec5721507e', 470: 'd4838a39-25bf-45b6-8dc8-fa0daa1c9be4', 471: '0a5c2e4d-2a69-4eee-a7a9-41113030d879', 472: '4d38fd35-d6fd-4eec-9f76-0748a42d977f', 473: '498ffaae-0ce6-41c0-b7a1-6202f1885edc', 474: '89e44663-7289-4a23-9a6c-4fcbd229b174', 475: 'c0b0799e-75f4-4835-8955-2010dd2db06e', 476: '9cc44eef-8b3d-4ba0-aa10-88d9ef86b2bf', 477: '9bb4607a-b686-43d1-bf04-258bb5fc9fdc', 478: '32317887-ad02-4109-8418-275b2416d919', 479: 'f7f7b458-9942-4dea-ab90-0e004c6f703a', 480: '9fc49f06-b16d-4ff0-a42c-cdc8c5750011', 481: '5f165acc-ea3d-4370-a7a3-12be0d8888fe', 482: '3f28fb05-6e53-467c-b4a0-de1b27555de7', 483: 'ca067fcf-15b7-4171-a965-98368c11dd6b', 484: '92dcd672-e638-4679-9686-1eb9bb4a559d', 485: '82c6f8a1-635e-4660-bc63-adddee0911fe', 486: '5eafec6a-fdd3-4d81-b06e-d707b9983bbc', 487: '0bc429f0-5720-45dd-a64c-f2c49adeb584', 488: 'ab7fa389-a147-41f3-b3ff-0ddd2fd0e2e3', 489: 'b2f76f15-9ee8-4102-9581-315bfc401f41', 490: 'fd428c1c-316e-4964-bb0d-9dadb418851d', 491: '36b5f8f0-cd87-4123-859a-3488b6a3e980', 492: '4d361920-94ac-49b1-b37b-ceca852fcd5e', 493: '52afee21-75fa-4d94-a0fa-1e15759a9bd7', 494: 'c3f47b05-3661-4f96-80fa-9b03bc167bdf', 495: 'e3100229-474a-4e56-adb4-4326fc596078', 496: '6fa9aef8-4af3-4345-8983-1559aedd2058', 497: 'c05e8126-54bf-493a-8ee1-176b006b009b', 498: '2fef7df5-19e3-4d0c-8e5b-6861a4cd0369', 499: '44b2fc05-a1e2-426c-8afc-2e7cd26a5568', 500: 'f28634cf-6171-46a0-8b8c-e78209627e72', 501: '81a584c8-5856-4745-99bd-a7c919f045fd', 502: 'f9e5cc89-818a-42f2-ad3f-0d0962e20b79', 503: '9ad237a4-f76e-4c5e-8cd1-096de9e2c827', 504: 'db54ad99-f786-43ad-b1d5-dec4b533a9dc', 505: '1bafaab3-44ce-4a6b-926c-0ba31991a63a', 506: '062f5d08-d262-4df4-a65f-f7eb7ceec4d4', 507: '3f618f79-0702-48a9-9721-be88c6591450', 508: '722ea3d5-8ead-4e64-8150-e5e504329cf0', 509: '69b4183e-e393-4d29-a4ce-877e1e60ef7c', 510: 'f78ef86a-c98e-48cb-a02b-1fc9c69ef2f6', 511: '9715600c-d901-4d71-8d62-7d9f2c6f7fbb', 512: 'c2255840-31c1-4da4-96fc-34a7fd56eb33', 513: 'e7a6f0bb-a06e-4236-8674-2b63e3fc6adf', 514: 'cf6f3be1-0bc7-40aa-8ff2-f97ce7b917a4', 515: '7f8edd63-8c12-45ac-93c1-1f68feb8f305', 516: '6a6451b5-258e-4648-8bc6-76fddec64420', 517: 'f969e858-f734-475c-9200-154d40cc498f', 518: '97be47da-33fd-4fbc-8049-841ccbea4ba2', 519: '8309b3d9-124b-4a7b-bbc7-a125584876ea', 520: '01806e88-082b-4c5b-a533-1014f994773c', 521: '10efb2be-3edd-4303-b3a7-f00d1eee5968', 522: '08eae12c-6baa-4f5c-b854-fd03643e6f9b', 523: '21938c87-0656-4134-a772-48068407f1a9', 524: '738022f4-a77f-4e8b-9aed-1f16ccf3bd0e', 525: 'e43b5324-d9ff-4f4f-bfdd-62c103b27177', 526: '998c8afa-e7c7-468b-9f44-4e4fc1c3dded', 527: 'efa95b3e-a9e6-40fb-8760-9e0a606a9373', 528: 'f7395b57-3be4-40b5-950f-f171817576b7', 529: '5f98c777-7ee7-4976-94c8-eacad071878b', 530: 'dd6cb6f3-a503-4fb5-b8f1-6adee3cd67bf', 531: 'f5a9726c-db88-45f9-9dc3-3433551b3c3b', 532: 'e6ec77ed-68ac-4b37-853f-332aefe9f1b3', 533: 'b7c6ae4e-edd6-4048-ab80-a99c9b77d9fe', 534: 'bb5e2f82-3602-4796-a96e-6dae7dfd9801', 535: '0b447545-29f9-4eae-bbc8-351e5650d84e', 536: '01f3054d-f7bd-43f3-88f0-af6d19fc51af', 537: '41673e17-4bbb-4cb6-ae26-81407c52d8ab', 538: 'd904d9a0-b3e2-4c9e-822e-72e4ff4b8481', 539: '113f792c-0e36-4633-bf56-21e085f8b3e9', 540: '272e2d58-ac74-4837-a5e2-5a8af6eb807c', 541: '2964dad7-0b6a-47fa-834f-49e7c1a4b707', 542: '12bba9db-d155-4f1a-94ec-809b8f75a214', 543: '7388627e-6829-4356-896c-d47d1240b79d', 544: 'bd06435f-06db-42d1-98f5-a2b1320a45f1', 545: 'cbec239c-ef94-421b-8feb-cf4f2cd9aef7', 546: 'e0cb32a2-67ed-48fb-890a-fa563825af21', 547: '49143b8e-eea7-4813-876a-cd2f85c40cec', 548: '7ba443c3-d868-4068-a05f-4db5de7615ca', 549: 'f30707a3-3e73-4ef7-962b-850c121fa989', 550: '74f175f8-e913-49a5-a3ca-7116d985099f', 551: '640d144b-3065-473c-9359-84c154e5fee3', 552: 'df904ac7-d0f3-46ec-85d1-91cf66701755', 553: '864967ff-838d-42b7-a769-774fb3e3ae97', 554: '5acae39e-8a8d-48bc-b88b-8a6f03e1d19a', 555: 'af22166d-0eec-4ae1-85a9-7831e6c75e2f', 556: 'b288c1fc-ff2b-4d12-bf53-3f0508c7a43e', 557: '6b738282-df09-4e7c-ac35-762b4821ef1c', 558: 'aa6ac5c8-e0e3-4474-b326-d6e01ce75832', 559: '0f8fe4c9-a8b2-4a4c-b632-28f9e362e170', 560: '7ce599cf-36f0-4cdf-a692-fcb64ba5325f', 561: '0578358a-feea-478e-9d8c-dfafe06aaa15', 562: '88dcc245-966f-49f1-a48d-5db392700d10', 563: 'fec619d9-1641-4c4f-8322-b0d9a04c3438', 564: '0eaca313-a5cd-437c-9158-e21230bb1de7', 565: 'af705c59-8b9a-4fd0-a258-d7ce553a6992', 566: '2226595d-a0ea-43e4-8b70-6a05fbf3d8df', 567: '57fee77e-e956-4bc6-9b80-1355dae11f75', 568: '4a9b5624-fb9a-4e50-8c90-5e62eadad748', 569: '85c8c2a6-79f6-4b84-a077-e946c26032c5', 570: 'cad39a40-b59d-449a-9998-0301f62976b6', 571: '9e2646b6-46bb-4759-a357-b02688c01355', 572: '71b2984f-a36e-4965-bda7-ec06b058bd70', 573: 'df9dacee-2716-4731-b9e6-ea4c494eed3a', 574: 'f90d3732-e60b-4bbf-a194-fe1916223394', 575: '7ccb8fdc-b251-4e04-8168-6139428d0a1e', 576: '99d3f481-58db-46ce-912a-29e1f0337edb', 577: '3a9d927c-fd86-4034-a7bd-b48d89b9931e', 578: 'c198a850-974e-4fa2-b339-bfe27998440a', 579: '35a17ac6-7061-47f8-a235-c7b955709ec6', 580: '96b3af4d-d391-4cd3-8757-08572726a05a', 581: 'b171fc5c-4c5c-4fab-8ce5-933461e315d6', 582: 'a3963d68-389f-4aa5-8f1a-e9d6d29fbd9f', 583: '9e523992-a522-439c-9484-3e5693fcf2f9', 584: 'da021d52-f0fc-46a9-8b29-2f7577ac0e55', 585: 'ffe2d80f-11ab-46b6-8354-e67ce65a7439', 586: 'f1953947-7322-42a3-97ab-c92010508b41', 587: 'd6cf2fe1-da22-45fd-ba3e-52e7c5979864', 588: '027bd8b4-7088-485e-b83a-5aa31ea906ff', 589: '5ac16c8c-94af-4296-91a1-29338a6d4d35', 590: '1681c7a6-1af1-441a-a37c-ac10df5479c7', 591: 'a8127b41-d7e6-486a-8fbf-701f15aef28a', 592: 'd60943ab-6a76-4028-9da9-8f9c7352a608', 593: 'a4dbf848-04c8-401c-af95-e25cfb5feec0', 594: 'c1429d14-2dec-4a56-b362-ec1ad53e5f7c', 595: '6a199f83-f5b7-434f-b97a-9c203e069700', 596: 'fbe80ed4-ca02-4f29-a011-5be8826fda29', 597: '72fbaf0e-df93-4c49-b6f5-5fe951c2350c', 598: 'acc11de0-f793-43a9-8a4f-9610564dff56', 599: '730de809-6eff-4524-8dcb-f7c5c0aebb19', 600: 'c50f94b4-6f8b-4404-8012-68fdba60d13a', 601: '5206a0e6-64a8-487a-9813-1c00d9f13a1c', 602: 'a98c268c-d476-4197-b9c0-4f6e8151560a', 603: '211557be-6bf3-41b2-958b-1a1847514835', 604: 'a15be892-afe0-4dad-8eb1-011f9650397d', 605: 'b418ed19-ee26-4fce-9e2e-b1297159fd66', 606: 'b6cfdcab-2dc0-4b20-a798-3cb5965eecb6'}
2025-07-07 02:22:44,706 - INFO - length of chunks: 607
2025-07-07 02:22:44,709 - INFO - Retriever is working good.
2025-07-07 02:22:53,314 - INFO - Transcript : welcome to the ultimate Django course in this course I'm going to teach you everything you need to know about Jango from the very Basics to more advanced concepts so by the end of this course you'll be able to use Jango to build production grade backends for your web and mobile apps if you have always wanted to learn web development with python you are in the right place we'll use Python and Django to build and deploy the back end for an e-commerce application if you're looking for a comprehensive organized and practical course that takes you from Zero to Hero and prepares you for the job this is the right Django course for you everything you need to know about Django is in one place in the right order so you don't need to jump back and forth between random tutorials I'm msh hamadani and I've taught millions of people how to advance their software engineering skills through my YouTube channel and online school Cod with.com if you're new here be sure to subscribe as we upload new videos all the time now let's jump in and get started [Music] let's talk about what you need to know to take this course for starters you need to know python you need to know the basics of python as well as objectoriented programming Concepts such as classes inheritance polymorphism and so on you should also know the basics of relational databases so you should be familiar with Concepts such as tables columns primary and foreign Keys relationships and so on if you need to refresh the fundamentals I have a couple of beginner level tutorials on my my YouTube channel as well as comprehensive courses on my website codewithmosh docomo that you're the right student for this course now let's talk about how you should take this course first and foremost I want you to watch this entire course all the way from the beginning to the end even if you're familiar with jangle because along the way I will share a lot of tips and tricks and I don't want you to miss out on any of them if you taken any of my other courses you know that I'm not going to waste your time with repetitive or useless stuff so make sure to watch every lesson now while watching each lesson I want you to take notes you can just write down some keywords on a piece of paper if you don't want to write a lot of notes I strongly believe that the act of writing things down will help you remember new things that you learn then after each lesson go through your notes and repeat the same steps I show you in the video this is exactly how I personally learn new things also I've care designed tons of exercises that help you understand and remember the materials so make sure to do all these exercises because the more you practice the better you'll be at Django or coding in general welcome back to the ultimate Jango course in this section we're going to talk about the basics of Django first I will give you a quick introduction to what D Jango is and why it's so popular then we'll talk about the fundamental web development Concepts that every web developer must know next we'll set up our machine for development and create our first Jango project once that project is up and running I will show you two essential techniques for debugging D Jango applications this is going to be a short and sweet introduction to D Jango so let's jump in and get [Music] started so what is D Jango and why is it so popular well Jango is a free and open-source framework for bu building web applications with python it's not the only web framework for python but it's the most popular one because it helps us build a website in less time with fewer lines of code that's why a lot of companies like YouTube Instagram Spotify and Dropbox use D Jango in their text stack now Jango is what we call a batteries included framework which means it comes with a lot of features out of the box so we don't have to code them from scratch for example it gives us an admin interface for managing our data which is a huge timesaver it also has an object relational mapper that abstracts a database so we can query or persist data without writing a lot of SQL code it also comes with an authentication package for identifying users it also has a package for caching data and much much more so since D Jango offers all these amazing features we can focus on our application and its requirements we don't have to reinvent the wheel and code all these features from scratch now once in a while you might come across someone like our popular super star developer John Smith who thinks D Jango is a piece of crap because it's old and Bloated with so many features he used it hated it and then rewrote his entire project with a new shiny framework that is faster well saying a framework is better than Dango because it's faster it's kind of like saying a Ferrari is better than a truck because it's faster what if you want to move something you're not going to use your Ferrari for that right so a white software engineer doesn't pick up a framework merily based on it performance there's so many other things you need to take into account like the maturity of the framework how stable it is from one version to another its learning curve the size of the community and so on D Jango has been around for a long time and it has a huge community so there are tons of Jango packages built by the community that you can reuse in your applications also if you get stuck there's always someone out there to help you if you want hire people there are tons of people to choose from so these are the benefits of having a huge Community around the framework now regarding Jango features yes Jango comes with a lot of features but you don't have to use or even learn all of them because all these features are optional so you can use the features that make sense for your own application so in my opinion debates about the best framework in the world are useless we all like different things and just because someone doesn't like Django it doesn't mean it's bad a lot of companies are using D Jango and are looking for Jango developers here in the US the average salary of ajango developer is just over 100 $177,000 a year so if you like Python and want to get into web development learning Jango is a good investment for your [Music] future so you learned that D Jango is a framework for building web applications with python now let's talk about some of the fundamental concepts you need to understand to build web applications let's say we're going to build an online store and publish it at mh.com now this website is going to have two parts or two applications a front end and a back end the front end is the part that is loaded inside a web browser on a client machine it's the part that the user sees and interacts with the back end is the part that runs on a web server and is responsible for data processing validating business rules and so on now let's imagine that Alice wants to visit our website so she points her browser to mhbay.com this address is also called a URL which is short for uniform resource locator it's basically a way to locate a resource on our internet a resource can be a web page an image a video a PDF and so on so Alice types mosh by.com in her browser and presses enter at this moment a browser sends a request to the web server that hosts our website and says hey Alice wants to see the homepage so the web server should take this request process it and return a response back to the client this data exchange is defined by a protocol called HTTP which is short for hypertext transfer protocol it defines how clients and servers can communicate so this is the big picture as Alice navigates our website for each page her browser sends an HTTP request to the server and receives an HTTP response now as part of building the backend for this website we need to decide how we're going to respond to clients one option is to generate the requested page on the server and return it to the client we use HTML for that HTML is short for hypertext markup language it's a simple language for representing web pages on their content every web page you have seen on our internet is built using HTML so one option is to generate the page on the server and return an HTML document to the client the other option is to return only the data needed on the requested page and have the client generate the page so instead of putting a complete page or a complete HTML document in an HTTP response we only return the data like the list of products now what is the difference well if we push this responsibility to the client we can free up the server so it can serve more clients our application will be more scalable that's why over the past few years this approach has become more trendy and is now considered the industry best practice these days we have tools like react angular and view for generating web pages on the client these are all client side tools that are used by frontend developers in contrast we have server side tools for building back ends D Jango Falls in this category so you should not compare Django with let's say react you may compare Jango with other server site Frameworks like as.net core which is used by C developers Express used by JavaScript developers and so on so if you push the responsibility of generating web pages to the client the server essentially becomes a gateway to the data on the server we can provide endpoints that the client can talk to to get or save various pieces of data for example we can provide one endpoint to get the list of products and another endpoint to get the list of orders someone has placed now all these endpoints together represent the interface that clients use to talk to the server in technical terms we say the server provides an API or an application programming interface to clients this API is essentially like the buttons on a remote control all these buttons together represent the interface or the API we use to interact with the TV Okay so so in this course our Focus will be on using D Jango to build an API for our online store client applications can use this API to get or save the data how these clients are built is irrelevant here we can use react angular or even plain JavaScript that falls under frontend development which has nothing to do with Jango once we build this API if you know frontend development you can always build a client app that talks to this API all right now that you understand the big picture we ready to set up our development environment and that's what we will do [Music] next all right let's make sure you have the right setup before we start coding the first thing I want you to do is upgrade your python to the latest version so head over to python.org download and download the latest version of python for your operating system once you do that then open up your terminal window and run python D- version to make sure you have upgraded your python correctly now here we see Python 2.7 because on Mac we have two different versions of python running side by side we have the old python 2 which is now deprecated and we also have Python 3 so if you're using a Mac you have to run python 3-- version but if you're on Windows or Linux you have to run python D- version okay so here I'm using python 3.9.5 great next we're going to use pip or pip 3 if you're on Mac to install pip NV I talked about pipn in my python course it's basically a dependency management tool for installing our application dependencies in Virtual environments this way our application dependencies will not clash with other applications dependencies okay so let's go ahead and install this now in this course just like my other courses I'm going to use Visual Studio code or vs code as my editor it's just my personal Al preference if you have a preference for a different tool like pie charm that's totally fine having said that I highly encourage you to use vs code because throughout the course I'm going to show you a lot of shortcuts and time-saving tips that will not apply to your editor in case you don't have vs code you can get it from code. visual studio.com now once you run it I want you to go to the extensions panel over here and search for python make sure to install this extension because with this we get features such as intelligence debugging code navigation and so [Music] on all right now that we have installed all the necessary tools let's create our first triango project so here in the terminal window I'm going to go to my desktop you can go anywhere on your machine it doesn't really matter now we're going to create a directory called store Front that is the n project next we go inside this directory and run pipm install Jango so we're going to install Jango using pipm inside a virtual environment now let's go ahead all right now take a look so over here you can see that pipm has created a virtual environment for this project down below you can see the path to this virtual environment if you're on Windows you're going to see something like C drive backs slash whatever now if you're on on Mac and using zshell which is this fancy colorful terminal window we can hold down the command key and click on this path to go into it otherwise you can just copy this and use the CD command to go inside this directory now take a look so here's our virtual environment in this environment we have this bin folder that contains a bunch of binaries for example we have python pip Jango admin and so on so back to the terminal pipm created a virtual environment and installed D Jango inside that environment but in addition to this pipm also created two files in this directory pip file and pip file. loock so I'm going to open this directory using visual studio code by running code period if this doesn't work on your machine just drag and drop this folder onto vs code all right so here's our pip file this is like package.json for JavaScript projects so in this file we can see that our project needs this particular version of python and under packages you can see the packages that our application is dependent upon so here we have D Jango equals asterisk that means any version or the latest version of Jango if we installed a particular version of Jango we would see that version here now back to the terminal window we need to activate this virtual environment so we'll use the python interpreter inside this virtual environment not the one that is installed globally on this machine to do that we're going to run pipm shell okay next we're going to use D Jango admin to start a new project D Jango admin is a utility that comes with Django so if you run it we can see all these commands that we can use to work with Django project as we go through the course you'll become familiar with this commands in this lesson we're going to use Jango admin start project and we're going to call that project store front now back to vs code Jango admin created this directory for our project and inside this directory it created another directory that is the core of our application in this directory we have this files which I'm going to talk about in a second but before I do so let's get rid of this redundancy because we have three storefront directories the top one is the one that we created earlier in the terminal and then we have these two other d director is one for the project one for the core of our application so I'm going to delete this project directory now we're back in the previous step so we don't have a Jango project at this stage now back in the terminal let's bring up the last command but type a period at the end this tells D Jango to use the current directory as the project directory so D Jango is not going to create an additional directory for our project okay now take a look so we have this directory which is the core of our application in this directory we have this init file which defines this directory as a package we have the settings module where we Define our application settings we have the URLs module where we Define the URLs of our application and these two other modules that are used for deployment for now don't worry about them now next to this directory we have this file manage.py this is a wrapper around D Jango admin so going forward instead of D Jango admin we're going to use manage.py the reason for this is that manage.py takes the settings of this project into account let me show you what I mean so now that we have a project we want to run a web server so another command that jangle admin provides is run server however if you run jangle admin run server we get an error saying requested setting debot but sending are not configured because at this point Jango admin doesn't know about the settings of our project so now that we have a project instead of Jango admin we're going to run python manage.py now look we see the same commands that Jango admin provides so here we can say python manage.py run server now optionally we can supply a port number if we don't Supply this by default this will use port 8000 but you might have another application running on Port 8,000 in that case you might want to explicitly set the port number so let's go ahead with that now we don't get an error because manage the P knows about the settings of our project now here we get this warning saying you have 18 unapplied migrations don't worry about this yet we'll talk about this soon so if you look over here you can see that D Jango has started a development server at this address so we can copy this and paste it into browser or if you're on a Mac and using zshell you can hold down the command key and click this all right beautiful our first Django project is running successfully so let's move on to the next [Music] lesson so far I've been using a separate terminal window but vs code also has an integrated terminal window that is easier to use but to use that we have to properly configure it to use the python interpreter inside our virtual environment let me show you how to do this so back to our terminal window first we're going to stop the web server by pressing controll and C okay now back in vs code on the top Under The View menu look we have this command pallet the shortcut on Mac is shift command and P now here we're going to search for python interpreter So currently vs code is using this python interpreter that is installed globally on this machine we don't want to use this we want to use the one inside our virtual environment but how can we find the path to our virtual environment very easy so back to the terminal let's run pip andv d-van all right here's the path so let's copy this good now back to vs code we're going to select enter interpreter path then we're going to paste the path and append slash bin slash python at the end if you're on Windows instead of a forward slash you have to use a back slash okay good now in this project we have an extra directory vs code we have a settings file and here we have the pass to python interpretor good with this we can go to the view menu now look we have this integrated terminal the shortcut on Mac is control and back take now vs code automatically activates the virtual environment for this project so here we can run python manage.py run server good so going forward I'm going to use the integrated terminal window here it's easier we can always hide it by pressing control and back take or bring it back we can maximize it move it around and so on Now One Quick tip sometimes when running this command you might get a syntax error saying invalid syntax this happens every now and then when vs code fails to activate the virtual environment for this project to solve this problem all you have to do is open a new terminal window and look vs code executed this command to activate the virtual environment for this project now we can run python manage.py run server great [Music] all right let's talk about apps so every Jango project is essentially a collection of various apps each providing certain functionality just like the apps on your mobile phone each app provides a certain functionality right Jango projects are exactly the same so in this project let's open up the storefront directory and then look at our settings module now we can collapse this panel by pressing command and B on Mac or control and B on Windows okay now in this module we have a bunch of different settings in this lesson we're going to look at the install apps so every Jango project by default includes these apps the first app is the admin app which gives us an admin interface for managing our data then we have the off app which is used for authenticating users then we have content types app which we'll talk about later in the course next we have the sessions app which is kind of Legacy we don't use sessions anymore a session is a temporary memory on the server for managing users data these days when building apis with Django we don't use the sessions app so we can come here and delete this app then we have the messages app which is used for displaying onetime notifications to the user and finally we have the static files app for serving static files like images CSS files and so on so each app provides a certain piece of functionality okay now we can also create our own apps here so let's save this file now let's open up the terminal window by pressing control and back tick so here's our terminal window where we have our development server running we're going to open a new terminal window okay now let's expand this to clear the window we simply press contrl and L now we're going to run python manage.py start app and we're going to call this app playground okay so let's close this window and open up the Explorer panel all right look here's our new app which is represented using a folder with a special structure so every Jango app has the exact same structure here we have the migrations folder for generating database tables we'll talk about that later in the course we have a complete section about this topic we have the admin module where we Define how the admin interface for this app is going to look like next we have the apps module where we configure this app app so the name is misleading I don't know why Jango developers decided to call this module apps it would be better if it was called config that's just my two sets next we have the models module where we Define the model classes for this app we use model classes to pull out data from the database and present to the user next we have the tests module where we write our unit tests and finally we have the views module which we'll talk about in the next lesson again the name is misleading this is not the view that you think if you come from a frontend develop background so what we have here is essentially a request Handler it's not a view it doesn't have a template or HTML again we'll talk about that in the next lesson so we created a new app now we need to register this app in the settings module so every time you create a new app you need to register it here in the list of installed apps we simply add the name of the app which is called playground save the changes done in the next lesson we're going to talk about views [Music] all right let's talk about views so earlier you learned that HTTP is a request response protocol so every data exchange involves a request and a response this is where we use views in Django so here in the playground folder let's open up the views module this is where we Define our views or view functions a view function is a function that takes a request and returns a respon response so more accurately it's a request Handler in some Frameworks it's called an action in Jango it's called a view but I don't agree with this name because from an architectural point of view a view is often associated with something that the user sees that part in Jango is called a template and we'll talk about that later in this section now that aside let's create our first view function so we're going to create a function we can call it anything we want I'm going to call it say hello now this function should take a request object and return a response so first on the top from Jango that HTTP package we're going to import the HTTP response class now in this function we can do anything we want in a real word scenario we can pull data from a database we can transform data we can send emails and so on for now let's just return a simple response so we're going to return an instance of the HTTP response class and in this object in this response you want to add a simple string so let's say hello world okay so this is our first view or first view function now we need to map this View to a URL so when we get a request at that URL this function will be called and that's what we're going to do [Music] next all right here's our Django project now let's say whenever we send send a request to playground /hello our view function should be called and return hello world to the user let's see how we can do that so back to our project here in the playground folder we're going to add a new file called urls.py we could call it anything the name doesn't matter but by convention we call it URLs now in this module we're going to map our URLs to our view functions so on the top we're going to import the pass function from Django the URLs so from Jango URLs we're going to import the path function now don't worry about memorizing any of these as you practice all of this will become second nature also from the current folder we should import the views module so we can reference our view function now we should Define a special variable called URL patterns all in lowercase make sure to spell it properly because this is what jangle looks for we should set this to an array of URL pattern object we use the path function to create a URL pattern object so if we call this function look at the signature of this function this function has a bunch of parameters the first one is Route which is a string the notation you see here is called type annotation which is kind of a new feature in Python with type annotation we can see the type of parameters and the return value of a function so the first parameter is Route which is a string the second parameter is view which is a function that returns HTTP response object object now look over here this notation represents the return type of this function so the pth function returns a URL pattern object so I'm going to call this function and give it two arguments a route or a URL which is playground SL hello and a view function so from the views module we're going to get say hello note that I'm not calling this function so here we don't have a pair of parenthesis we're just passing a reference to this function okay so what we have here is called a URL conf module that basically means URL configuration so every app can have its own URL configuration but now we need to import this URL configuration into the main URL configuration for this project where is it you saw it earlier so back to the Explorer panel here in the storefront folder we have another URLs module up here we have a bunch of comments about how we should use this module now look over here if you want to include another URL conf there are two things we need to do first we need to import the include function from jangle URLs so over here we have from Jango URLs we're going to import the include function next we need to add a URL to URL patterns so in this module we also have a URL patterns object which is an array of URL patterns object so here we're going to call Path give it a route and then we use the include function to reference the URL configuration module in this app so we're going to call Path and say any URLs that start with playground followed by forward slash should be routed to our playground app so this is where we use the include function now the include function requires a parameter that is a string here we're going to reference playground. URLs so if we send a request to playground /hello D Jango knows that all requests that start with playground should be handled by this app so it's going to chop off the first part of this URL and pass the rest to the URL configuration module in the playground app so back to this URLs module we no longer need to add playground here because we added it once in in the main URL configuration module so we simply add hello followed by a forward slash I forgot to add that we always end our routes with a forward slash so let's save the changes now whenever we change our code D Jango web server automatically restores itself so let's open up the terminal window make sure we don't have any arrows good so back to the browser let's send a request to this endpoint great we see Hello World on the screen so so this is how we can map URLs to view functions next we're going to talk about [Music] templates so I told you that views in Django are not really views they're more like request handlers or actions what we often call a view in other Frameworks is called a template in Django so let's see how we can use a template to return HTML content to the client so here in the playground app we're going to add a new folder called templates and in this folder we're going to add a new file called hello.html and of course we could call it anything here we can write some HTML markup for example we can type H1 and press tab to add an H1 heading and say hello world now don't worry if you don't know HTML we're not going to use it in this course I just want to show you how Jango templates work so let's save the changes now back to our view function instead of returning a plain HTTP response we're going to use the render function to render a template and return HTML markup to the client so let's remove this line and call the render function now look at the return type of this function it returns an HTTP response object so here we're going to return the response now let's remove the brackets and type them again so we can see the function signature the first parameter here is a request object and the type of this is HTTP request so we're going to pass this request object right here now the second parameter that's the name of our template which is a string so here I'm going to say hello. HTML the other parameters are optional so don't worry about them at this point now save the changes let's make sure our project works up to this point so back in the browser refresh beautiful now we see HTML content we can verify it by right clicking on this page and looking at the page source so look we returning HTML content great now let's make this a bit more interesting so back to our template instead of hello world we can dynamically render some value so back to review function let's type a comma to see the next parameter that is a context object and the type of of this is a mapping of string to any that means we can pass any mapping object that Maps a string value to any other type of object so here we can pass a dictionary so let's pass a dictionary the type of the key should be a string so we can call that name and we're going to set that to a value like let's say MH now back to our template instead of hello world we can render the name that we passed here so we type two pairs of braces and in between we type the name of the key save refresh beautiful now in this template we can also write some logic so we can type an if statement so we type braces and in between them we add two percentage signs in between them we can write an if statement so we can say if name is set we can render it here otherwise we can render hello world and of course we need an end if Clause as well so and if now this syntax is kind of ugly but the good thing about D Jango is that it's modular so you can easily replace D jango's default template Engine with your preferred template engine but once again we don't really use templates in D Jango projects that often these days there are special cases for them but for the most part we use Django to build apis that return data not HTML content so I just included this lesson so you know what templates are and how they work we're not going to spend any more time on templates for now unless we encounter a situation where we really need [Music] them let's talk about debugging Jango applications in vs code this is particularly useful if our application doesn't produce the right result and we want to run it line by line and see where exactly something has gone wrong so click on this icon to open the run and debug panel now the first time you see this message saying we should create a launch. Json file basically we need to create a launch profile so vs code knows how to run or debug this application so let's click on this now in this list select Jango all right here's our launch. Json file what you see here is kind of like a dictionary in Python you have a bunch of key value pairs these key value pairs Define a launch profile so vs code knows that to run this application it should use the current python interpreter to run manage.py which exists in our workspace folder and then as an argument it should Pass Run server to it here we can add an additional argument to specify the port so it doesn't clash with Port 88000 which is currently in use okay save the changes we're done with this file so let's close it now if you're curious let me show you where this file exists is added to our project up here inside the vs code folder so here's our launch profile now that we have a launch profile if we go to the run and debug panel we see something else so here we can start our application for debugging but before doing so I want to write some dummy code here in our view function so let's set X to one one and Y to two now I'm going to click on this line to insert a break point when we add a breako vs code will execute every line of code until it hits our breakpoint from that point onward we can execute our code line by line so let's add a breakpoint and then start the application for debugging all right let me collapse this window good so in this new terminal window we have a development server listening on Port 9000 so let's hold down the command key on Mac or control on Windows and click on this link all right here's what we get the homepage of our project is gone because we have registered a custom route that is playground SL hello so we see the homepage only the first time we run our Jango project so let's go to playground SL hello all right our breakpoint is activated and we are on this line now on the left side in the variable section you can see the local variables So currently we have the request object that is the request object that we receive in this function so we can expand it and inspect its various attributes we don't want to do that for now so let's close this we want to execute our code line by line so here we have a bunch of functions the first one is step over and the shortcut for this is F10 with this we can step step over the current line so if we press F10 this line gets executed and now we on the second line now look over here in the list of local variables we have X and its value is one this is very useful when debugging applications so if something is not calculated properly we can inspect it here now most of the time you can see your local variables here but if not you can always add them in the watch window so before recording this video I was practicing that's you see X here let me select this and delete it so in your watch section you're not going to have any variables to add one we simply click on this and then type the name of our variable okay so this is how we can step over various lines so we can press F10 again and again so this function is executed and now back in the browser we see the final result now let's do something more interesting so back to our code let's close the terminal window so we have more space I'm going to define a function here called calculate and here we're going to set X to one y to two and return X just some dummy code now over here we're going to call the calculate function okay now save the changes back in the browser let's refresh so our view function gets C now we are right here now this time instead of stepping over this line we want to step step into it because if you step over this line we're not going to see what happened in the calculate function we see the final result so we see X is set to one and we can verify that over here as well but sometimes we need to step into a function to see what is happening there maybe there is a bug inside the calculate function so let's restart the debugger okay I'm going to close this back in the browser let's refresh this page okay we're back to this line now this time we going to step into this function so look over here this is the icon for stepping into a function and as you can see the shortcut is f11 so if you press f11 we go inside the calculate function now we can execute each line using F10 or step over and see where something has gone wrong now let's imagine this calculate function is a large function with a lot of code at some point we want to step out of it without having to execute every line of code in this function there's a shortcut for this so look over here that is step out the shortcut is shift and f11 so if you press shift and f11 we get back to the previous function so this is how we can debug Jango applications in vs code now once we're done it's always a good practice to remove these break points otherwise they get in the way so as you debug your applications you place various break points in different parts of your code and you will hit them all the time so always remove your breakpoints once you're done with them so we're done with this debugging session now we can disconnect by pressing shift and F5 or clicking on this icon all right now one last step before we finish this lesson on the top Under The Run menu look we have a command called run without debugging the shortcut on Mac is control and F5 so if we use this shortcut we can start our application without having to run python manage.py run server let me show you what I mean so first let's bring up our terminal window here's the second terminal window that we use for debugging I'm going to delete this here's the first terminal window where we started our application by running python manage.py run server so let's press contrl and C to stop the server good I'm also going to delete this terminal window let's imagine we just open this project in vs code day one now to run this application without debugging we can press controll and F5 now our application has started on Port 9000 so we can go to this address and then hit playground /hello so this is how we can run our application without debugging just remember that if you use this command your breakpoints are not going to get hit so if you want to debug your applications you should start it in the debug [Music] mode there is another way to debug Jango applications using a powerful tool called D Jango debug toolbar so if you go to Google and search for Django debug toolbar you're going to find this page over here you're going to find the installation instructions so I highly encourage you to follow along with me and repeat the same steps so we install this toolbar together so first we have to use pip or pipf to install D Jango debug toolbar so back to vs code I'm going to open up a new terminal window and as you can see vs code used the source command to activate our virtual environment so now let's run pipn install django-debug-toolbar good now back to the documentation the next step is to add debug toolbar in the list of installed apps in our settings module so back to vs code we can press command and P on Mac or control andp on Windows to bring up the search box now we search for our settings module good now in the list of install apps at the end we're going to add debug underline toolbar good now the next step the next step is to add a new URL pattern in our main URL conf module so I'm going to copy this line and back to vs code let's bring up the URLs module we're going to pick the one in the storefront folder okay now we add a comma here and paste that line now here we have a compilation error because debug toolbar is a module that we have to import on the top so if you look at the documentation you can see that over here import debug toolbar so copy this and paste it right here good now back to the documentation the next step is to add a middleware we use middleware to hook into D jango's request response processing so in our settings module we have a setting for middleware we're going to add this line in that file so copy this back to the settings module here we have the install apps right after that you can see the middleware setting so we're going to add that on the top now the final step is to add our IP address in the internal IP setting so for local development we should use 1271 so I'm going to copy this entire setting because by default this doesn't exist in a new Jango project so copy this and you're going to paste it anywhere in this settings file it doesn't really matter okay save so we have completed all the steps now back in the browser if you go to this URL playground /hello we don't see the toolbar it should appear here because the toolbar only appears when we return a proper HTML document if you right click here and look at the page Source you can see that we are not returning a proper HTML document so we don't have the HTML head and body elements so let's open up hello.html now on the top we type HTML press tab now in inside these elements we're going to add a body and then inside the body we're going to add the code that we had earlier so let's move that right here good now we have a proper HTML document of course the head element is missing but it doesn't really matter now back to the browser refresh and here's D Jango debug toar here we have different panels like history we're seeing the URLs we have hit so far we have versions to see the version of Django Python and debug to we're running we have processing time we have our settings we have request headers and so on now my personal favorite panel is the SQL or SQL panel here we can see the queries that are sent to the database so later in the course where we talk about quering the database using D jango's object relational mapper we're going to come back to this panel and see what queries Jango will generate and send to the database so that's it for this lesson we're done with this section in the next section we're going to talk about about building a data model so I will see you in the next section welcome back to another section of the ultimate Django course in this section we're going to talk about models which are used to store and retrieve data we'll start off by quick introduction to data modeling to make sure you know the essential Concepts then we're going to design the data model for an e-commerce application next we're going to talk about organizing our models in apps to improve reusability this is one of the areas that is often misunderstood so I'm going to demystify it once for all and then we'll spend the rest of this section in coding model classes we'll use these classes to store and retrieve data throughout the course so let's jump in and get [Music] started the first step in every Jango project is figuring out the pieces of data we want to store so what entities or concepts do we have in an e-commerce application well for starters we need the concept of a product with attributes like title description price and imager now in a real scenario our product entity might have other attributes it really depends on the requirements of our application for now we just want to keep things simple okay now quite often our products are divided in different categories like shoes beauty products fruits and so on so we need another entity called collection or category with an attribute called title now we need to add a relationship or an association between these entities so we can start from one end and navigate to the other end for example we can get a collection and find all the products in that collection okay now let's assume that in our application a product can belong to one and only one collection and a collection can have multiple products so an asterisk represents many we could also use an N here okay now we have a one to many relationship between collection and product so relationships can be one to one one to many and many to many back to our diagram now over here we can add a label called products and that means when we code these entities or these classes in the collection class we're going to have an attribute called products for now I just want to hide this for Simplicity okay now sometimes we can have multiple relationships or multiple associations between two entities so let's imagine that a collection can optionally have a featured product that is the product whose picture we want to show to the user so we can add a second relationship between these entities now look at this number here 0 to one means a collection can have zero to one product and we're going to call that attribute featured product so once again that means in the collection class we're going to have an attribute called featured product okay now you might ask what about the ID attribute shouldn't every entity have an ID attribute yes but jangu is going to automatically create that for us that's why I haven't shown it here now A little exercise for you grab a piece of paper and identify the other essential entities we need in an e-commerce application just the bare minimum don't go ahead and create a complex diagram like this I don't want this there are only five entities that I want you to identify so spend a couple minutes and identify these entities along with their attributes and relationships then come back see my solution [Music] all right so this is what we ended up with in the previous lesson we have a one too many relationship between Collections and products now don't take this as a hard and fast rule maybe in your application a product can belong to many collections then you're going to have a many to many relationship between products and collections okay so back to our model I'm going to remove the collection from here so we have some free space on the screen now what else do we need here well in every e-commerce application we have the concept of a shopping cart right so we're going to have an editing or a model or a class called cart with an attribute called created at let's assume that we need to know when each card is created so every now and then we can do a clean up and remove cards that are 30 days old I just made this up but in a real scenario you should always design your models based on the requirements of your project they make up your own rules okay now we need a relationship or an ass association between products and carts because a cart can have multiple products and a product might be in different carts so here we have a many to many relationship between products and carts now sometimes the relationship between two entities can have attributes for example if a product is in a shopping cart we need to know how many instances of that product we have in the shopping cart so this relationship itself should have an attribute called quantity so we're going to add a new entity here called cart item now look at the notation I've used to represent this concept I've connected cart item to the relationship using a dashed line that means cart item represents the relationship between these two entities product and cart this is what we call an association class so cart item is an association class okay now there's another way to show this instead of using an association class we can add a relationship between cart and cart item because a cart might contain multiple items and an item belongs to one and only one cart and similarly we can add a relationship between product and cart item because each card item represents a single product and a product might be referenced by many card items so here we have two one too many relationships between these entities now compare this with the association class notation so we can either add a many to many relationship with an association class or two one to many relationships it's a matter of personal preference okay so we're done with the shopping cart but you might ask what about the user or the customer that owns this cart where is that in the diagram well I haven't connected cart with an entity like Customer because we don't want to force people to register and log in before they can add products to their shopping cart okay so there's no relationship between carts and customers so carts are essentially Anonymous anyone can have a cart whether they're Anonymous users or registered customers Okay so so we're done with the cart now let's talk about customers so our customer entity can have attributes like name email username password and so on now for Simplicity I'm only showing name and email here now a customer can have many orders and each order belongs to one and only one customer so we need a one to many relationship between customers and orders now once again the order entity might have multiple attributes for now we just want to know when this order was placed okay now an order can contain multiple products and a product can be in multiple orders so we have a many to many relationship between orders and products and similar to the shopping cart example this relationship itself needs attributes so here we need another entity called order item with an attribute called quantity that's our association class alternatively we could add a relationship between order and order item because each order may contain multiple items and each order item belongs to one and only one order similarly an order item references one and only one product while a given product might be referenced by multiple order items so two one to many relationships so these are the entities that I wanted you to identify but to make this project more interesting I decided to throw in one more enti tag here we have a many to many relationship between products and tags because a product can have many tags and a tag might be referenced by different products we'll come back to this anti in the next [Music] lesson so I told you that a Django project contains one or more apps and just like the apps on your phone each app in a Django project provides a specific piece of functionality so that means each app is going to have its own data model so in this lesson we're going to look at a few different ways to organize our entities in different apps one way is to have a single app called the store and drop all of our entities here now we can bundle and distribute this app for a pip and this way anyone can install this app in their project and get all these models and the functionality around them so next time we're working on an e-commerce project we don't have to rewrite the same functionality over and over we simply install this app in our project and write extra code for customization great but there's a problem here as this application grows and gets more complex it gets bloated with too many things like too many models too many views and other stuff this is what we call a monolith like a large heavy piece of stone so at some point our application might become hard to understand hard to maintain and hard to reuse it becomes like one of those remote controls with too many buttons when designing these apps we want to follow the unix's philosophy so each app should do one thing and do it well so here's another solution we can break down this project into four small apps the products app which represents a product catalog so here we're going to have three entities product collection and tag then we're going to have the customers app for managing customers we're going to have the shopping cart app for adding the shopping cart functionality and the orders app for adding the ordering functionality not bad right well this is actually a poor way of breaking down this project for a number of reasons look at the coupling or dependency between these apps the orders app is dependent on the shopping cart app which is dependent on the products app so next time we're working on an e-commerce project we'll have to install all these apps one by one first we have to install the products app followed by the shopping cart app the customers app and the orders app ideally each app should be self-contained so we can easily drop it into a new project the other problem is that if we publish a new version of the products app that might cause a breaking change in the shopping card and subsequently orders apps so anyone using these apps have to upgrade all these apps together together again more and more work also it doesn't really make sense to have the shopping cart functionality without having a product catalog right why would we ever want to add the shopping cart functionality to a project without a product catalog so shopping cart functionality and product catalog always go together by the same token why would we ever want to add the shopping cart functionality to a project without the ability to place an order just to allow people to add something to their shopping cart then what again it doesn't really make sense so these concepts are highly related and should be bundled together if we separate them we increase coupling between apps and we end up with the problems I just talked about so doesn't mean we have to go back to the monolithic design no there is a middle ground here look at the tag entity the ability to tag products is optional we don't necessarily need it in every e-commerce application in fact we might need it in other types of applications like a blog or video platform and so on so so tagging is not specific to products or an e-commerce application it's a separate piece of functionality so I'm going to move the tag entity to a separate app called Tags and here we're going to have another entity called tagged item which represents an item that is tagged it can be a product an article a video and so on it's an abstract concept now with this separation each app is self-contained and provides a specific piece of functionality so we can use either or both of them them in a new project depending on what we're going to build plus we have zero coupling between these apps so we can independently change and deploy them without affecting other apps this is the proper way to break down this project into multiple apps so here's the takeaway if our app boundary is so large we'll end up with a monolith that gets bloated and becomes hard to reuse on the other hand if our app boundaries are so small and fine grained we'll end up with a lot of coupling between them a good design is one with minimal coupling and high cohesion meaning High Focus so each app is focused on a specific piece of functionality and includes everything needed to fulfill that piece of functionality okay so back to vs code we're going to create two new apps so we run python manage.py start app the first app is store and the second one is tags okay now as I told you before every time we create a new app we should add it in the list of installed apps so let's close this window and go to our settings module here's the list of install apps I'm going to add those apps right here so store and tags all right we're done with this step starting from the next lesson we're going to create the model classes for these [Music] apps all right in this lesson we're going to create our first model class so let's go to the store app and open the models module now on the top we have an import statement from D Jango DB which is a package we importing the models module in this module we have a bunch of useful classes that you're going to learn about as we go through this section so over here we're going to create our first model class so we Define a new class called Product and have it inherit the model class in Jango that class is defined in the models module so models. model now here we need to define the fields of this class What fields do we need here well every product needs a title so we set title to then we go to the models module now here we need to choose a fi type so let's take a break here now here on Google let's search for Jango fi types okay here's the model filled reference we're going to get back to this page over and over so on the right side over here you can see all the built-in field types for example we have Boolean field for storing Boolean values we have charfield for storing a sequence of characters or more accurately short or mediumsized strings we have date field datetime field decimal field and so on so as we go through this section you're going to become familiar with this field types so back to our code we want the title to be an instance of the chart field class now all these fi types have a bunch of options so back to our documentation on the top look over here field options these options are common to all field types for example using null we can determine if a field is nullable or not we also have DB index with this we can create a database index on this field we can also set the default value and so on so all these options are available to all fi types now some field types depending on their type have extra options so let's scroll down and find the CH field okay now read over here charfield has two extra arguments we have max length which is required and DB colation which is optional so using max length we can specify the maximum number of characters we can store in this field so here we're going to set max length to let's say 255 characters so this is our first buil now in the next section where we talk about migrations you will see that we can generate our database tables based on the definition of this model so then we're going to have a table called Product and in that table we're going to have a column called title and the type of that column is going to be varar of 255 for now let's not worry about this so that's our first fail what else do we need here we need a description that description can be a long text so instead of a chart field we're going to use a a text field okay the text field doesn't have any required arguments so here we don't have to set the max length Okay what else next we need to add the price field for this I'm going to use decimal field always use decimal field for monetary values we also have float field but floats have rounding issues so for storing monitary values we should always use decimal field now decimal field if you look at the documentation has two required arguments so as an example let's say the maximum price with support in this system is going to be 999999 I'm just making this up so how many digits do we have here six digits how many digits do we have after the decimal point two digits we need to specify these values as arguments here so max digits equals 6 and decimal places equals 2 these two arguments are always required for decimal Fields okay now let's remove the comment another field is inventory we can set this to an integer field we also have positive integer we have small integer big integer and so on and the last field I'm going to Define here is last update let's say every time we update this product you want to store the current daytime here so we're going to set this to models. daytime field and optionally we can set auto underline now to true that means every time we update a product object Jango automatically stores the current datetime in this field we also have Auto Now underline ad with this only the first time we create a product object D Jango stores the current daytime here okay so we don't want this we're done with the definition of the product class now A little exercise for you I want you to create the customer class with this bus first name last name email which should be unique phone and birth date which should be nullable so spend a couple minutes on this and then come back to my solution all right here's my implementation of the customer class so first and last name fields these are both CH Fields with a maximum length of 255 characters next we have email which is an instance of the email field and here I've said unique to true so we don't end up with duplicate emails next we have phone which is also a CH field with a max length of 255 characters and finally we have birth date which is an instance of date field and here I've said null to true so this field is nullable now for birth date I've used a date field not a daytime field because we don't care about the time someone was born okay now you might be curious why we don't have an ID field in any of these classes because as I said earlier Jango creates it for us automatically so every an or every model class is going to have an ID field that is going to be a primary key but what if we don't want to have an ID field what if in this product class we need a field called SKU and this is going to be our primary key so we can set this to let's say a CH field with a max length of let's say 10 characters now here we can set primary key to True with this D Jango is not going to create an ID field and make it the primary key so SKU is going to be primary key okay so since we don't need this field for now I'm going to remove it good so this is how we create model classes next we're going to talk about Choice [Music] Fields sometimes we need to limit the list of values that can be stored in a field for example here in our customer class let's define a new field called membership and set it to models the chartfield with a max length of one now let's imagine in this field we can have one of these three values we can have B that is short for bronze or s for silver or G for gold how can we implement this well let's go back to our documentation earlier I told you that all fi types share these options one of these options is choices and we use this to specify the possible values for a field so what we need to pass here is a sequence consisting of a durables of exactly two items now I know this is a mouthful let's look at a real example so over here we have an array of top holes where each top hole includes two values the first value is the actual value we're storing in the database and the second value is a human readable name so back to our customer class here I'm going to define a new attribute called membership underline choices I'm using uppercase letters here to indicate that this is a fixed list of values we shouldn't mess with it okay so we're going to set this to an array in this array we're going to add three topples here's the first topple for the value I'm going to use B that is for bronze and for human readable name I'm going to use bronze now let's duplicate this a couple times and change this to S and silver and finally G and gold now that we have this array we can go to our membership field and set choices to membership choices okay like this now we can also set the default value so we can set default to let's say B that is for bronze now this works but there is a tiny problem in our implementation if tomorrow we decide to change B to something else then there are two places we have to modify here's one place and here's the other place so the best practice is to Define these values separately so here we can Define another attribute called membership underline bronze we set it to B so this is where we store the actual value and now we reference that in multiple places so here we use membership underl bronze and also we're sending the default value we use membership underline bronze okay now for consistency we should also Define separate attributes for S and G I'm going to pause the video and do this on my own all right here's the end result we have three attributes membership bronze silver and gold and we have used them here now you might be wondering why we need the human readable name well later when we talk about the admin interface you will see that this human readable name will be used in a drop- down list to populate this field we'll talk about that later in the course now A little exercise for you I want you to create the order class with two Fields placed at and payment status place at should be a daytime field and it should be autop populated at the time we create an order object payment status should be a chart fi with these values so P for pending C for complete and F for fail spell a couple minutes on this then come back see my solution all right here's my implementation of the order class so first we have our constants which are payment status pending complete failed and choices and then we have our fields which are place at which is a daytime field and here I've said Auto now add to true so the first time we create an order D Jango automatically populates this field next we have payment status which is a CH field with a max length of one I've set choices to our area of choices and the default value to payment status [Music] pending so you have learned how to create model classes now let's see how we can Implement a onetoone relationship between two models so here in the models module let's define a new class called address and assume that every customer should have one and only one address and each address should belong to one and only one customer so here we have a onetoone relationship between customers and addresses right now let's add a couple of fields here like Street which is going to a CH field with a max length of 255 characters and city with the same definition now as you probably know a database relationship has two ends a parent and a child the parent should exist before we can store the child right I've got a question for you in this relationship which class or which entity is the parent it's the customer because we say the customer has an address so the customer should exist before we can can create an address so here in the child class or the child entity we need to specify the parent so we add a new field called customer and set it to models. one:1 field now this field has a couple of required arguments the first one is the type of the parent model so here we type customer now the second argument is undelete and with this we specify the delete Behavior what should happen when we delete a customer so if we said undelete to models. Cascade when we delete a customer the associated address will also be deleted this is the Cascade Behavior alternatively if this field accepts null values we can use set null so when we delete the customer or the parent record the child record in this case the address is not going to get deleted it's going to stay in the database and the customer field or the customer column is going to get set to null in this case this field doesn't accept null value so it doesn't make sense to use set null alternatively we can use set default so this field will be set to its default value and one other option we have is protect and with this we can prevent the deletion so if there is a child associated with this parent we cannot delete that parent first we have to delete the child now which value we use really depends on the requirements there is no one siiz fits all in this case I believe we should use Cascade because if we delete a customer the associated address should also be deleted now there is one more argument we need to set here and that is primary key equals true if we don't set this Jango will create another field here called ID so every address is going to have an ID and that means we're going to end up with a one to many relationship between customers and addresses because we can have many addresses with the same customer but if we make this field the primary key we can only have one address for each customer because primary keys don't allow duplicate values right so this is how we can Implement a onetoone relationship between two models now you might be wondering if we should Define the reverse relationship in the customer class in other words do we have to go to the customer class and add a new field called address for the reverse relationship no we don't have to do that because Jango automatically creates this for us so we're done with this lesson next I'm going to show you how to implement a onet to many [Music] relationship now let's assume that a customer can have multiple addresses so we want to change this one toone relationship to one to many relationship how can we do this really easy first we need to change the type of the field to foreign key so we're telling D Jango that customer is a foreign key in this table okay next we need to remove primary key equals true because we want to have multiple addresses for the same customer so we want to allow duplicate values in this column right so remove this option this is how we can define a one to many relationship between two models really easy now it's your turn I want you to create a onet to many relationship between these entities so a collection can have multiple products a customer can have multiple orders an order can have multiple items and a card can have multiple items as well so spend a few minutes on this then come back see my solution all right let's look at my solution so I've defined a new class called collection with a single field called title pretty basic but note that I have defined this class before the product class so we can reference it over here so in the product class we have a new field called collection which is a foreign key and this is where we referencing The Collection class defined earlier now sometimes we cannot arrange our code in such a way that the parent class is further up in those cases we can pass their string just a little tip for you now for the delete Behavior I've used protect so if we accidentally delete a collection we don't end up deleting all the products in that collection okay what else do we have here here in the order class we have a new field called customer which is also a foreign key and for the delete behavior I'm using protect so if we accidentally delete a customer we don't end up deleting orders in fact we should never delete orders from our database because all these orders represent our sales so they should never be deleted okay now once again in this case I had to rearrange my code so the customer class is defined before the order class so we can reference it here now we have a new class called order item with four fields we have order which is a foreign key to order and once again we are using protect here so if you accidentally delete an order we don't end up deleting the order items so if an order has at least one item we will not be able to delete it okay then we have product which is also a foreign key and here we're using protect so if you accidentally delete a product we don't end up deleting the associated order items next we have quantity which I have said to positive small integer field this way we can prevent negative values from getting stored in this field and we also have unit price which is a decimal field now you might be wondering why have defined unit price here don't we have it in the product class yes we do but the price of products can change over time so we should always store the price of a product at the time it was ordered okay what else do we have here we have a new class called cart we could also call it shopping card here we have a single field create an ad which is a daytime field and I've said Auto now add to true so this field gets autop populated when we create a new cart and finally we have a new class called cart item with three Fields cart which is a foreign key to cart and here I've used Cascade so if we delete a cart we don't need it anymore we should delete all the items automatically then we have product which is a foreign key to product and here I've also used Cascade so if you can delete a product meaning if that product has never been ordered before then that product should be removed from all the existing shopping carts as well that's why I've used Cascade here and finally we have quantity which is again a positive small iner [Music] field all right let's talk about many to many relationships so I'm going to introduce a new class called promotion and Define a many to many relationship between promotions and products so a product can have different promotions and a promotion can apply to different products so let's define a new class called promotion which is a new model now here we're going to have Fields like description which is going to be a CH field with a max length of 255 characters we're also going to have discount which is going to be a float field we can also have start date end date and so on now we can Define the relationship in either of these classes and as I said earlier D Jango will automatically create the reverse relationship now in this particular case it makes more sense to define the relationship in the product class because we might have a product that we're showing to the user and at the same time we want to show all the promotions that apply to that product so I'm going to go to the product class and over here I'm going to define a new field called promotions so we use a plural name here because we might have multiple promotions now we're going to set this to models do many to many field and just like before we need to specify the name of the target model which is promotion now with this implementation Jango is going to create the reverse relationship in the promotion class so in this class we're going to have a field called Product underline set that returns all the products that a part particular promotion is applied to if you don't like this name you can always change it so in our product class where we Define our many to many field over here we can supply a keyword argument related name if we set this to products D Jango will use this name as the name of the field in the promotion class so instead of product set we're going to have product just remember if you change the default convention in Django it's best to change it consistently everywhere otherwise in some classes you're going to have a field like products and in some other classes you're going to have a field like product online set and this makes your code really ugly so in this implementation I'm not going to use related name I'm going to stick to the default convention okay so this is how we Define a manyo man relationship between two models [Music] earlier I told you that sometimes we can have multiple relationships between two models so here we have two relationships between collection and product now out of the two you have only implemented the one to many relationship now as part of implementing the other relationship we're going to face a situation called a circular dependency which is something we should avoid a circular dependency happens when two classes depend on each other at the same time so the product class is going to be dependent on the collection class and at the same time the collection class is going to be dependent on the product class so let me show you how to handle this situation so back in the code here in the product class we have this field called collection which is a foreign key to the collection class so here we have a dependency from the product class towards the collection class now to implement the other relationship we have to go to the collection class and add a new field here called featured underlined prod product which is going to be foreign key to the product class now here we're going to set UND delete to well if you delete a product and that product happens to be the featured product for a collection here we want to set this field to null so I'm going to set this to models. set null and that means we should make this field nullable so here we pass another keyword argument null equals true now look over here we have an error saying product is not defined we are seeing this error because the product class is defined after the collection class now this is where we have a circular dependency so in the product class we have a dependency to the collection class and that's why we Define The Collection class before the product class however because of the circular dependency now the collection class also needs to be dependent on the product class which is not possible to solve this problem we need to wrap this in quotes and pass a string here so this solves our problem however this introduces a new kind of problem if tomorrow we decide to rename this product class to something else this string is not going to get updated let me show you so we put the cursor here press F to to rename product to something else let's say product one now look this string is not updated so use this technique only if you have to okay now let's rename this back to product good save the changes now let's open up the terminal window we have an error saying reverse query name for Featured product clashes with field name collection what is going on here let me explain so in the collection class we have a field called featured product right now as you know jangle is going to automatically create the reverse relationship for us so that means in the product class we're going to have a field called collection which represents the other end of the relationship and this is exactly where the problem happens because in the product class we already have a field called collection so Jango cannot create the reverse relationship because of the name Clash so here we have two choices one solution is to set related name to something other than collection or if we don't care about the reverse relationship we can simply Type A plus sign here this tells D Jango not to create that reverse relationship now I save the changes look at the terminal the error is gone and our server has started at this address [Music] Perfect all right let's talk about generic relationships so I told you that we want to design the tags app such that we can reuse it in any projects anywhere we want to have the ability to tag items that's why we have two two models in this app tag which represents an actual tag and tagged item which represents a tag applied to a particular item which can be a product a video an article literally anything so let's see how we can Implement these models so back to vs code let's go to the tags app and open the models module here we're going to Define two classes the first one is tag and we're going to give it a field called label which is going to be a Char field with a max length of 255 nothing new so far now the second class is the one that is interesting tagged item Now using this class we can find out what tag is applied to what object now to determine the tag we simply add a fi here tag which is going to be a foreign key to the tag class now here we need to set UND delete to what well if we delete a tag we want to remove it from all the associated objects right so here we're going to Cascade again nothing new so far now the interesting part is identifying the object that this tag is applied to here's the poor way of implementing this if we add a field called Product then we need to set this to a foreign key to product now with this implementation we have to import the product class on the the top and that means the tags app is going to be dependent on the store app so look if we say from store. Models import product now the tags app is dependent on the store app we don't want to do this what if tomorrow we want to tag articles or videos these are completely different apps so the tags app should know nothing about these models so delete this line what we need here is a generic way to identify an object to do that we need two pieces of information the first one is the type of an object which can be let's say product video article whatever the second attribute we need is the idea of that object using these two pieces of information we can identify any objects in our application or in database terms we can identify any record in any tables because using the type we can find the table and using the ID we can find the record right so instead of using a concrete model like product we should use an abstract model called content type which comes with Jango so earlier we talked about the list of installed apps in the settings module let's go there real quick so over here we have an app called content types using content types we can create generic relationships between our models so content type is a model that represents the type of an object in our application now we need to import this on the top so from Django the contri which is short for contribution then we're going to go to content types app then we're going to go to the models module and import the content type class so this is a model just like any model that we have in our application but this model is specifically made for allowing generic relationships now back to the business so we're going to have a foreign key to content type and that means instead of product we should call this field content type now for undelete once again we're going to use Cascade because if that object type is removed we want to remove all the associated tags so models. Cascade now the second attribute we need here is the idea of the target object so we can call this field object underline ID and this has to be a positive fi because we're assuming that every table is going to have a primary key and all primary keys are positive integers now what if in a particular table our primary key is not an integer let's say it's a GID well this solution is not going to work so this is the limitation of the solution so now with these two pieces of information we can identify any object in our application now one last thing when quering data we might want to get the actual object that this tag is applied to like like the actual product to do that we're going to add another field here called content underline object and of course we could call it anything that we should set this to a particular type of field called generic foreign key now we need to import this on the top so I'm going to duplicate this line and change models to fields and content type to generic foreign key Now using this field content object we can read the actual object that a particular tag is applied to so let's quickly recap to define a generic relationship there are three fields we need to Define content type object ID and content object now A little exercise for you I want you to create an app called likes for tracking the objects that a user likes so in this app we're going to have a model called liked item and using an instance of this model we can tell what user likes what object so here we need a field called user which is going to be a foreign key to the user class defined in this module Jango cont trip. o. models so o is another app that is automatically installed in every Jango project and using this app we can authenticate and authorize users so go ahead and spend a couple minutes on this then come back see my solution all right here's my solution we have a new app called likes and in this app we have a new model called liked item now here we have four fields we have user which is a foreign key to the user class defined in Django cont trip. o. models now here for UND delete I've used Cascade so if a user is deleted you want all the objects that the user has liked to be deleted as well okay then we have three Fields exactly like before no changes so we have content type for identifying the type of an object that the user likes we have object ID for refereshing that particular object and content object for reading an actual object so that was pretty simple let's move on to the next lesson welcome back to another section of the ultimate Django course in this section we'll use Jango migrations to generate our database schema based off of the models we built in the previous section so we'll talk about making migrations running them reversing them in case make mistakes we'll also talk about populating our database so by the end of the section we'll have a production grade database that we can query in the next section so let's jump in and get [Music] started Jango supports many database Management Systems the most basic one that is set up by default is sqlite which is a very basic lightweight database engine you should use it only for development or for low traffic websites nothing serious for any serious projects you should use postgress MySQL Mario DB or Oracle these database engines are officially supported by Jango but there are also thirdparty libraries for other database engines like Microsoft SQL Server now out of all these options postgress and MySQL are the two most common database backends used in the Jango community in this section we'll start off by having a quick look at SQL light and then shortly after we'll switch to mySQL for the rest of the course now don't worry if you have never worked with mySQL we're not going to use any fancy MySQL features all you have to do is install MySQL now if you don't want to use MySQL and prefer a different database engine like postgress that's totally fine with me but I'm not going to cover connecting the project to postgress you need to research it on your own so next we're going to talk about creating migrations [Music] all right let's talk about migrations in D Jango we use migrations to create or update our database tables based off of the models we have in our project so in Jango projects we're not going to manually create or modify our database tables we're going to let Jango take care of that let me show you how this works so open up a new terminal window and run python manage.py make migrations make sure to spell it properly all right let's see what's going on here D Jango looked at all the installed apps in our project and for each app it created a new migration file so here we have the migrations for the store app we have a new file at this location store SL migration SL here's the name of the file so every migration file has a sequence number like 1 2 3 4 and a descriptive name if you're on a Mac you can hold down the command or if you're on Windows you can hold down the control key and then click to open this file so let's have a quick look here as you can see this migration file is just a python module so here we have a class called migration with a bunch of operations so here's the first operation for creating a model called cart with two Fields ID which is a big auto field which translates to a big Auto incremented column in a database and as you can see this field is used as a primary key so earlier I told you that we don't have to explicitly Define a primary key for each model because jangu is going to do that for us okay now in the same model we have another field called created at which is a daytime field now similarly we have other operations for creating other models like collection customer and so on now at some point we're going to run these migrations against a database at that point Jango is going to translate this python code into SQL code and run it on top of our database we'll see that soon so here's what I want you to take away as you build new models or modify existing ones you run the make migrations command to generate a new migration let's go through this exercise a couple more times so let me show you a cool trick let's say we want to quickly jump to the product class we can hold down the command key on Mac or control key on Windows and press T this is the go to symbol command you can find it on the top Under The Go menu so here we have go to symbol in workspace and the shortcut is command and T on Mac so if you search for product we can find all symbols that contain the word product a symbol can be a class a function a variable and so on so let's jump to the product class and rename the price field to unit price so here we press f2 to rename this to unit underline price now save the changes back in the terminal window we run make migrations one more time that Jango is asking did you rename product. price to product. unit price yes with did so we type y good now we have a new migration in the store app with this sequence number and this description rename price product unit price if you don't like the description you can always change it so let's go to the Explorer panel here's the store app the mation spoiler now we can simply rename this to rename price to unit price just remember if you rename a file here make sure to update all references to that file in other migration files let me show you what I mean so if you open this migration file over here you can see this migration is dependent on this other migration in the store app so if tomorrow we decide to rename this file from initial to let's say first migration then we'll have to find all references to this file and update them as well okay so now we have any new migration and in this migration we have a different kind of operation instead of a create model operation we have a rename field operation so when we run this migration Jango will go to the product table and rename the price column to unit price okay now back to the terminal window we haven't made any more changes so if you run make migrations one more time D Jango says no changes detected now sometimes you see this message even though you have changed your models why does this happen this happens if you forget to add the app in the list of installed apps so one more time we're going to use our shortcut which is command and team to jump to the installed apps variable okay so over here we have all the apps we have created so far store Tags and likes if likes was missing here Jango wouldn't detect any changes in this app okay now let's go back to the product class and make a different kind of change you want to introduce a new field called slug now a lot of people don't know what a slug is let me show you so here on stack Overflow if you search for question in the address bar you can see the idea of the question and the actual question itself what you see here is called a slug but this slug can only contain letters numbers underscores and hyphens so any other character is going to be replaced or removed for example here we have a space between each word but in the UR L the spaces are replaced by hyphens now the whole point of adding a slug here is to make it easier for search engines to find our Conta so this is a search engine optimization technique now similarly we want to give each product a slug so search engines can easily find our product so we're going to set this to models. slug field save the changes back to the terminal let's run make migrations one more time now this time we see a different kind of message saying you're trying to add a non-nullable field slug to product without a default now here we have two options one option is to provide a oneof default value right now the other option is to quate and add a default in our model file let me show you both options so if we type two we can quit now back to our model we can set a default value let's say hyphen the other option is to make this nullable if you make this nullable Jango is not going to complain that this field needs a default value now let's remove this and create the migration one more time so back to the terminal make migrations all right this time I'm going to select the first option so we want to provide a one of default value now Jango is asking what is that default value so we're going to supply a string that contains a hyphen exactly like before all right so Jango created a new migration file with this sequence number let's open this file real quick now in this file we have a new operation for adding a field to an existing model or table so when we run this migration jangu is going to go to the product table and it's going to add a new field called Slug and it's going to populate it with a hyphen so the difference between this option and the previous option is that this default value is not in our model it's only in the migration file it will be used only once okay so this is about migrations now before we finish this lesson let's give this migration file a more descriptive name so because this is our last migration file we don't have any other migrations that are dependent on this file so we can safely rename this file to let's say add slug to product okay so now we have a bunch of migrations in our project next I'm going to show you how to run these migrations [Music] so now we have a bunch of migrations where each migration describes a set of changes so each migration is like a commit in a version control system like git right now we're going to run these migrations to generate our database schema so here in the terminal we run python manage.py migrate all right so Jango went through all the installed apps and executed all the pending migrations so as you can see we have a migration that comes from the content types app we have another migration that comes from the off app we have a bunch of migrations from the admin app and so on now where is our database well if you look at the Explorer panel over here you can see a file called db. sqlite 3 so this is our SQL light database which is a very lightweight database you should only use for development or very small websites now here in vs code I have an extension called sqlite which we can use for opening a sqlite database so if you don't have this extension go ahead and install it there are also other tools like there is a tool called DB browser for sqlite which you can get from SQ light browser. org it's a free but crappy application but it gets the job done we're going to use it only in this lesson because from the next lesson we're going to switch to mySQL okay so install this extension and then bring up the command pallet so on the top you can go to view menu and open the command pallet the shortcut is shift command and P on Mac or shift control p on windows so we open this up search for sqlite open database you can see our database in the list so let's select it good now let's open the Explorer panel and collapse our project we have a new note here called SQL light EXP Explorer now here you can see our database as well as all the tables we have in this database so we have a bunch of tables that belong to the O app these tables are used for authenticating and authorizing users we'll talk about them later in the course then we have three tables that are used by D Jango to do his job again we'll look at this soon we have one table that belongs to our likes app we have a bunch of tables that belong to the store app and as you can see all these tables are named using singular names so we have address cart cart item collection and so on if you don't like singular names you can always change them I'll show you how to do that later in this section we also have a couple of tables that belong to the tags app okay now let's open the migrations table so we right click on it and select show table this table keeps track of the migrations that have been applied to this database so the first migration comes from the content types app here's the name of the migration and here you can see the date and time this migration was applied So currently we have 22 migrations applied to this database and that means if we go back to the terminal and run the migrate command one more time nothing is going to happen because all the migrations we have in this project have been executed so using this table Jango can tell which migrations have been applied and which migrations haven't so this is how we can run our migrations now we have another command called SQL migrate and using this command we can see the actual SQL code that is sent to our database at runtime for example if you want to see the SQL code for the third migration in the store app here we type the name of our app and the sequence number of our migration file so this is the actual SQL statement that D Jango will send to our database and this will be dependent on the database backend we use So currently we're using sqlite later when we switch to mySQL or a different back end the SQL code that will be generated will be different okay now one last thing before I finish this lesson is it SQL or SQL well this language was originally called SQL which is short for Structured English query language but SQL was a trademark of an aircraft company so IBM didn't want to get into legal issues that's why it changed the language to SQL now some people prefer to call it SQL other people call itq SQL so don't hate me for calling it SQL that's just my paraphrase now what about MySQL isn't that my SQL well according to mySQL team they prefer their tool to be called MySQL but they don't mind it if you call it my SQL so I personally call this tool MySQL but I prefer to refer to the language as SQL and now a little exercise for you add the zip fi to the address class create a migration run it and then inspect the migrations table so you see the whole work flow in [Music] action sometimes you need more control over the database schema for example you may want to overwrite the name of a table or you may want to add an index to a couple of columns and so on let me show you how to do this so let's press command and T on Mac or control and T on Windows and jump to our customer class okay now in this class we're going to Define metadata so inside this class class after our Fields we're going to add an inner class called meta the name of this class is important so this is where we Define metadata about this model now here we have a bunch of options if you simply search for Jango model metadata on this page you can find all the available options here so we have DB underline table for specifying the table name we can also set the ordering that will be used by by default when cing objects we can also create indexes and so on so let's look at a couple of examples so back to our code here I'm going to set DB underline table to store underline customers so here I'm using a plural name now even though this is possible it's not something that I personally recommend because if you want to use plural names then you would have to set the table name for every model in your project I find it unnecessary the whole reason we use Jango is because it comes with a lot of conventions that we can follow to quickly build applications if you want to constantly override these conventions and customize things maybe Jango is not the right tool for you that's just my personal opinion so here we can set the table name we can also create indexes so we set indexes to an array of index objects to create an index object we can use models. index like here we set a keyword argument called fields we set it to an array of strings so we can add an index on last name and first name columns now if you're not familiar with indexes basically we use them to speed up our queries I cover them in detail in my SQL course in case you want to learn more so we have made a couple changes now it's time for what it's time for creating a migration so save the changes back to the terminal we run python manage.py make migrations great so Jango created a new migration file but it couldn't come up with a good name for this file because we have mixed two different types of operations here on the one hand we're creating an index on the other hand we renaming a table so it's best if you don't mix up different types of operations write a bit of code to solve a specific problem create a migration and then move on to the next problem okay so I'm going to leave this file as is now let's run this migration so python manage.py migrate good now let's open up our database one more time so here in the Explorer panel here's our database I'm going to refresh good now look at the name of our table now we have a plural name here but look this is not consistent with other tables that's why I personally think we should stick to the default convention injo so in the next lesson I'm going to show you how to undo the last migration [Music] let's imagine that the migration that we applied in the previous lesson was a mistake so how can we undo it well there are a couple of different ways to do this if you want to selectively undo what we did in the previous lesson we have to create a new migration for example if you want to keep the index but remove the new table name then we have to remove this line save the changes create a new migration and apply it that's the only way however if you want to undo every everything that we did in the previous lesson we can completely revert the last migration let me show you how to do this so let's look at the Explorer panel here in the store app look at the migrations folder this is the last migration that we want to undo migration number four so we want to downgrade the database to the previous migration which is migration number three so we open up a terminal window and type python manage.py migrate we want to migrate the store app to migration number three okay beautiful the last migration is unapplied perfect so now our database is back to the previous date let's verify it so here in SQL light Explorer let's refresh look the customers table is gone and now we have the customer table and also if you look at the migrations table look the last migration which was migration number four in the store app is gone so we properly downgraded our database but the changes are still in the code so if we go to the Explorer panel and look at the migrations folder in the store app look the new migration is still there so if you open up a terminal window and run python manage.py migrate then the last migration which is currently on applied will be applied so to properly revert the last migration we should delete this migration file as well as all the changes we made in our code so let's go to the customer class earlier we added this meta class over here if we keep this code but remove the migration file the next time we create migrations D Jango is going to create a new migration for applying this change to our database we don't want this to happen so the proper way to undo the last migration is delete this code as well as the associated migration file now this is where we use Version Control Systems like git undoing code using a version control system like git is a lot easier than manually removing code from different places so in this project I've been using git and after each lesson I made a commit so let's open up the terminal window and run get log d-1 line this shows the list of commits I've have made so far so here's my last commit customizing database schema and this is where I created method data for the customer model now here we have this head pointer pointing to this commit so to undo this commit we have to make the head point to the previous commit now if this is all new to you don't worry just follow along with me and if you're interested I have a comprehensive course about git on my website so let's press Q here now to reset the head we type G reset D- hard head till the one so we want to move the head pointer one step back so it points to the previous commit okay let's go with that great now all the changes we made in the previous lesson are gone let's verify it so here in the migrations folder we no longer have the force migration and also if we go to the customer class the metadata is gone great now here's a little exercise for you in the customer model rename the first name field to give a name create a migration played and then reverted all right from this lesson we're going to switch to mySQL if you don't like MySQL you can use someone else's SQL that's totally fine with me but let's see how we can install MySQL on your machine if you already have MySQL feel free to move on to the next lesson so open up your browser and head over to myql.com then go to downloads on this page down the bottom you see a link called MySQL Community download now over here we're going to download MySQL Community server now on this page you can select your operating system so I'm on a Mac and then we're going to download the latest version now on this page you don't have to sign up or login there is a link down the bottom so let's just start the download great so open this DMG file or setup wizard on windows so here we have a set set of wizard pretty simple but there is one thing that I want to highlight here let's click on continue and again agree and install now here it's asking for your computer's password this is the password that you use to login so let's type that in now on this page we can select a password for login into MySQL this is different from the password you use to log into your computer so we're going to select use strong password encryption click on next and then here we type the password for the root user of MySQL so I'm going to type a complex password here and then finish now once again it's asking for my computer's password so let's type that in all right the installation was completed successfully great if you have any problems if you get any errors the best way is just to Google bu the error because every computer is different unfortunately I cannot help you resolve the errors on your machine so now that we have MySQL next we're going to talk about GUI tools for connecting to [Music] mySQL all right now we need a tool to connect to mySQL and manage our database there are many different tools out there you can use MySQL workbench which is absolutely free and you can get it from myql.com personally I've used it a lot in the past it gets the job done but quite frankly it's not the best tool out there we also have table plus which is a great tool it's very lightweight and it supports many different database engines so it's not limited to mySQL and of course that comes with a price at the time of recording this video the license for table plus is $59 and by the way I'm not an affiliate for table Plus or any other products these are the tools that I've personally used and introduced in my courses and of course there are many other tools out there you can research and find your favorite tool we also have data grip which is my favorite tool I believe this is the best database tool in the market because it's built by jet Brands which is the same company that has built intell webstorm resharper and many other amazing tools and of course this is the most expensive product you can get a license for $89 for the first year but for the second and third years the price will reduce to $70 and $50 so every year you have to pay to use data grip having said that you can download a trial version and use it for free so if you want to follow along with me you can just download it you don't need to provide a credit card just download it and use it for 30 days so the first time you open it you're going to see this window you're going to evaluate it for free now you can optionally supply your email address and evaluate great so this is our tool we're going to create a new project we can call that stor front now over here you're going to click on the plus ass sign to create a new data source which is going to be MySQL so look there's so many data sources available here you can use Amazon red shift Apache Cassandra and so many other data sources so let's go with mySQL now on this dialog box you can give your connection a name I'm going to accept the default next we're going to specify the host which is Local Host the port by default is 3306 the user should be root and the password should be the password that you set when installing MySQL server so I'm going to type my password here now pay attention to this Arrow we have missing driver files so let's download them good now let's test the connection we get this error saying server returns invalid time zone so let's set the time zone over here let's set the time zone to UTC press Tab and test the connection one more time okay we successfully connected to mySQL server perfect let's click on okay now let's right click on Local Host and go to new query console now in this console window we can type SQL commands so for this course we're going to create a database called storefront we have to create the database first before we can connect with it using Django so even if you're not using data grip let's say if you're using MySQL workbench you need to create create a database called storefront or whatever you want to call it now to execute this we click on this icon good so we have a new database called storefront and we're going to use this in the next [Music] lesson all right the next step is to connect our D Jango project to mySQL and to do that we have to install a package called MySQL client so here in the ter let's run pip and install MySQL client make sure to spell it properly all right the installation was done now before recording this video I was practicing these steps and there I got a weird error when installing my SQL client and quite honestly it took me over an hour to troubleshoot the issue so if you encounter any errors don't give up keep going this is a natural part of software development you have to be patient and determined just Google the ex ER message and I promise you you're going to find something on stackoverflow.com you can also post your questions on our Forum at forum. cwi.cc was corrupt so before going further let's make sure you have installed MySQL properly open a new terminal window and run MySQL so we're going to connect to mySQL using the root user and a password that we're going to supply now so let's type our password all right if you see this that means you have installed MySQL properly if you get an error saying MySQL command not found that means either you didn't install MySQL properly or MySQL is not in your path so then depending on the operating system you're running you need to research how to add MySQL to your path all right so let's stop this by pressing contrl and D good now we installed MySQL client package which great the next step is to change our database settings so we're going to go to our settings module now let me show you a new shortcut under the Go menu look at this command go to symbol in editor the shortcut is shift command and o on Mac so if you press this we can see all the symbols in this file these symbols can be variables classes functions and so on so all these symbols you see here these are various settings in this module so if you type databases we can jump to the database settings straight away so look at our default database engine that is sqlite and here's the name of our sqlite file so the project directory followed by db. sqlite 3 now we're going to change this to mySQL and this is the reason why we installed MySQL client package if you don't install this you cannot change the engine to mySQL okay now we're going to change the name to the name name of our database this is the database that we created in the previous lesson next we're going to set the host to Local Host next we set the user to root and password to the password we used when setting up MySQL now this is purely for development so we're not going to use this in production in production we're not going to include our password as PL text in this file so later in the course where we talk about deployment I'll talk about a different strategy for our database settings for now don't worry about it so let's save the changes now let's go back to our terminal window where we're running our server you should not get any errors at this point so your server should be still up and running if you get any errors then you have to stop here and troubleshoot otherwise you should run the migrations so all the tables are created in our myql database so let's open a new terminal window and run python manage. I migrate okay all the migrations are applied to our database so if you go back to data grip and do a refresh look our storefront database has these tables perfect so hopefully you didn't encounter any issues if you did just be patient and determined don't give up I deal with these issues all the time even with more than 20 years of software development so our database is ready let's move on to the next lesson [Music] sometimes we need full control over generating or updating our database schema this is really easy with Jango all we have to do is create an empty migration and there we can write any arbitrary SQL code let me show you so here in the terminal we type python manage.py make migrations we're going to go in the store app and create an empty migration okay so now we have a new migration migration number four with this name of course we can change the name to something more meaningful now let's open this file in this file we have an empty migration so the operations array is empty now here we can use migrations do run SQL so this is a class that is defined in the migrations module that is imported on the top we can create an instance of this class and here in the Constructor we Supply two two SQL statements the first one is for upgrading our database the second one is for downgrading it so here we can use triple codes in Python to break down our SQL statements into multiple lines so for this demo I'm going to insert a new record into the collection table so store underline collection we want to set the title column and for the value I'm going to use collection one okay now us the using the same Technique we could also create a stor procedure a function a view and so on now as I said this first argument is for upgrading our database so as a best practice we should Supply a second argument even though it's optional because if you fail to do this then you won't be able to revert this migration okay so in the second statement we want to undo what we did earlier so we want to delete the collection with this name so we say delete from store underl collection where title equals collection one now let's save the changes back in the terminal we run python manage.py migrate okay the last migration is applied so let's go to data grip and look at our collection table so double click on this and here's our new collection beautiful now let's unapply the last migration to make sure sure our implementation is right so we want to downgrade the store app to migration number three so here in the terminal we say python manage.py migrate store to migration number three perfect now back to our database let's refresh the collection table our new collection is gone great [Music] all right the last thing we're going to do in this section is populating our database with some dummy data and for that we're going to use a great website called mau.com it's one of my favorite tools so let's say we want to populate our customers table over here we can specify our columns and their type so we have ID which is a number we have first name which is a first name column so this tool will generate a bunch of random first names for us okay similarly we have last name email now instead of gender we're going to use phone so I'm going to change the type of this column to phone now we can optionally specify the format for the phone I'm going to leave it as is next we need to add the birth date column and for that we're going to use a date column and I'm going to change the format to this format four digits for the year followed by two digits for the month and the day now we should also add another field for the membership so if you recall in this column we can have B for bronze s for silver or G for gold so I'm going to change the type of this to regular expression and over here you can type any valid regular Expressions if you're not familiar with regular Expressions you can click on this and see some examples so what I'm going to type here is a pair of parentheses and inside the parenthesis I'm going to type B or and s or G so one of these characters will be used to generate the values for this column okay now over here we can specify the number of rows to generate I think a th000 is good for customers next we can specify the format which can be CSV Json tap delimited SQL and so on I'm going to select CSP for now and preview our data so this is what we're going to get we're going to get a thousand customers with these values now we can download the CSV right away or we can change the format to SQL and over here we specify the name of our table which is going to be store underline customer and then we can download our data so now we have a SQL file we can open this with data GP or MySQL workbench to populate our table so now I'm going to drag and drop this file onto data grab so we have a bunch of insert into statements now on the top make sure the current schema is storefront if it's not just select it over here then select all these rows and execute them all right so now we're done let's open a new query console for the storefront database and find the number of records at the customer table so we type select count of everything from store underline customer so as you can see over here we have a th records in this table beautiful so we have reached the end of this section now I'm going to stop recording and generate data for a bunch of tables we're going to work with in the next section so at the beginning of the next section I will give you a sequel file to populate your database with dummy data okay so that's it for now I hope you learned a lot and I will see you in the next section welcome back to another section of the ultimate Django course in this section you will learn how to query and manipulate data using Jango RM or object relational mapper we'll start off this section by quick overview of Jango RM and the problem it solves then we'll spend the rest of the section on various ways to query and manipulate data we'll cover filtering sorting grouping data and much much more so by the end of this section you'll be able to confidently pull out data or store it in a relational database so let's jump in and get [Music] started let's start off this section by a quick overview of object relational mappers and the problem they try to solve so you know that in relational databases data is stored as rows in tables so when pulling up data from a relational database we need to map these rows into objects in the past we used to do this by hand and this was pretty repetitive and time consuming so we would have to write a SQL query send it to the database read the result and map it to a bunch of objects so for each record you'll have to create a new object and set its attributes this is where an object relational mapper comes into the picture an object relational mapper as the name implies Maps objects to relational records and that frees us from writing a lot of repetitive code so using an object relational mapper we don't have to write SQL code to query or manipulate data we can code in an objectoriented programming language like python the URL will then translate our python code into cql code at runtime so does it mean we never need to write SQL no when dealing with complex problems ORS can produce efficient SQL queries so that's when we need to jump in and write optimize SQL queries by hand but overall orms help us reduce complexity in our code make it more understandable and get more done in less time a good example of that is Jango migrations using these migrations we generated our database tables almost instantly we didn't have to write any SQL code or use a tool like data grip to create our tables add relationships indexes and so on Jango migrations took care of all of that for us so migrations are part of D Jango RM also all the model classes we have created so far inherit from the model class in Django this model class is also part of D Jango RM so as you will see in this section all our model classes inherit the functionality to query or manipulate data from the base model class now once in a while you see someone like our popular John Smith who hates orm and prefers to write every bit of Code by hand because he believes orms are slow what JN is missing here is that he doesn't understand that the more code he writes the more bugs he or someone else has to fix in the future there is an old saying that says the best code is no codee writing and maintaining all that extra code costs time and money someone is paying for it your employer or your client if you were that person you wouldn't want someone else wasting your money writing code that was unnecessary right throughout my career I've seen so many projects over engineered by people like John that never made it into production in my opinion a good software engineer is one who delivers working software in time building the best most optimized solution that will never make it to production is not something to be proud of so use the right tool for the job as I said ORS don't perform well when dealing with complex queries but that doesn't mean we should never use orms we can use them in a lot of cases perhaps for the most part remember the old saying premature optimization is the root of all evils so don't optimize your code unless you have proof that it's slow so that's it for the Chango RM let's move on to the next lesson [Music] all right before we get started let's make sure that we're on the same page I want to make sure that we're both using the exact same code and database so what you see on your machine will be exactly the same as what I'm going to show you in the videos so please follow everything I'm going to show you in this lesson so at the beginning of the course in the first section I give you a zip file that contains all the resources for this course so here we have a folder called code that contains the code for each section now we're going to go to the fifth section and open the starter code so here we have the storefront project let's drag and drop it into vs code okay we get a message saying no python interpreter is selected don't worry about this so let's close this now let's go to the settings module and here in the section for our database settings change the password of MySQL otherwise you're going to get a connection error so use the password for the root user next we open a terminal window and here we're going to run pep and install so this is going to create a new virtual environment and install all of our dependencies there okay great now let's open up data grip or any tool you use for managing your database here we have the storefront database I'm going to delete this database and recreate it from scratch so delete good now we're going to right click on Local Host and open a new query console and here we're going to type create database store Front make sure to spell it properly because this is the name that we use in our project okay so now we have a new database let's verify it great so this database is currently empty the next step is to run all of our migrations to create our tables so back to our project here in the terminal we run python manage.py migrate now we get an error saying invalid syntax because in this window our virtual environment is not activated so back to our project let's activate our virtual environment good now we're going to run python manage.py migrate okay all of our migrations are applied so back to data grip let's refresh all of our tables are created beautiful but these tables are currently empty so the next step is to populate them with data but before doing so I want to close all the sessions I have open in data grip so down the bottom over here we have the services tab I'm going to right click on Local Host and close all sessions now I'm going to right click on storefront and open a new query console now back in the resources folder we have this data folder and here we have a seed file that will populate five of our tables collection product customer order and order item so let's drag and drop this into this window good now on the top we have to select the schema so I'm going to select storefront good now make sure that all these statements are selected So currently all of them are selected if not just press command and a on Mac or control and a on Windows and finally we're going to execute them all in one go good so now five of our tables are populated with data let's look at the customer table all right so here we have 1,000 customers beautiful and now the final step is to start our server so python manage.py run server great so now that we're on the same page let's move on to the next lesson [Music] all right the first thing you need to understand about D Jango RM is the concept of managers and query sets so let's press command and T on Mac or control and T on Windows and jump to our say hello function so we're going to go back to our playground and write all the code here now for this section we don't really need the calculate function so I'm going to delete it and I'm going to delete this line as well now on the top from store. Models we're going to import the product class now every model in Jango has an attribute called objects and this returns a manager object a manager is an interface to the database it's like a remote control with a bunch of buttons that we can use to talk to our database so here we have a bunch of methods for querying or updating data for example we have all for pulling out all the objects in the products table we also have get for getting a single object we have filter for filtering data and so on now most of these methods like the all method return a query set so when we call this method we don't get a list of products we get a query set object a query set is an object that encapsulates a query so at some point Jango is going to evaluate this query set and this is when Jango will generate the right SQL statement to send into our database but when will this happen well under a few scenarios one scenario is when we iterate over a query set so if you write code like for product in query set at this moment Jango will evaluate this query set and get the result from the database so for this demo let's just print the product on the terminal I'll save the changes back in the browser here on the Hello page let's refresh okay now let's open Django debug toolbar so look at the SQL tab over here you can see the actual SQL statements that Jango sent to our database so here we have three queries the first two are just used by Jango to do his job the third query is our select statement to get all the products from the products table so let's expand this this is the exact query that Jango has sent to our database so select ID title Slug and other fields from product table now over here we can click on the select button to see the actual result that is returned from the database so this is very useful when debugging applications now back to our code so one scenario where a query set is evaluated is when we iterate over it another scenario is when we convert it to a list so if we call the list function and give it this query set this query set will be evaluated another scenario is when we access an individual element like the first element or when we slice this so if we use the slice operator and pick the first five elements then the query set will be evaluated so because of this we say query sets are lazy which means they're evaluated at a later point now you might be wondering why query sets are lazy why doesn't Django simply call the database the moment we call the all method well the reason for this this is that we can use Query set methods to build complex queries so over here we can call query set filter to filter the result and this will return a new query set so once again the query is not going to get evaluated at this point so we get a new query set and then right away we can call the filter method to apply a second filter now similarly we can call the order by method to sort the result so by chaining all these methods we'll build a complex query and at some point when we iterate over that query or converted to a list that query will be evaluated now imagine if query sets were not lazy the moment we call the all method the query would be evaluated and this would result in thousands or even millions of objects returned from the database but what if you were only interested in a subset of these products then calling the filter method would filter the objects in memory so would get thousands or millions of objects will store them in memory and throw most of them out so to recap every model has an attribute called objects which returns a manager which is an interface to the database now the manager has a bunch of methods for querying an updating data most of these methods like the all method return a query set now in contrast we have some other methods that return result immediately for example we have the count method which Returns the number of Records in the product table now why don't we get a query set here well because this method returns a number so it doesn't really make sense to do something extra with that number we're not going to apply a filter to it we're not going to sort the result or build a complex query around it so this was the basics of managers and query sets as we go through the Section you will learn more about these query sets next we're going to talk about retrieving objects in detail [Music] all right in this lesson we're going to talk about a few different methods for retrieving objects the first method is the all method that we briefly talked about in the previous lesson this method returns a query set and when this query set gets evaluated we get all the objects in a given table like the product table now sometimes we want to get a single object like the product with the ID one to do that we use the get method and here we pass a lookup parameter like ID equals 1 that we could also use PK that's a special argument so when we use PK D Jango will automatically translate this to the name of the primary key field so our primary key field might be ID it might be code whatever we don't have to remember this is the benefit of using the PK argument okay now unlike the all method the get method returns an actual object not a query set the reason for this is because once we get an object it doesn't really make sense to do anything extra with it we're not going to sort the result we're not going to apply additional filters and so on so here we get a product and that means we should rename this variable to product so always pay great attention to the name of your variables and functions I cannot emphasize this enough because this is one of the main issues I see in a lot of people's code they have a function like get airplane so you see that function and you think you're going to get an airplane but when debugging the application you realize that this function actually returns an orange and that orange ends up getting stored in an object called book don't do this so always pay great attention to the name of your variables okay so let's save this and see what we get back to the browser refresh let's look at the SQL tab so here's our select statement so we're selecting all these columns from the product table and here we have a we Clause to select the product with the ID one now Jango also adds a limit Clause a limit of 21 I'm not entirely sure why they use 21 here to me it looks like a magic number but this is something you can find in Jango source code so for now don't worry about it this limit doesn't really make a difference for us now one thing you need to know about the get method is that if it cannot find this object it will throw an exception so if we set PK to zero look we get an exception of type does not exist so to handle this we have to wrap our code inside a TR catch block so back to the code first we're going to import the type of the exception on the top so from Django core. exceptions we're going to import object does not exist now not that I put all my Jango import statements next to each other so my code is cleaner and more organized compare this with this so we importing something from Django then something from another app then we're going back to Django again this is a little bit ugly so I prefer to put all Jango import statements next to each other now we need to wrap this line inside a tri catch block don't tell me that you don't know what the tri catch block is because I covered it in detail in my python course so here we type try then we type accept followed by the type of exception which is object does not exist also note that you don't have to type the full name of the class so here I'm typing obj d n e and with that we can easily look up this class so we can use abbreviations okay Enter now in a real scenario here we want to show an error to the user but for now don't worry about it so I just want to pass okay now back to the browser refresh this time we didn't get an exception great now this TR catch block looks a little bit ugly we don't want to repeat this pattern over and over in our code so let me show you a better way first I'm going to delete the track catch block good now instead of the get method we can use the filter method now this method returns a query set so right away we can call the first method of the query set now if the query set is empty the first method returns none so in this case product is going to be none we're not going to get an exception check this out so save and refresh great now sometimes we want to check the existence of an object so over here right after the filter method instead of the first method we can call another method called exists so first we apply a filter and then we check to see if there is an object in our query set with this criteria so in this case we're not going to get a product object we get a Boolean value so we should rename this variable to something like exists okay so these are various ways to retrieve objects now in the next lesson we're going to talk about filtering in detail [Music] all right let's talk about filtering data so let's say we want to find all the products that are $22 so here we pass a keyword argument and say unit price equals 20 pretty straightforward now what if you want to find all the products that are more expensive than $20 we cannot use our logical operators here look we have an error because this expression this piece of code is a Boolean expression and returns a Boolean value which can be be true or false but when calling the filter method we need to pass a keyword argument so we need to pass a keyword followed by a value right so to solve this problem after the field name we type two underscores followed by a lookup type so in Jango we have GT which is short for greater than we also have greater than or equal to we have less than less than or equal to so for this demo I'm going to change this to GT equals 20 now we're passing a keyword argument to this method but the name of our keyword is kind of special right save the changes now to find all these lookup types we can search for query set API and on this page look over here where is it it's right here filled lookups so we have various lookup types for numbers strings and dates in this lesson we're going to cover a lot of them and I'm going to leave the rest to you so back to our code another useful Lookout type is range and with this we can find the products whose price is in a given range so over here we cannot pass a single value we need to pass two values a minimum and a maximum so we need to pass a topple with two values let's say 20 and 30 now out of curiosity let's render these products in our template and see what we get so here's the context the object that we're passing to our template in this object in this this dictionary I want to add another key value pair called result we could also call it product that's better and set it to query set so we're passing the query set here now it would be better to convert this to a list so the name of the key reflects the type of the value once again we don't want to get an airplane and store it in a book right so save the changes now let's go to hello.html and after our if block we're going to render an unordered list which represents a list of bullet points so tab inside the unordered list we're going to add a for Loop so we add a pair of braces with a perent and here we say for product in product we don't need a colon here just the expression okay now in our for loop we're going to type a list item for rendering a bullet point and over here we add two braces to render product. type finally we need to close our for Loop so once again braces with Ampersand and here we type end four now back to the browser here are the products whose price is between 20 to $30 great now we can also filter across relationships so let's remove this argument let's say we want to find all the products in collection number one so here we type collection followed by two UND scores so we navigate the relationship and over here here we can type the name of any of the attributes or fields of the collection class so we can say ID equals 1 we can also use our lookup types so we can add two underscores followed by a lookup type like greater than or range and then we can set this to a topple of let's say three values so with this we get all the product in any of these collections okay so these were the lookup types for dealing with numbers now let's look at an example involving a string so I'm going to remove this argument so let's say we want to find the products that contain coffee in their title so over here we can type two underscores and use the contains lookup type we set this to coffee and with this we don't get anything because this lookup type is case sensitive so to perform a case insensitive search we have to use I contains now take a look so here are are all the products that have coffee in their title now we also have starts with ends with as well as their case insensitive variation okay now for dates we have a bunch of lookup types so let's say we want to find all the products that were updated in 2021 so last update double uncore here we can use year and set it to 2021 now take a look so this is what we get so we can extract individual comp components in a date like year month minute second and so on we can also compare this with a date value not something we use that often and the last lookup type I'm going to cover here is checking for null so to get all the products without a description we can say description Dore is null equals true we don't get anything because all of our products have a description okay now it's your turn I've attached a PDF below this video in that PDF you're going to find a bunch of exercises and their Solutions so make sure to do this exercises before moving on to the next lesson where we talk about complex [Music] filtering all right let's see how we can apply multiple filters so let's say we want to find all the products with inventory less than 10 and unit price less than 20 there are a couple of different ways to implement this way one way is to pass multiple keyword arguments here so we can say inventory less than 10 and here we pass a second keyword argument and say unit price less than 20 so let's go back to the browser refresh here are the products we get let's look at our SQL query so here's our select statement as you can see in the work class we have two conditions combined using the and operator okay now there is another way to write the same query instead of passing multiple keyword arguments we can chain the call to filter method so I'm going to remove the second keyword argument so here we have the filter method the filter method returns a query set now we can get that query set and apply a second filter on it so here we can say unit price less than 20 now here we get a new query set which we store and this object and the moment we call the list function this query set will get evaluated so if we go back to the browser and refresh we get the same result as before so let's take a look at our query so exactly like before where we have two conditions combined using the and operator now how can we combine these conditions using the or operator well to do that we have to use Q objects back to our code first we need to import the Q class from Django so from django.db Models import Q so Q is short for query and using this class we can represent a query expression or a piece of code that produces a value okay so using this Q class we can encapsulate a keyword argument so let me remove all this code and start from scratch so we want to combine these conditions using the or operator so here here we say filter now instead of passing a keyword argument here we're going to pass a q object so we create a q object and right here we pass a keyword argument so we say inventory less than 10 so each Q object encapsulates a keyword argument or a query expression now we can combine this Q object with another q object using the bitwise operators so if we use the bitwise or operator this will translate to a log iCal or in a SQL query so here we pass a second Q object and at the second condition unit underline price less than 20 now let's save the changes so here's what we have implemented back to the browser refresh let's look at our query there you go so two conditions combined using the or operator beautiful now back to our code here we can also use the end operator but this syntax is a little bit too verose if you want to combine multiple conditions using the and operator we don't really need Q objects we can simply pass multiple keyword arguments to the filter method just like before like here we can also negate a q object so this will translate to the not operator in SQL so when we execute this we'll get all the products whose inventory is less than 10 and their unit price is not less than 20 okay so this is how we can build complex lookups using Q objects next we're going to talk about referencing Fields using F [Music] objects sometimes when filtering data we need to reference a particular field for example let's say we want to find all the products where their inventory equals their unit price now I know this doesn't really make sense in terms of a business rule but let's just imagine that we want to compare two f so here in the filter method if we say inventory equals unit price we get an error because unit price is not a valid value for this keyword argument where is unit price defined we don't know right now if we convert this to a string that's not going to work either because the inventory field is a number and we cannot compare a number with a string so to solve this problem we need to use an F object so first on the top from the same models module we're going to import the F class now using this class we can reference a particular field that's why it's called f so over here we're going to create an F object and in the Constructor we're going to pass the name of a field okay so let's run this query and see what we get refresh obviously we don't have any products that satisfy this criteria but let's look at our SQL query so over here look at the work Clause we are finding products whose inventory equals their unit price now using F objects we can also reference a field in a related table for example here we can say collection _ ID and with this we'll compare the inventory of a product with the idea of its collection okay so this is how we can reference Fields using F objects pretty simple next we're going to talk about sorting data [Music] all right let's talk about sorting data so here we have this order by method that I briefly mentioned before using this method we can sort the result by one or more fields for example here we can get all the products and sort them by their title in ascending order take a look so save and refresh there you go so all the products are now sorted in alphabetical order beautiful now let's look at the SQL tab so here's our query now with this implementation we have an order by clause for sorting the products by their title in ascending order if you want to change the sort direction we simply add a negative sign here that we can also sort by multiple fields for example we can sort by unit price in ascending order and then by title in descending order so with this implementation we're we're going to sort our products from the cheapest to most expensive ones and if you have multiple products with the exact same price within that group our products are going to be sorted by their title in descending order okay now the order by Method returns a query sell object and one of the methods of query sets is reverse so if we call the reverse method here this will reverse the direction of the sort so with this implementation we're going to sort the products by unit price in descending order and then by title in ascending order now we can also call the order by Method after filtering data because the filter method returns a query set object and orderby is one of the methods of query set objects so here on query set API reference over here you can see all the methods of query set objects so we have filter exclude order by and so on so as an example we can filter all our products to get products in collection one and then sort them by their unit price pretty straightforward now sometimes we want to sort the result and pick only the first object so let's remove the filter method here we're simply sorting our products by their unit price and then we're going to pick the first product so with this implementation we're not going to get a query set because we're accessing an individual element so up to this point when we call the order by Method we get a query set object but the moment we access an individual element in this query set the query set gets evaluated and then we get an actual object so we should rename this variable to product and of course we need to make a change here because we're not going to convert this to a list so instead of products we're going to pass product to our context and of course we need to change our template played to accommodate this but let's not worry about that in this video what I want to show you instead is a convenience method called earliest so another way to rewrite the same query is like this instead of order by we can call the earliest method to sort the result by unit price and get the first object so with the second implementation we're not going to access an individual element because the earliest method returns an object in contrast order bu returns a query set now similarly we have another method called latest which sorts the products by unit price in descending order and then it will return the first object okay so this is all about sorting data next we're going to talk about limiting [Music] results so our product table has a thousand products now quite often we don't want to show all these products to the user in one list we want we want to show pages of products so let's say our page size is five and we want to show the products on the first page to do that we use Python's array slicing syntax so if you type colon 5 here this is going to return the first five objects in this array so more accurately we're going to get objects at these indexes 0 1 2 3 and four so excluding five okay now let's go back to the browser and refresh so here are the first five objects or first five products now let's look at the SQL tab so now in our query we have the limit clause for getting the first five products now to get the products on the second page we can start from five and finish before 10 so this is going to return the product objects at these indexes 5 6 7 8 and N now refresh with this implementation our query is going to have an additional Clause so we have limit five followed by offset five for skipping five [Music] records so you have seen that when we query objects by default all of their fields are read from the database but what if your only interest set in a subset of these fields for example look at our product table our product table has a bunch of fields or columns some of these columns like the description column contains a lot of text what if we don't care about the values in this column what if we only want to return the ID and the title of each product to the user this is where we use the values method so we call the values method and specify the fields we want to query let's say ID and title now refresh we get the same result as before but look at our query with this implementation we're only reading the ID and the title of each product okay now we can also read related fields for example we can go to the collection and read the title field so using the double underscore notation we can access the related field now let me show you something interesting so back to the browser refresh let's look at our query one more time with this implementation now we have an inner join between the product and the collection tables because we reading a related field so this is how we can use the values method now one thing you need to know about this method is that with this method instead of getting a bunch of product instances we get a bunch of dictionary objects let me show you what I mean so let's go to our template instead of rendering product. title let's just render the product object itself so save and refresh see what's happening so each object in the result is a dictionary it's not a product instance so in this dictionary we have three key value pairs we have ID title and collection Dore title now we have another method called values list and with this method we get a bunch of toppos instead of dictionaries so take a look refresh now each object is a topple of three values so here we have the ID followed by the title of the product and the title of the collection now here's your exercise I want you to write a query to select products that have been ordered and sort them by their title now let me give you a hint before we get started so in our database we have this product table that contains all the products in our system but not all products have been ordered so to find the products that have been ordered you need to go to the order item table here we have a column called product ID you need to select all these values all these product IDs and use them as an argument when filtering products so spend a couple minutes on this then come back see my solution all right the solution as we said we should start with the order item table so first we go on the top and import the order item class now we go to order item the object now here we need to select all the product IDs from this table so this is where we use the values or values list method it doesn't really matter so I'm going to go with values because it's shorter so we go to values next we go to the product field and select the ID field now we can also use a single uncore because Jango will automatically create this field for us at runtime so even though we didn't declare a field called product ID on the order item class look we only have product right but angle will automatically create a field called Product underline ID at runtime and essentially this is our foreign key field okay so back to our query we select product idas and store the result in query Set Let's test our implementation up to this point so here in the browser this is what we get a bunch of dictionaries and as you can see we have a lot of duplicates now before I show you how to resolve duplicates let's look at our query so we have a simple query for selecting product ID from the order item table beautiful now to get rid of duplicates here we can use the distinct method so values returns a query set and distinct is another method of query set objects with this let's go back to the browser and refresh we no longer have duplicates beautiful now the last step we want to go to the product table and select all products with these IDs very simple so we're going to say product objects filter ID double uncore in so here I'm using the in lookup type to find all products whose ID is in a given list and we're going to set this to this expression over here where we select product IDs from order item table so cut move it here and we're going to set the query set right here so this is the end result let's see what we get in the browser so refresh we get a bunch of product objects so product with ID 1 four five and so on now let's go to our template and render the title of each product so instead of rendering the product we're going to render product. title and there you go so here's the list of products now the last thing we need to do is sort the list so after we filter our products we're going to call the order by method to sort the products by their title now take a look here's the final result these are the products that have been [Music] ordered so in the last lesson you learned how we can optimize our queries by specifying the fields we want to query now we have another technique called deferring in fields so we have a method called only and with this method we can specify the fields we want to read from the database let's say ID and title now you might be wondering how this method is different from the values method well with the only method we'll get instances of the product class whereas with the values method we'll get dictionary objects okay now let's save the changes back in the browser refresh so we get the same result as before let's look at our SQL tab so here's our query pretty simple we're selecting the ID and title from the product table great so this is how the only method works now you got to be careful with this method if you don't know what you're doing you will end up with a lot of queries sent to the database under the hood let me show you what I mean so let's go to our template and after the title of each product render its price so we had a dollar sign here followed by two braces and here we render product. unit underline price let save back in the browser refresh look what's happening our application is freezing so it's going to take several seconds until we see the result all right here's the result now let's look at our SQL tab how many queries do we have here 1,002 let's see what's going on here so here's our main query where we read the ID and title from the product table now after the main query for each product you have a separate query to read its price so look at this query here you're reading the ID and unit price from the product table where ID equals 1 we have a similar query for every other product in this list so because we have a th products in this list we have a th000 extra queries for reading the price of all these products this is what I was talking about so you have to be careful when using the only method if you don't know what you're doing you'll end up with a lot of extra unnecessary queries now we don't have this problem with the values method because with the values method we get dictionary objects and these dictionary objects don't have this Behavior so if you access a field that doesn't exist in a dictionary that dictionary is not going to issue a query to the database okay now we have another method which is the opposite of the only method and that is called defer with this method we can defer the loading of certain fields to later so let's say our product table has a bunch of columns you're interested in all of them except the description field so we can defer this to later but once again you have to be careful so if somewhere else you have let's say a for Loop and in that Loop you're iterating over the products and rendering the description of each product once again you're going to end up with all those extra queries [Music] sometimes we need to preload a bunch of objects together for example here we're loading all the products now let's go to our template and render the collection of each product next to its title so here we add a hyphen followed by two braces to render product. collection. tile now save back in the browser refresh look we have the same problem as before our application is hanging because Jango is sending a thousand extra queries to the database to read the collection of all these products because when we ask for products D Jango is only going to quate the product table it's not going to query the related tables unless we specifically instructed to do so so here we want to pre-load the products with our collection to do that before we call the all method we call Select related and here we specify the field we want to preload so that field is collection then we call the all method now back to the browser refresh our products loaded instantly now let's look at our SQL tab so here's our query see what's going on here we're selecting all these fields from the product table followed by these three fields from The Collection table and and here we have a join between product and collection so when we use the select related method Jango creates a join between our tables now we can also expand relationships so let's say collection has another field that we want to preload as part of this query so we add two underscores here and then type the name of that other field okay so this is Select related now we have another method called prefetch related so we use select related when the other end of the relationship has one instance like in this case a product has one collection right but we use prefetch related when the other end of the relationship has many objects what is an example of that the promotions of a product so let's go to the product class real quick look each product has one collection but it can have many promotions so to preload the promotions we use the prefetch method so back to our playground I'm going to replace this with prefetch related and the field we want to preload is promotions now before we go back to the browser I'm going to go back to the template and remove the collection of these products otherwise we're going to end up with all those extra queries so save now refresh all right let's look at our SQL tab so now we have two queries here's the first query to read all these columns from the product table now after that we have another query to read the promotions of these products so we reading three columns from the promotion table and we have a join between promotion and product so essentially we have two result sets the first set includes the products the second set includes promotions Jango reads these sets and then populates are objects in memory now we can also combine these two methods so let's say we want to load all the products with their promotions and collection so after the call to preface related we can call Select related to load the collection of each product so both these methods return a query set and that's why we can chain all these methods to build a complex quer okay now the order of these methods doesn't really matter so we can put select related first or less it doesn't really make a difference so now let's save the changes and add the collection back in our template so product. collection. tile now let's test the result great so we see the collection of all these products now in our SQL tab we have two queries the first query is to read all the products and and their collection so here we have a join between product and collection and the second query is to read the promotions of all these products all right here's your exercise I want you to write a query to get the last five orders with their customer and items including the product reference in each order item so pause the video spend a couple minutes on this then come back sa my solution all right here's the solution you want to get a list of orders so we should start with the order class then we go to objects now we want to preload these orders with their customer so this is where we call Select related to preload the customer field now we don't want to show all the orders we want to show the last five orders so first we need to sort them by place that in descending order so the latest orders come first and then we use array slicing syntax to pick the top five orders okay now let's test our implementation up to this point so we store the result in query set and then to keep our code clean we should change the name of this key from products to orders next we go to our template and rename products to orders and product to order now here we can render the idea of each product followed by let's say the first name of the customer so two pairs of braces to render order. customer. first name save now here we can see the last five orders and their customer beautiful let's look at our SQL tab to make sure we don't have any extra queries so we have a single query to read the orders and their customer so we're selecting all these columns from the order table followed by all these columns from the customer table and here we have a join between order and customer tables great so let's move on to the next step now we should preload the items of these orders so here we call prefetch related because each order can have many items now what is the name of the field we're going to query well let's have a quick look at our order class so each order has three Fields place at payment status and customer we don't have a field called items but look at the order item class here we have order which is a foreign key to order so Jango is going to create the reverse relationship for us now what is the name of that relationship that is order item underline set this is the convention that Jango uses to create the reverse relationship if you don't like this name you can set it using the related name argument so over here we can set related name to items so with this implementation the order class is going to have a field called items now I don't want to set this because we're going to end up with inconsistency in our code and I don't want to change the name for every relationship so for the purpose of this exercise let's go with jango's convention so back to our playground we want to prefetch order item underline set so the name of the target class in lowercase followed by an underscore and set okay let's see what we get after this point so refresh our page loaded instantly let's look at the SQL tab we have one extra query to load these order items so we're loading order items for orders in this list so everything is fine so far now the last step is to load the product referenced in each order item so over here where we are prefetching the item we can span the relationship by adding two underscores and then we type the name of the Target Field which is product save now refresh let's look at our query one more time now we have one extra query to read the products referenced in these order items so we reading all the columns from the product table where the idea of the product is in this list and this list is the list of order items we have queried so far so this is how I want you to write code write a little bit of Code test your code make sure everything works before doing a big step with this technique we can prevent a lot of crazy issues down the [Music] road sometimes you want to compute summaries like Max or average price of our products this is where we use the aggregate method so we call product. Objects do Aggregate and here we pass an aggregate object so first on the top we import an aggregate class so from django.db models. aggregate we import one of these classes so we have count we have Max Min average and sum so let's say we want to count our products here we create a count object and specify the field we want to use for counting if we use ID we can count the total number of products because every product has an ID but if we use a different column let's say description and assume that description can be null this will count the number of products that have a description okay so the proper way to count the total number of Records is to use the ID or the primary key field now the aggregate method doesn't return a query set because once we calculate a summary value it doesn't really make sense to do anything extra with it we're not going to add filters or sort data and so on so here we get a dictionary let's call that result and add that to our context object over here so I'm going to add a new key called result and set it to result okay now we go to our template and I cleaned up the code from the previous lesson so we don't have a for Loop for rendering the list of orders so right after our hello word message we can render the result object now let's see what we get refresh so we get a dictionary with one key value pair look at the name of the key it's idore count because we use the ID column for counting objects and as you can see we have a th000 products in this table now we can easily change the name of this key so back to our code over here we can pass a keyword argument we can say count equals this now take a look so the key is us name pretty simple now we can also calculate multiple summaries so in addition to the total number of products we can also calculate the minimum price of our product so we can pass another keyword argument say Min price and set it to Min of unit underlying price so here's what we have we have two keyword arguments count and Min price let's see what we get in the browser so refresh there you go M price is a decimal object with this value now one last thing before we finish this lesson since aggregate is one of the methods of query sets we can apply it wherever we have a query set so we can filter our products and pull out the products in a given collection let's say collection number one and then calculate these summaries over that data set all right so that's all about aggregating objects now I've attached a PDF below this video where you can find a bunch of exercises and their Solutions make sure to do these exercises before moving on to the next [Music] lesson sometimes we want to add additional attributes to our objects while quing them this is where we use the annotate method so we go to customer. objects and call the annotate method now let's say while cing customers we want to give each customer a new field called is new and we want to set it to true so let's get the result and store it in a query set now in our context object I'm going to add a new key value pair called result and set it to list of query set now in our template we are not doing anything in this lesson so let's just focus on the code here now here in the browser refresh we get this error saying query set. annotate received nonone expression what this error is telling us is that we cannot pass a Boolean value over here we need to pass an expression object so in Jango we have this expression class which is the base class for all types of Expressions derivatives of this class are value for representing simple values like a number a Boolean a string we have F which you have seen before using the F class we can reference F field in the same or another table right so an F object is essentially an expression object we also have funk for calling database functions so all these database engines have a bunch of functions for manipulating data to call those functions we use a funk object I'm going to show you that in a second we also have aggregate which is the base class for all aggregate classes so those aggregate classes you learn about like count sum Max and M all these classes derive from the aggregate class okay so let's go through a few examples so back to our code we cannot pass a Boolean value here we need to pass an expression object the simplest expression object is a value object so on the top from Jango db. models we're going to import the value class and now we're going to wrap this value inside a value object so we pass value of true okay now save take a look no more errors let's look at our query so I'm going to execute this query so in the list of customers now we have a new column called is new which is populated by one which is the numeric equivalent of a Boolean true so when Jango read this data it's going to give each customer a new field called is new and it's going to set it to True let's look at another example this time we want to give our customers a new field called new ID and for this demo we want to set this to the same value as the ID field so we need to reference another field in this model to do that first we need to import the f-class from django.db do models and then over here we can reference the ID field now let's run our query one more time so take a look now we have a new column called new ID which is populated with the same value as the primary key now we can also perform computations here so for example we can add one to the ID to generate the new ID now take a look so now the new ID is the original id+ [Music] one all right now let's see how we can call a database function so from the same module we're going to import the font class now we're going to give our customers a new field called full name and this is where we're going to call the concat function of a database engine so pretty much all database engines have this function for concatenating Strings so here we're going to create a funk object and give it a bunch of arguments so we want to specify two Fields here first name and last name how can we reference Fields using F objects so F of first name and F of last name name next we need to give this a keyword argument that specifies the target function so we set function to concat okay now if we run a query first name and last name are going to be concatenated but we also need to add a space in between so we cannot pass a white space here we need to pass an expression object so we need to wrap this inside a value object okay now let's run our query and see what we get so refresh and here's our query take a look so in our query we are selecting all these columns from the product table but we also have a new computed colum using the concat function of MySQL so we're concatenating first name with a space and last name and here in this table we have the full name of each customer great now there is also a shorthand to achieve the same result so back to our codee first we're going to import the concat class from Django so from django.db Models functions we're going to import the concat class and then we're going to use that class instead of a fun class so let me duplicate this query so you can compare them side by side in the second implementation we are not going to create a funk object we're going to create a concat object now here to specify our Fields so first name and last name now note that over here I'm not wrapping this Fields inside an F object so that is the benefit of using the concat class but to add a white space we need to wrap it inside a value object because otherwise Jango thinks this is a column in our table so let's wrap this inside a value object good now unlike the first method we don't have to specify the target function because that is reflected in the class itself so the code is shorter and gives us the exact same result now if you're curious about D Jango database functions just Google Django database functions on this page you can see various functions in different categories for example we have a bunch of functions for working with dates we have mathematical functions we have functions for manipulating text and so on these functions are common across all database engines but different database engines have their own unique functions so to call those functions you have to go back and use a funk [Music] object now let's say we want to see the number of orders each customer has placed so we're going to annotate our customers with a new field called orders count and here we're going to use the count class now look vs code offers to automatically import this class for us so we just press enter and it's imported on the top now let me show you a shortcut we can also import the count class from the models module and with this we can avoid an extra import statement now what is the difference between these two classes nothing the models module simply Imports the count class from the Aggregates module and then re-exports it okay so let's delete this line good so we create a count object now what field should we use to count the number of orders well let's go to our customer class so our customer has these fields but we don't have a field called orders so let's look at the order class here we have customer which is a foreign key right and you know that with this implementation Jango is going to create the reverse relationship for us so here in the customer class we're going to have a field called order under underline set so the singular name of the target class followed by underline set and this is all in lowercase now for some reason that is known to Jango developers we cannot use this name to count the number of orders for each customer let me show you what I mean so back to our playground if we type order underline set here we get an exception look cannot resolve keyword order set into field our choices are address birth date email first name ID last name membership order and phone so the name of the field that we should use for counting is order why honestly I don't know so back to our code let's change this to order and rerun our query great now let's look at our query so now we are selecting all these fields from the customer table and we're also counting the number of orders now look we have a left join between customers and orders because not every customer has an order now if you're not familiar with left joints you really need to look at my SQL course I cover this in detail there and finally we have a group by clause for grouping the number of orders for each customer so if you run this query we can see the number of orders for each customer so let's quickly recap what you have learned so far we talked about the expression class which is the base class for all types of Expressions derivatives of this class are value for representing simple values like a Boolean a number a string we have f for referencing Fields funk for calling database functions aggregate which is the base class for all aggregate classes like count sum and so on now in this lesson we're going to talk about another derivative of the expression class CL called expression wrapper we use this class when building complex Expressions so here's an example let's say we're going to annotate our products and give them a new field called discounted price so here we're going to get the unit price and multiply it by let's say 0.8 now if we run this query we're going to get an exception so take it look so we get this error saying expression contains mix types because we have mixed a decimal field which is our unit price field with a float field which is our 08 number now the area is saying that we must set the output field so to solve this problem first we need to import the expression wrapper class from the same module from the models module now we should wrap this expression inside an expression wrapper object and that's where we specify the type of the output field so so to keep our code clean I would prefer not to wrap this expression right here I would prefer to create an expression wrapper object over here then we move this right here and as the second argument to the Constructor of this class we specify the output field so we need to decide what is the type of the output field for monetary values we should always use a decimal field because float Fields have a rounding issue and are not very accurate so back to our code we set the output field to a decimal field object so make sure to create an object we're not simply passing the name of the class we're creating an object okay now we can store the result in a separate object like discounted price and then use that over here now let's run our query okay no more error so let's see what is sent to the database there you go we have a new computed column which takes the unit price and multiplies it by8 so this is how we can use expression wrapper objects now once again there is a PDF below this video where you can find a bunch of exercises and their Solutions so spend a few minutes on those and then come back see the next lesson [Music] all right let's talk about querying generic relationships so earlier in the course we created the tags app with two models we have tag and tagged item now if you remember we decided to use the content type framework to decouple this app from the store app so this app knows absolutely nothing about the store app it doesn't know we have a model called Product so with this decoupling we can reuse this app in any kind of project tomorrow we can use it to tag articles block posts videos and so on but now let's see how we can find the tags for a given product so let's go to our database and look at this table Jango content type in this table we can see all the models we have in our application so in the admin app we have a model called log entry we didn't create this this is built into the admin app that comes with every Jango project similarly in the off app we have three models group permission and user in the likes app we have a model called liked item and in the store app we have all these models that we have defined so far okay so this is the content type table now let's look at the tagged item table in the tags app so here we have a few columns object ID content type ID and tag ID so to find the tags for a given product first we have to find the content type ID of the product model so in this table currently in my database we have the product model and the content type ID for this model is 11 so once we find this then we can go to this table and write a query to filter all records where content type ID equals 11 and object ID equals the ID of the product whose tags you want to find out that is the big picture now let's implement this in code so back to our playground first we have to import a few classes from Jango contri content types. models we're going to import the content type model this is the model that represents the content type table that you just saw then from store. Models we're going to import the product class and finally from the tags. models module we're going to import the tagged item class now first we need to find the content type ID for the product model so here we say content type doobs so because content type is a model it has the objects attribute just like all the models we have created so far now here we have a method called get for model this is a special method that is only available in this manager remember I told you that the objects attribute returns a manager object which is a gateway to the database so content type manager has a special method called get for model so we call this method and give it our product class now we get a content type instance now more accurately this object represents this Row in our content type table so this is how we can find the content type ID for the product model now you might be wondering why we're not just using the number 11 because we cannot rely on these numbers in your database in your development database the content type ID for product might be 11 but in your production database it might be something else that's why first we have to find the content type ID for the product model now that we have this we can use it to filter tagged item so we say tagged item. objects filter you're going to give it two filters first is content type which we set to our content type object and then we set object ID to the idea of the product whose tags you want to query let's say product number one this should be calculated dynamically for example depending on the product that the user is looking at we're going to get the product ID from the URL and pass it here but for now let's not worry about that part so this will return a bunch of tagged item objects now back to our database look at our tagged item table in this table we have a field called tag ID which is a foreign key to the tag table so the actual tag is not stored here it's stored in this other table so we need to pre- load this field otherwise we'll end up with a lot of extra queries to the database so back to our code here we're going to call Select related to preload the tag field now let me show you a better way to format this code it's getting a little bit ugly so we can put this on a new line now we get an error because python interpretor doesn't know that this line is the continuation of the first line to solve this problem we add a backs slash here and now the error is gone so I would like to indent this line and then one more time we put filter on a new line and add a back slash here and then format our code like this I think this is nicer especially when you're building a complex query by chaining a bunch of method cost here so this returns a query set let's get it and now we can add a new key value pair in our context object so we can call that result or we can call it tags and set it to list of our query set list of query set now let's run our query and see what happens so refresh good no errors so we have two queries the first query is for finding the content type ID for our product model and the second query is for reading the tags for a given product like currently we don't have any data in these tables but if you're curious you can just populate these tables and render the the tags on the page so this is how we can get the tags for a given product now in the next lesson I'm going to show you how to encapsulate this logic inside a custom manager so our code is cleaner and easier to work [Music] with so our tags app is decoupled from the store app but writing code like this is not ideal every time you want to find the tags for a given object first we have to find the content type then we have to go to the tag item model we have to preload the tag field and apply a filter there must be a better way so wouldn't that be nicer if you had a method like tagged item. objects. G tags for product one obviously calling this method is much nicer and cleaner than writing all this code so let me show you how to implement this method to do this we have to build a custom manager for the tagged item model so we want to replace the default manager that is returned from the objects attribute we want to replace that with a custom manager so let's go to this class before this class we have to create a custom manager so class tagged item manager this class should inherit from the manager class in the models module so this class is the base class for all managers now here we're going to implement that custom method so get tags four now the first parameter should be self so this becomes a method of this class we also need two more parameters object type and object ID now let's go to our playground and grab all this code and move it to our new method okay let's fix the indentation good now we're going to replace product with object type and one with object ID as simple as that now finally we're going to return this query set so we can return it right away so we're done with this now we need to use this manager in the tagged item model so here's the tagged item class I'm going to add a new attribute here called objects we're going to set it to an instance of the tag item manager class as simple as that now we can go back to our playground and use this new method to get the tags for a given object like a [Music] product all right let's talk about the caching mechanism built into query sets so let's call product. objects. all and store the result in a variable called query set now you know that when we convert this query set to a list Jango is going to evaluate this query set and that's when it's going to go to the database to get the result now this is an expensive operation because reading data from the desk is always slower than reading it from the memory so when Jango evaluates this query and gets the data from the database it's going to store it somewhere in memory called the query set cache so the second time we convert this query set to a list Jango is not going to evaluate this query again it's not going to go to the database it's going to read the result from the query set cach let me show you so back to the browser refresh now let's look at our queries look we have a single query for reading the products so the second time we convert this query set to a list D Jango is going to read the result from the query set cache now the same thing happens if we access an individual element from this query set again Jango is going to read this object from the query set cache now one thing you need to know about caching is that caching happens only if we evaluate the entire query set first for example over here first we're evaluating the entire query set and then accessing an individual element in contrast if you accessed an individual element first and then converted our query set to a list you would end up with two queries to the database take a look so save refresh and look here we have two queries with the first query you're reading the first product in this table and with the second query you're reading all products so keep this in mind even though caching is a great optimization technique if you don't structure your code properly caching is going to come back and bite you so this is all about caching next we're going to talk about creating [Music] objects so far we've been only quering data now let's see how we can insert a record in the database so let's create a collection object and set his title to let's say video games now every collection has a featured product which is optional so we don't have to set it but let me show you how to set this field and create a relationship there are basically two ways to set this field we can set this to a product object like the product with ID one here we could also use PK and with this we don't have to remember the name of the primary key field so it can be ID code or whatever now the second way to set this field is like this we can set collection. featured product ID to one so we can either use a product object or use the value of the primary key field now either way this product should exist before we can create this collection in other words we cannot create this collection and this product at the same time this is how relational databases work the parent record should exist before we can create the child record right so assuming that we have a product with this ID now I'm going to remove the last line and set the feature product to a product object okay now there's another way to initialize this collection instead of setting these fields individually here we can set them using keyword arguments when creating a collection object so here we can set title to video games now there are a couple of problems with this approach one problem is that if you noticed here we didn't get intellisense so as it was typing title look we are not seeing the name of this field we're just seeing the name of other classes imported in this module so that's the first problem in contrast when we use the dot operator look here we can see that the fields in this class okay the second problem with using keyword arguments is that these keyword arguments don't get updated if you rename these fields let me show you what I mean so let's go to the collection class and for name the title field to name now back to our playground see what happened the title field is updated here but not over here so the keyword arguments don't get updated that's why I personally don't like this approach even though sometimes it can make your code shorter so let's set the fields individually here now to insert this collection our database all we have to do is call the save method so every collection has this method method for saving data now in this case because we haven't set the ID of this collection D Jango will treat this as an insert operation so it's going to create this collection okay now there is another way to write this code there's a shorthand so instead of writing these four lines we can call collection. objects. create and here we have to set the fields using keyword arguments so we set name to whatever and featured product look again we don't have intelligence so we can set feature product ID to one so the create method is available in the manager object and what happens inside this method is exactly what we have on the top so this method is going to create a collection object it's going to initialize this object based on these keyword arguments and then it's going to call the save method to insert this collection in the database and of course at the end it's going to return the actual ual collection object so either way here we can read the idea of this new collection that's going to be available here as well so the second approach appears shorter but again here we have the problem with our keyword arguments so if you rename this Fields our code is not going to get updated so I always prefer to use the traditional approach and before we finish this lesson let's go back to our collection class and rename this field back to title good so let's make sure everything works up to this point save back to the browser refresh now let's look at our query so we have an insert into statement for inserting a new collection with these [Music] values all right let's talk about updating objects so here we have this collection now to update it all we have to do is set its ID or primary key so in my database this new collection that we created it's ID is 11 so I'm going to set PK to 11 and by the way even though I'm using a keyword argument here this is not going to be an issue in the future because if tomorrow we decide to rename the ID field to something else our code is not going to break PK will always work okay so here we have an existing collection now let's set its title to games and featured product To None save refresh good let's look at our query so here we have an update statement for setting the title and featured product ID perfect now let me show you something tricky let's say we only want to update the featured product for this collection so we don't want to set the title save refresh and look at our query one more time now something crazy is happening here can you tell look at this line Jango is setting the title of this collection to an empty string and this causes data loss so as part of updating this field we end up losing the title for this collection but why does this happen here's the reason this collection object that we have in memory by default is title is set to an empty string so even if we don't explicitly update this field Jango is going to include it in our SQL statement and this is where Jango is different from some of the other RM you might have worked with some other orms out there have this feature called change tracking so the SQL statement that is generated here will be based on the fields that are updated so to properly update an object in Jango applications first we have to read it from the database so we have all the values in memory then we can update it so over here instead of creating a collection object first we have to get it from the database so get PK equals 11 good now we have a collection with all the values so we can update certain Fields I am might worry that reading this object first may cause a performance penalty but speaking from experience I'm telling you this is not an issue in most cases so don't try to prematurely optimize your code always profile first see if you really have a performance problem in this part of code before optimizing it okay so once again reading this object first before updating it is not an issue in most cases but let's say in your application you really have a performance problem in this part of your application so let me show you how we can avoid this extra read in the previous lesson we talked about a convenience method called create so collection. objects. create now on this manager we have a similar method called update for updating objects and with this method we can avoid reading this collection first before updating it so we can update it directly in the database so we call this method and pass one or more keyword arguments so here we can set featured product to n and that means here we have that problem with keyword arguments that I told you about so with this new method we can avoid reading an object first but at the cost of making our code a little bit fragile okay now this update method will update this field for all objects in our query set so if we use it like this it's going to update the featured product for all collections in the collection table but here you want to Target a particular collection so before calling the update method first we have to filter to get the collection with the id1 and then we can update its featured product so let me comment out this VI lines and run our code one more time refresh good so take a look with this new implementation our update statement is only setting the featured product okay all right that's it for this lesson next we're going to talk about deleting objects [Music] all right let's talk about deleting objects again we have two options here we can delete a single object or multiple objects in a query set so if you have a collection we can delete that collection by calling collection. delete pretty straightforward now to delete multiple objects first we need to get a query set for example we can say collection. object. filter let's let say we want to delete all collections whose ID is greater than five so here we say ID greater than five this returns a query set now on that query set we can call the delete method to delete all these objects in one go so these are two ways to delete objects in Jango now it's your turn download the PDF below this video and spend a few minutes on the exercises when you're done come back see the next lesson [Music] sometimes we want to make multiple changes to our database in an atomic way meaning all changes should be saved together or if one of the changes fails then all changes should be rolled back a typical example is saving an order with his items so let's create an order object here we should set the customer or the customer ID field and then save the order before we can save its items this is how relational databases work we should always create the parent record first before we can create create child records okay now after this we can create an order item here we should set a few field first we should set the order to the order that we just created then we should set the product or product ID we should also set the quantity and unit price with all this now we can save this order item now imagine while saving this order item something crazy happens we get an exception what's going to happen our database is going to be in an inconsistent state so we'll have an order without an item we don't want this to happen so this is where we use a transaction so we're going to wrap both these operations inside a transaction and either both of these will be committed together or if one of these operations fails then both changes are going to get rolled back so on the top from django.db package we're going to import the transaction module now in this module we have a function called Atomic which we can use as a decorator or a context manager so we can apply it as a decorator to this view function and this will essentially wrap this entire view function inside the transaction so all the code that is here will be run inside a transaction okay now sometimes you want to have more control over what parts of your view function need to be inside a transaction in those cases you can use this as a context manager so I'm going to remove move this decorator from here let's say we want to wrap these lines inside a transaction but let's say we have some other code here that is not going to be part of a transaction so we're going to leave this out and then wrap the rest of the code inside a width block so we say width transaction. Atomic this returns a context manager now we need to indent this code good now let's test this so I'm going to run the code refresh good so now in our database let's open a new query console and say select everything from store underly order and order by ID in descending order so here's our new order order 101 in this case both the order and its item were saved successfully but to demonstrate an exception let's go back to our code and set product ID toga1 so we're going to get an exception here because we don't have a product with this ID now back to the browser refresh so here's the Integrity error that we just got now let's look at our database so since we have wrapped both these operations inside a transaction now we should not have a new order because we couldn't save its item take a look so I'm going to rerun this query see there is no new order here so this is how transactions work [Music] all right we covered a lot about Jango RM the last thing we're going to cover in this section is executing raw SQL queries so sometimes implementing certain queries using D Jango RM can get overly complex you might end up with crazy annotations or filters in those cases you can always write your own query by hand and execute it directly using Jango RM let me show you so we're going to call product. objects. RA so every manager has this raw method for executing raw SQL queries so we call this and give it a query like select everything from store underline product so Jango is going to execute this query then it's going to map the column names to Field of product objects and return a bunch of products well more accurately it's going to return a raw query set so we're going to get a query set but this query set is different from the other query sets you have seen so so far so here we don't have the filter method we don't have annotate because these methods don't really make sense here okay so for this demo I'm going to add a new key in this context object called result and set it to list of query set now back to the browser refresh so here is our query great now a few things I need to highlight here in this case there is really no point writing this query because Jango can perfectly generate this for us so use this approach only when dealing with complex queries if you end up with complex annotations and filters and realize writing the same query using raw SQL is easier and cleaner then go for this approach or if the query that Jango generates doesn't perform well then again this is another case for using this approach okay now here we can also specify column names so instead of selecting all columns we can select title and Jango is going to load only these two Fields so the other fields are going to be deferred okay now sometimes we want to execute queries that don't map to our model objects in those cases we can access the database directly and bypass the model layer so instead of using the raw method we're going to use a different approach first on the top from Jango DB we're going to import the connection module in this module we have a function cursor for creating a cursor object so we get a cursor now this cursor has an execute method and here we can pass any SQL statements no limitations so we can have a select we can have insert update and delete now after executing our query we should always close the cursor to release the allocated resources so the proper way to use a cursor is to wrap it inside a tri final block so inside a finally block we close the cursor so this way if something goes wrong we don't end up with an open cursor but you know that Tri finally blocks are a little bit verbos so it's much easier to use a cursor using a width statement so let's delete these lines and say withd connection. cursor this returns a cursor object so using the as keyword we give it an identifier like cursor and now we can use this cursor inside the width block without having to explicitly close it so the cursor is always going to get closed even if there is an exception okay so this is how we can execute raw SQL queries Now One Last Thing Before we finish this lesson we also have another method here for executing stored procedures so we can call a store procedure like get customers and give it a bunch of parameters one two a whatever this is much better and cleaner than writing your SQL queries in the middle of your python code so you encap your SQL queries inside a stor procedure and then call that in Python now that really goes outside the scope of this course but I covered it in detail in my SQL course so we're done with this section in the next section we're going to talk about the admin interface welcome back to another section of the ultimate Django course in this section which is the last section of the first part of this series we're going to talk about setting up the admin interface for managing our data we talk about various ways to customize the admin interface how to add computed columns load related objects add searching and filtering Implement custom actions add data validations and more so by the end of this section we'll have a full-fledged admin interface for managing our data I'm super excited about this section I hope you too so let's jump in and get started [Music] all right the first thing we're going to do in this section is setting up the admin app so every Jango project comes with an admin interface which we can access at this address slash admin so here we have our login screen now to create a new user we have to open a terminal window and run python manage.py create super user okay now it's asking for username I'm going to use admin next we need to add the email address so programming with MOS atgmailcom and for password I'm going to use 123123 and repeat now it's complaining that the password is too short and it's not secure but for this lesson I'm not going to worry about this I'm going to bypass the validation by pressing y okay great now we have an admin user so let's log in now we get this error complaining about the session app because the admin app is dependent on the session app app and earlier in the course we removed this app by accident so we need to add it back in the list of installed apps so back to our project let's open up the settings module here in the list of installed apps we're going to add Jango cont trip. sessions and the order doesn't really matter so save now we need to run the migrate command to generate the tables for this app so back to the terminal python manage.py migr great now back to our database let's refresh take a look we have a new table here called Jango session and this table is used for temporarily storing some user data So currently it's empty because we haven't logged in the admin panel but once we log in we're going to see a new record in this table so back to the browser let's refresh good so this is our admin interface where we can manage our group group and users So currently we have a single user in this database let me zoom out a little bit so we can see things more clearly so we have this admin user with this email we have a bunch of filters on the right side we're going to talk about them soon we also have the list of groups which is currently empty so these users and groups are stored in the tables of the off app so back to our database look the off app has a bunch of tables for managing groups permissions and users so let's have a quick look at the user table here we have one record that is for the admin user the password is stored in encrypted format and here we can see the last login date and time we can see that this user is a super user which means it has all the permissions here's the username we don't have the first name and last name we can set that in the admin interface later we can see the email and here we can see is Staff which means this is an admin user for this website now if you forget your password you can always reset it in the terminal so back to the terminal we run python manage.py change password admin here we can enter a new password but I'm going to leave it out so contrl and C to exit okay now back to the browser let's go to the homepage of our admin panel so here on the top we can see D Jango Administration let's see how we can change this to something more meaningful now back to our project let's open the storefront folder and go to the URLs module now in this module all the URLs of the admin app are hooked up at this URL so any URL that starts with admin is going to be routed to the admin app okay now because the admin module is imported here on the top this is a good place to apply a bit of customization for the admin app so we can say admin Dot site do site underl header we can set it to store Front admin now save and refresh so we change the header on the top great we can also change the label here for example we can set admin. site. index title to let's say admin now save and refresh so the title is changed as well so now that our admin panel is ready next we're going to register our models so we can manage them here [Music] all right now let's see how we can register our models so we can manage them in the admin site so back to our project let's go to the store app now every Django app has this module called admin and this is where we write all the code for customizing the administration panel for that app so the first thing we need to do is registering our models for the admin site so the admin module is imported on the top here we're going to say admin. site. register let's say we want to register the collection model so on the top from the current folder we're going to import the models module and then here we can pass models. collection so back to the admin panel refresh now look we have the store app and currently only one of our models is registered in this app so we can look at the list of collections we can add a new collection or change one of the existing ones so let's look at our collection now what you see here is the default representation of a model object so we're going to change this and instead we want to show the title of each collection so back to our project let's go to the collection class now here's a question for you how can we change the string representation of an object in Python we overwrite the magic stir method so every python object has this magic method that is called when that object is converted to a string so here we type def Dore stir double uncore and press enter so this code is automatically created now what you see here is type annotation I talked about this earlier in the course this is basically saying that this method returns a string object now inside this method we have the default implementation which returns a string like this now we're going to change the default implementation and instead we're going to return self. tile now same take a look beautiful so now we can see all the collections the first collection doesn't have a name and this happened in the previous section when we were updating data so there we made a mistake and ended up storing an empty string for the collection title so let's select this and delete it yes I'm sure good now there is a problem here our collections are not sorted so let me show you how to sort them back to our collection collection class here we're going to define a metal class for specifying the default ordering of collection objects so we create a new class called meta we talked about this ear in the course and here we said ordering to a list of fields so here we want to sort the collections by their title so we add that here good now take a look beautiful all collections are sorted alphabetically now as your exercise I want you to repeat the exact same steps and register the product model so we can manage our products in the admin panel all right here's my solution so here in the admin module I registered the product model and here in the product class I overwrote the St method to return the title of each product and I also implemented this metal class for ordering the products by their title so now in the admin site we can see the list of products and as you can see our products are sorted alphabetically great so next I'm going to show you how to customize the list [Music] page now let's see how we can customize the list page so I'm going to show you how to add new columns here how to make them editable how to change the number of items and so on so back to our admin module first we need to create a new class called Product admin we could call it anything but by convention we use the name of our model model like product followed by the word admin now with this class we can specify how we want to view or edit our products so this class should inherit from admin model admin now in this class we can set a bunch of attributes to customize the list page for example we can set list display to the list of fields we want to display like title and unit price okay now that we have this new class we need to pass it while registering the product model so we say product admin this is one way but there's also a shorter way we can use the register decorator on this class so we say admin. register and here we pass models. product so we saying that this class is the admin model for the product class and with this we don't need the last line anymore so that is shorter now back to the browser refresh so look we have a new column where we can see the price of each product beautiful now we can sort by this column as well now we have two sort columns first our products are sorted by unit price and then by title if you don't want to sort by title you can just click on this icon where we can see a cross good so now our products are sorted by unit price in ascending order we can also change the sort order beautiful now imagine if you wanted to code all of this by hand it would probably take you a couple weeks if not longer so let's do some more customization another attribute we can set is list editable and with this we can specify the fields that can be edited on the list page for example if we set this to unit price and refresh now we can edit the price of a bunch of products in one go for example we can change this to 90 and this one to 95 now down the bottom we have the save button so we saved two products in one go now back to the code we can also set list per page to let's say 10 and with this we're going to see 10 products on each page so save and refresh look now we have 10 products and we have this beautiful pagination on the bottom so customizing the list page is really simple now if you want to see the complete list of options you can set here just Google Django model admin on this page on the right side over here look model admin options here you can see the complete list of options you can customize as we go through the Section I'm going to show you many of these but we don't have time for all of these so I leave it up to you to read about the other options all right now it's your turn set up this page where we can view our customers so here we have three columns first name last name and membership we can change the membership of each customer right here very handy again imagine if you wanted to code all of this by hand that would take you a really long time right so build this page over here we have 10 items per page and the default sord order is first name followed by the last name so spend a couple minutes on this then come back to my solution all right here's what I've done I've created a new class called customer admin in this class I've set list display to first name last name and membership I've set list editable to membership ordering to first name followed by the last name and list per page to 10 very very easy next we're going to talk about adding computed [Music] columns all right let's see how we can add a computed column to the list of products so here I've added a new column called inventory status if the inventory of a product is less than 10 here we see low otherwise we see okay so let's see how we can implement this so back to our product admin class in the list of fields we want to display we don't want to add inventory because otherwise we would see a number in this list we don't want this we want to get this number and depending on its value we want to return a string so here in this class we're going to define a method called inventory status with two parameters self and product so we want to take a product and depending on its inventory you want to return an inventory status so we can say if product. inventory is less than 10 we're going to return low otherwise we're going to return okay now instead of inventory we're going to display inventory status take a look so this is what we get beautiful but this column is not sortable by default because D Jango doesn't know how to sort the content of this column so to implement sorting we need to apply the admin the display decorator to this method and here we specify the field that should be used for sorting the data in this column so we said ordering to inventory which is one of the fields of the product model so back to the browser refresh now we have sorting here we can sort in ascending or descending order [Music] beautiful all right let's talk about loading related objects so here in the list of products I want to add a new column to show the collection of each product so back to the product admin class here in the list of fields we want to show let's add the collection field now because collection is a related field jangle will show the string representation of a collection here so back to the collection class remember early in the section we overwrote the stir method of this class so when showing the products for each product D Jango will call this method to get the title of the collection of that product okay so back to the browser refresh here's the collection column beautiful now let's open up Django debug toolbar and look at our queries so look we have seven queries on this page now don't worry about all these queries just look at the last one so over here we're selecting all these columns from the product table followed by these columns from The Collection table and we have an inner joint between the product and collection tables beautiful now what if you don't want to show the string representation of a collection in other words what if you want to show a particular field in this model unfortunately here we cannot use the double underscore notation to reference a particular fi like the title field now you might say Marsh what is the point of this we could see the title of the collection just by typing collection so here we get the string representation of a collection but imagine we have a special field here we want to show on this page let me show you how to do this first I'm going to remove this extra underscore so I'm going to define a method by this name Define collection title with two parameters self and product because we're rendering a a bunch of products so we're going to get a product and return product. collection. tile now back to the browser refresh let's hide this so our collection column is here beautiful but let's look at our queries one more time now this time we have 17 queries so we have 10 extra queries because for each product Jango is sending an extra query to the database to read the collection of that product so in the previous section where we talked about query sets you learn that we have a method called select related for eager loading or pre-loading the related fields now here we have a special attribute for the same purpose that is called list select related we set this to the list of fields we want to eagar load in this case collection now back to the browser let's look at our queries now we're down to seven queries beautiful so this is how we can load related objects on the list page now as your exercise I want you to set up the order page where we can see our orders and their customers so spend a couple minutes on this then come back see my solution all right let me show you what I have done so I created the order admin class to show three columns ID Place ad and customer and also in the customer class I overwrote the St method so here we're returning an F string for for combining the first name with the last name I also implemented a metal class for setting the default ordering of our customers so now anywhere we have a list of customers our customers will be sorted by their first name followed by their last name with this now we have a new page called orders and over here we can see all the orders the date and time that were placed and their customer [Music] sometimes we need to overwrite the base query set used for rendering a list page for example here in the list of collections let's say we want to add a new column to show the number of products in each collection so back to our admin module this is how we registering The Collection model currently we're not specifying an admin model so here we need to create a new class called collection admin which should inherit from admin. model admin and we should decorate this class with admin. register now here we set list display to title and products count now our collections don't have a field called products count so we need to treat this like a computed field so we Define a new method called products count with two parameters self and collection and here we return collection. products count but again our collection op objects don't have a field by this name so this is where we need to overwrite the query set on this page and annotate our collections with the number of their products so every model admin has a method called get query set which we can overwrite so here we have a couple of Errors because the generated code includes type annotations and these classes are not imported on the top so here we have two choices if you're on a Mac you can press command and period or if you're on Windows you can press control and period to import this class on the top alternatively if you don't care about type annotations you can just remove this okay so this is the get query set method with the default implementation so we're going to the base class and calling the get query set now we don't want to return this query set immediately we want to annotate it with products count now here we're going to use the count object for counting the number of products so let's press press enter to automatically import this good as the argument we're going to pass product okay now back to the page refresh and here we can see the number of products in each collection beautiful but look this column is not sortable because Django doesn't know what field to use for sorting this column so to solve this problem we need to decorate this method with admin. display and here we said order in to the name of the field that should be used for sorting in this case products count now refresh and now we can sort our collections by the number of their products [Music] beautiful all right now let's see how we can add links here so when we click on these links we can see the products in each collection so back to the products count method instead of returning a number we should return a string containing an HTML link now to generate an HTML link we should import a utility function on the top so on the top from Jango that utils HTML we should import the format HTML function now let me show you a cool shortcut under the Go menu look at the shortcut for the back command is control and hyphen so if you press control and hyphen we jump back to where we were that's pretty handy so here we're going to call format HTML and give it a format string that this is where we need to type a bit of HTML code in HTML we can represent a link using the anchor element with two tags the opening and the closing tag now in between these tags we can type the link text in this case I want to show the number of product so here we type a pair of braces and we're going to replace the braces with the number of products so we're going to pass this expression as the second argument to the format HTML function okay now for the actual link we go to the opening tag and set the HTF attribute to a string like this for now let's just send our users to google.com Okay and then return this value Let's test our implementation up to this point so refresh we get these links beautiful let's click on a link we go to Google now let's see how we can send our users to the products page so here's a products page look at the URL that is admin SL store SL product we don't want to hardcode this URL in our code because this URL can potentially change in the future so we should ask Jango to give us the URL of this page and to do that we have to import another utility function so back to the code from Django the URLs we're going to import the reverse function now let's go back to our method here we're going to call the reverse function and give it a special argument we type admin colon now here we need to type the name of our app followed by the model followed by the page so what app are we working on it's the store app what is the Target Model it's the product model because we want to send the user to the product list page right now what is the target page it's called change list so this list of products is called change list okay now let's test our implementation up to this point so we call the reverse function get the URL and replace Google with it so here we type another P Braes and because this is the first placeholder as the second argument to this function we should pass the URL okay now back to the browser let's go to our Collections and click on one these links great we go to the list of products but there is no filter applied here to apply a filter we need to append a quer string to the URL so we type a question mark followed by collection double uncore ID and a value okay so we need to add this part dynamically so back to the code after the call to the reverse function we're going to add a question mark that indicates the beginning of a query string now because we're going to type a long string I would prefer to wrap this expression in parenthesis so we can break it down into multiple lines so look we have reverse on one line then on the next line we have plus question mark and then plus that this is where we need to generate the query string parameters and for that we're going to use another utility function so on the top from Jango utils HTML module we're going to import the URL en code function okay now back to everyware we're going to call this function and give it a dictionary because a query string can contain multiple key value pairs so that's why we use a dictionary here now the key we're going to add is collection Dore ID and the value is collection which is this collection that we get in this method so that is collection. ID now this returns a number we should convert to a string so we wrap it with a string function okay that's pretty much all we have to do so let's test our implementation back to the collections page let's look at the beauty collection now we only see the products in the beauty collection let's look at another collection like cleaning okay beautiful now here's your exercise go to the customer page and add a new column for viewing the orders of each [Music] customer all right let's see how we can add searching to the customer page so back to the customer admin class we're going to set search fields to the list of fields we want to use for searching like first name and last name now I prefer to sort these attributes because this makes our code more readable so I'm going to move list per page up and the rest looks good all right now back to the browser refresh we get this beautiful search box so if you search for cat we see anyone who has cat in their first or last name okay now what if you search for M look at the first customer adult Mr it doesn't make sense to see adult Mr here because when we search for M we expect to see people whose first or last name start with M so back to the code here we need to use one of our lookup types remember we talked about lookup types in the previous section so after our field we type two underscores followed by a lookup type like starts with and similarly over here okay now back to the browser refresh this time we don't see any customers because this search is case sensitive so if we change this to an uppercase M now our search works so to solve this problem we need to use I starts with i is short for insensitive okay and one more time here now refresh our search works if we change the uppercase M to a lowercase M our search still works beautiful so this is all about searching next we're going to talk about [Music] filtering all right let's see how we can Implement filtering on the the products page so let's say we want to filter our products by their collection and last update so back to the product admin class here we should set a new attribute called list filter to the list of fields we want to use for filtering so collection and last update now take a look good so I'm going to collapse the left panel great now look on the right side we have this beautiful filtering panel where we can select a collection and now we only see the products in that collection very powerful also down below we have filtering by last update so we have any date today past 7even days this month and this year so we got all these capabilities by writing only one line of code imagine if you wanted to code all of this by hand that would take you a long time right now we can also create our own custom filters so let's say we want to add a filter here to see only products with low inventory so back to the admin module here we should create a new class called inventory filter we could call it anything doesn't really matter but this class should extend admin. simple list filter now here we should set a couple of attributes one of them is title and this title will appear over here after buy so I'm going to set that to inventory and the second attribute is parameter name this parameter name will be used in the query string so when we selected this colle collection you can see in our query string we have a parameter called collection ID so here we can set parameter name to inventory or anything we want now there are two methods we need to implement here one of them is lookups and with this method we can specify what items should appear here so once again we have a couple errors because of type annotations if you don't care about them you can just remove them so I'm going to remove them so we have less code on the screen so we can see things clearly now here we're going to return a list of topples so each topple represents one of the filters here okay so here's our topple in each topple we should have two values the first value is the actual value we use for filtering this can be anything here I'm going to use less than 10 the second value is a human readable description so we can say low and low will appear over here okay so this is our first item we could add as many items as we want but I'm going to stick to one filter here so this is the first method the second method is query set and this is where we implement the filtering logic so once again I'm going to remove type annotations all right now in this method we're going to write some logic like this so if self. value this Returns the selected filter if this equals less than 10 which is the value that we defined over here so as a best practice we should store this in a variable where we can reference multiple times but I'm going to leave that for now so we don't get distracted so if the user has selected this filter then we're going to take this query set and call the filter method on it now look we don't have intelligence here because python doesn't know the type of this object so this is the benefit of using type annotations if it decorated this parameter with it type which is query set now look when we type dot we can see all methods of the query set class okay so here we're going to call the filter method and get products with inventory less than 10 and of course we should return the new query set so here's our custom filter now to use it we simply type the name of the class in this list so here we say inventory filter take a look so here's our new filter by inventory this is the title that we set in our class now if you select low we only see the products with low [Music] inventory all right let's talk about defining custom actions so every list page comes with a delete action for deleting multiple objects in one go but we can also extend this list and register our own custom actions for example let's say we want to define a custom action for clearing the inventory of a bunch of products in one go so we want to set their inventory to zero let me show you how to implement this so back to the product admin class here we're going to define a new method called clear inventory and of course we could call it anything but here we need three parameters self request which represents the current HTTP request and query set which contains the objects the user has selected now we should decorate this method with admin. action and set the description to the text we want to appear in the dropdown list so clear inventory now in this method we can do anything we want for updating objects so we can take this query set and call this update method and here we set inventory to zero so this will immediately update the database and then return the number of updated records so we can get that value and store it in a variable like updated count now to show a message to the user we call self. message user so every model admin contains this method for showing a message to the user so we call this method and give it two arguments the first argument is the request object that we get here the second argument is the message we want to show to the user so here I'm going to use an F string and say updated count products were successfully updated okay so we defined a custom action now we go to the top over here where we set the attributes of this class we set actions to the list of actions we want to show to the user in this case clear inventory so we pass the name of the method as a string okay now back to our page now look we have a new action here clear inventory so I'm going to select the first two products and clear their inventory go great so we get this beautiful message saying two products were successfully updated and as you can see the inventory of these products is now low great now here we can also show error messages so when calling the message user method we can specify the type of the message as the third argument so first we go to the top and from Django cont we import the messages module now we go back to where wew and pass a third argument here so I'm going to say messages dot now here we should have different type of messages so we have error we have debug info success and so on so I'm going to show an error message once again let's select a couple of products and clear their inventory okay this time we see an error message so this is how we can Define custom [Music] actions so we talked a lot about customizing the list page now let's see how we can customize the form for adding or updating models so let's add a new product we get this beautiful form that is automatically generated based on the definition of the product model again very very powerful without Django if you used a different framework for every model we would have to create a form like this from scratch and that would be a lot of work so let's see how we can customize this form so back to the product admin class here we can set fields to the list of fields we want to show to the user so if we set this to title and slug now we only see these two Fields but of course this doesn't make sense because our product has a bunch of other required fields that we need to fill out like the unit price and inventory so if we don't show them to the user we cannot create a new product okay now we have another attribute called exclude which is the opposite of fields so with this we can exclude certain Fields like promotions now take a look so the promotions field is no longer here we also have readon Fields read only Fields so if you make the title read only now when we refresh it appears down below and it's read only again it doesn't really make sense here but I want you to know that these options are available to you now let's remove this and refresh so let's talk about the slug field let's say we want to create a new product called brown shoes it would be nice if the slug field was autop populated like this right so let's see how we can implement this back T code here we can set pre-populated fields to a dictionary in this dictionary we can specify how each field in this form can get pre-populated so we can pre-populate this lock field with the title field so here we're passing a list which means we can add multiple Fields here and Jango will combine the value of these fields to prepopulate this slog field okay remove now take a look so refresh as we type brown shoes Jango uses a bit of JavaScript to pre-populate this field but note that if we type something here and then go back to update the title the slug field doesn't get changed so it only gets pre-populated if we haven't touched it okay now look at the collection field here we have a drop down list and this makes perfect sense because we have a limited number of collections but if you had hundreds or thousands of collections showing a drop down list would have a couple of issues for St starters it would be a terrible experience for the user because the user would see a drop down list with 100 items and also in terms of performance getting all these objects from the server and rendering them on the web page would have a bit of overhead so let me show you how to convert this to an autocomplete field so back to our code here we can set autocomplete fields to collection now before going back to the browser let's look at our terminal here we get an error saying collection ad must Define search Fields because it's referenced by product admin. autocomplete Fields the reason we see this error is because D Jango doesn't know how to search for collections so we need to set this attribute in the collection admin class so let's go to collection admin okay and here we set search fields to title because we want to search for our collections by their title now refresh take a look so here we have an autocomplete field so we only see 10 Collections and other collections are hidden so we can search for them by typing a search query here so every time we type a character Django is going to send a request to the server to get the collections whose titles match our search phras okay so these are a few ways to customize this form but again if you want to find all the options available to you just search for D Jango model admin on this page we talked about this earlier look at model admin options on this page you can find all possible ways to customize the lists and forms now here's your exercise look at the page for adding a new order on this form we have two Fields payment status and customer but our order class also has another field called placed at why do you think that field is not visible here pause the video and think about it for a few seconds here's the answer let's look at the order class so here's the definition of the place at field as we can see we have marked this field to get autop populated by Jango so if you remove this argument and refresh this page now we get two fields for setting the date and time we can select today's date and the current time or we can go to a calendar and select a particular date again very very powerful we're getting all these features with very little code so let's put this back over here and refresh all right so look at the customer field currently we have a drop-down list which is a very bad experience because this drop- down list is populated with a thousand customers so this is a great opportunity to use an autocomplete field so pause the video and convert this field to an autocomplete field [Music] let's talk about data validation so by default our forms include basic data validation Logic for example because we have defined all these fields as required meaning none of them are nullable if we try to save this form without supplying any values we get all these validation errors beautiful we don't have to write a single line of code to get this functionality right now let's go through a few validation scenarios and see how we can customize the logic here first I'm going to make the description field nullable so back to the product class let's make the description field nullable okay now we need to create a migration and apply to our database so python manage.py make migrations good and then migrate beautiful so let's go back to the browser and refresh this page one more time so look we still get this error saying this field is required even though we made the description field notable why is this happening well back to our description field this keyword argument only applies to our database so to make this field optional in the admin interface we should set another argument called blank to true now let's refresh okay this time we don't get a validation error for the description field great now what about unit price well here we cannot type any characters like ABC because the type of this field is decimal and this input field only accepts numbers so that's a great starting point but what if we set the price to Zer or negative 1 the validation error goes away look we don't get a validation error but this is not a valid value for the unit price so back to our models module on the top from Django core. validators we're going to import main value validator in this module we have a bunch of built-in validators if you want to see all these buil-in validators just Google Jango validators on this page you can see all these built-in validators so we have Rex validator for validating using regular Expressions we have email validator that is automatically applied to our email fields we also have URL validator that is applied to URL fields and so on now down below you can also see we have max value validator mean value max length mean length and so on so here we imported main value validator now back to everywhere here's the unit price field let's break this down into multiple lines so our code is cleaner now we set validators to a list of validator objects so here we're going to create a main value validator object and in the Constructor we're going to specify the minimum value let's say one now optionally we can also specify a message if you want to I'm going to stick to the default message so back to the browser let's refresh all right now we get this default message saying ensure this value is greater than or equal to one great now similarly we could apply the same validation logic to the inventory field but I'm going to leave it to you as an exercise the only thing I'm going to do here is making promotions optional because when adding a product I don't necessarily want to apply a promotion to it so by to the product class here's the promotions field so we should set blank to true now refresh the promotions field is no longer required [Music] great So currently we can create a new order but there is no way to manage the items for an order so let me show you how we can edit them right here so back to our code here's our order admin class before this class I'm going to create a new class called order item inline now this class should inherit from admin. either tabular inline or stacked inline we're going to talk about the differences in a minute so let's go with tabular inline now in this class we set the model to models. order item okay now here in order admin we should introduce this class as an inline so first I want to sort these attributes and over here we're going to set in lines to order item inline okay now take a look so below the order we have this beautiful table where we can manage the items for this order so our product is currently a drop- down list we want to convert this to an autocomplete field so back to our code this inline class we have over here indirectly inherits from model admin so all the attributes you have learned about so far also apply here so here we're going to set autocomplete fields to product now take a look so now we have an autocomplete field beautiful so we can select the product set is quantity as well as the unit price we can delete them now the reason you see three rows here is because these are three placeholders if you don't want to see these placeholders just set extra to zero now take a look so by default we don't have any rows here we can add any order item set it right here we can also set the minimum and maximum number of items for our order so over here we set minum to one and maximum to 10 now take a look so we should always specify one item otherwise we're going to get a validation error so this is a tabular in line what we have here is a table of rows and columns now in contrast we can replace this with stacked inline and now each item will be represented as a separate form so this is how we can edit children using [Music] inlines now let's talk about using generic relationships so here in our product form we want to add a new section down here for managing the tags so back to our code first we should go to the tags app and here in the admin module we should register our tag model so we can manage our tags in the admin interface so here we say admin. site. register now we need to import the tag class on the top so from the models module in the current folder we're going to import the tag class and then register it right here now refresh let's go to the homepage of the admin interface take a look we have the tags app and over here we can manage all of our tags now currently we cannot see the label of each tag so we need to overwrite the St method in the tag class and that's really easy so let's go to the tag class and overwrite the St method now here we're going to return self. label okay now refresh beautiful so we can manage our tags Now using inlines we can manage the tags in our product form so let's open up the admin module in the store app here's our product admin class before this class we should create an inline class for managing a tag so we create a class called tag inline now this class should inherit from a special class called generic tabular inline so on the top from Django cont trip content types. admin we should import generic we can either import generic stacked inline or generic tabular inline I'm going to go with generic tabular in line because that's going to give us a kind of more compact interface okay now let's go back to where we were so this class should inherit generic tabular inline so this is a tabular inline but we use this with our generic objects so in this class we should set model to tagged item okay now that we have this inline class we're going to go to our product admin and set inlines to tag inline and of course I prefer to sort these so let's move this right here good let's see what we get up to this point so back to the homepage now in the store app we add a new product okay so over here we have a form for adding tags now just like before we have a drop- down list which does doesn't really make sense for tags because we can have hundreds or thousands of tags so we're going to convert this to an autocomplete field which is pretty easy here the tag inline class we set autocomplete fields to tag now take a look all right we should have an error so here in the terminal Jango is complaining that model admin must Define search Fields because is referenced by tag in line. autocomplete Fields so once again Jango doesn't know how to search for tags so let's go back to the admin module in the tags app now here we need to create an admin class for our tag model so class tag admin should inherit from admin. modeladmin and in this class we set search fields to label now we should decorate this with admin. register good so refresh okay the error is gone now we have an autocomplete field for looking up tax beautiful so this is how we can use generic relationships in our forms but there is a problem in our implementation and we're going to talk about that in the next [Music] lesson all right the last thing we're going to talk about in this section is extending plugable apps so here in the admin module of the store app look on the first line we're importing the tagged item class so that means our store app has a dependency to the tax app so we cannot build and deploy it independently remember earlier in the course I told you that ideally our apps should be self-contained so we can easily plug them into new projects so here we need to decouple the store app from the tags app but how it's actually very easy so here are the tags and store apps you want to build and deploy them independently of each other so none of these apps should know anything about each other okay now in this project we're going to create a new app which we can call store custom and this is the customization of the store app which knows about both these apps this is very specific to our project so we're not going to deploy this app for others to reuse okay so here in the terminal let's run python manage.py start app store custom good now we have this new app and in this app in the app admin module we're going to combine features from the two plugable apps so from store. admin we're going to import product admin and from tags. model we're going to import the tag item class okay now why do we have an error here that should be models okay good so back to the admin module of the store app let's jump to the tag inline class so so this class should be moved to our new app because this is where we are referencing the tagged item class so cut it from here and paste it right here now I want to import this class on the top so from Jango contri content types. admin we're going to import generic tabular inline great no errors up to this point now we need to create a new product admin which extends the generic product admin that comes with our reusable app and in this new implementation we're going to reference the tag inline class so we create a new class called custom product admin which extends product admin this is the class that comes with our plugable app now over here we set inlines to tag inline as simple as that okay now that we have a new product admin we need to unregister the old one and register the new one so here we say admin. site. unregister product and then we're going to call admin. site. register product with this new custom product admin okay now the final step we need to register this app in the list of installed apps so command and te let's jump to installed apps good now so here's the generic implementation right after we're going to add store custom okay now let's see what happens so refresh looks like we have an error so back to the terminal we have an error saying tag inline is not defined so I forgot to remove this from the old product admin so let's jump to product admin in the store app and over here we're going to remove this line because we implemented this in our custom Store app so delay and that also means on the top we no longer need to import tag item so our store app has no dependency to the tags app and we also don't need to import this generic class so delete good and refresh take a look so here's the product form now we have replaced the admin interface for this app using our custom Store app so that means if we go back to the settings module and remove this new app we see the generic implementation of the product form without the tags so this is the interface we're going to build and deploy independently now anyone can create a new custom app to customize this interface now let's bring this app back beautiful [Music] we have reached the end of this course first and foremost I want to say thank you for allowing me to be your instructor and following along all the way through I hope you have learned a lot and I'm going to see you again in my future courses this course is the first of a series in the next part we'll talk about the advanced Jango Concepts such as building restful apis authentication and authorization logging caching sending emails deployment and more so if you're serious about learning D Jango and want to become a back developer don't miss the next part and if you enjoy this course please support me by telling others about my coding school Cod with.com I really appreciate your support and send you my best wishes once again thank you so much for your support and I hope to see you again in the next part [Music]
2025-07-07 02:22:53,316 - INFO - Transcript is successfully fetched by api.
2025-07-07 02:22:53,377 - INFO - Chunks has been successfully created.
2025-07-07 02:22:53,379 - INFO - Use pytorch device_name: cpu
2025-07-07 02:22:53,379 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-07-07 02:23:26,663 - INFO - chunks has been successfully stored in vector database.
2025-07-07 02:23:26,664 - INFO - {0: 'c9ddc73d-08d6-40e9-81a4-88093b34b759', 1: '0454acb2-85de-4a3b-ac43-84d314d6a333', 2: '2ca2bbdb-e34d-49e0-a1c4-7ebbf92aa40b', 3: '620d0f00-52ac-47b3-bdc6-67e6fad7b9ee', 4: 'c3cf7223-ae5f-4dc6-a5b2-efb1fdf0b788', 5: '8969dac9-76af-430f-85cf-69eb7acd4af2', 6: 'cd19d228-cb2c-41cb-b486-44617dbe76cf', 7: 'feaa7e8d-b0e0-4865-a891-75c8bb00034f', 8: 'b85818eb-884a-47b0-815c-8618b746ee2d', 9: '363136b8-56c6-4b6d-9c52-7e05358aa003', 10: '6e942994-9e91-4087-8143-1c2737e528d1', 11: '780972fc-48ea-404b-b1be-55315262d020', 12: '6a7da96a-c2dc-4dd4-96a0-eab077b32b6f', 13: 'e6e2bd7c-331f-4d42-a03f-1e6cc177a5f7', 14: '822889c0-4b2e-41f1-bec3-01c36e279960', 15: '45d8eca5-cc6f-41fe-9369-70976c30fdd5', 16: 'e227203a-9bb9-493e-9b3b-313d95b32743', 17: '15661c74-b9d5-4a07-bb99-06ffaea64ee5', 18: '67a9d40e-7b69-4165-9eed-8a3ae04582a1', 19: 'd0db2eca-3a1e-46e0-954b-6fd836d565df', 20: '96c01381-47ad-4857-9a2d-e7dfc8372412', 21: 'd5daf12c-1794-47fe-84c7-98de480c9ac8', 22: '900df7ea-695b-416b-b2f4-2145ae645d05', 23: 'e5943a86-4365-4138-b85f-6190541c0660', 24: 'e469214b-afbd-46b5-97bb-108dcf6c55bd', 25: 'd208c874-1800-49ef-96a9-12172c7361a5', 26: 'dc575f33-f786-47ff-9323-34387b490c76', 27: '8f541318-dfa6-4a33-a8ed-e9ad769bd060', 28: 'b65c7664-b6fc-428d-af87-6b6fef940b61', 29: 'cbc883f0-3dc4-4109-94c1-f92e3f503cae', 30: '13c4bf2a-33a0-482d-8b6c-edb3950dfeda', 31: '934bc52b-c4fe-499b-8398-1584b4e20105', 32: '1b4f2ec1-302a-4774-b8f1-628efbf03417', 33: 'ded3e265-dd53-4480-983d-904f763acdb0', 34: '15644afe-36b3-45c9-8ce2-fc9af3e54ba9', 35: 'e665256b-9fd6-475b-a791-97832fe8f07e', 36: '5951c008-32ee-4c20-a12a-a53e8660940f', 37: '9f4926b5-0b66-4c25-b00e-9d8933f6587c', 38: 'ae66cdfa-dc32-4606-8657-1bcc9a4d3af9', 39: '47a77714-fc8e-4cc4-9211-d6a956b84f3a', 40: 'a625f6f8-a0ea-442d-80cf-f8b97728679c', 41: '7214cf93-dacc-4f31-aac1-216e90911283', 42: '41933ddf-bee4-4684-ae8c-bfa18184ddcf', 43: 'de22b4f8-821c-4d28-a618-676792df4358', 44: 'de08385a-74d7-4418-9e0e-2d051c88b427', 45: '32915213-3642-4a7e-9f61-9fa69fd7de08', 46: '1050423b-9b9e-48f0-97bd-7b58e23679fa', 47: 'dceef64a-b3c1-49e2-bc6d-6e1ef6c94c2e', 48: '2d0a674a-5a49-48f7-b852-9b43e838d7b3', 49: '7f8bc6e5-d8f2-4d99-b6b9-495bc4ed9ce7', 50: '9702d48e-f821-484b-8f0c-4a7c07ef3fd5', 51: 'e729ac71-2536-4b23-aa0a-8cf0f47052f9', 52: 'ded5a663-c041-4465-bb28-079717fe26d9', 53: 'c4ebc095-529e-4089-b93d-73caca6ec94b', 54: 'f918ba80-8fa7-4688-8955-a85c70b22501', 55: 'c7bdcc75-7e44-4435-84cc-68d1f457ce6c', 56: 'c5834280-4f53-469b-b140-d01bdf01fa0d', 57: '164e3e3d-d4bd-4953-8996-a111e6be96c0', 58: '384a8e08-4bbd-408a-b217-8b1a0715e012', 59: 'acfe5303-8c22-4217-8883-50e69c64b956', 60: '9c7820a3-15b5-4185-921a-292ec822a4a6', 61: '5a90cba9-f9f1-404b-ba0b-8c4cf31b02fa', 62: 'b861ee76-030e-40a4-9ee4-feefa0cbcbd6', 63: '8e23f34c-fcc8-4f10-9c42-6b0a5e6329f8', 64: 'bc00f27f-0827-4cc2-886d-46c7b5bfe38e', 65: '7a568641-e928-4b13-8eae-a2cfff515ca3', 66: '25e4d07d-562f-4cfc-92ef-6410877b5497', 67: '80fa1cc7-1f5f-4c18-9c47-3e2513c5f85b', 68: '277f868e-abc7-4745-b028-4d55891219e3', 69: '08f0c491-94e0-4ab9-995e-2d903ba6602f', 70: '8f8f7522-759c-492e-89ba-ca4c11afb9d3', 71: 'becfdef6-041a-4eb0-bab0-de73d3f0907b', 72: 'fea50e5b-3b81-40aa-af6c-19eadeaa01d9', 73: '4b7212a5-7a11-4e7a-8911-3bfb4c62a894', 74: '6a9397df-4256-430e-983b-9f7d1174d001', 75: '20768c44-607e-4051-ade7-3edb6f42391b', 76: '114e908d-9103-4866-ae1d-8bf18d2b00ef', 77: 'ac75dbad-820e-47a8-b83e-c2500b8baf23', 78: '7b34f211-bd54-4da4-bae7-3ce5f53f776b', 79: '079cc737-b326-4702-b2a0-846f87d28fcd', 80: '76b04c0b-6136-4db0-ae5d-058a3c12c26f', 81: '4c60b2c0-a6c3-420a-a579-7c44a6bcd5e1', 82: 'c0e6f4e7-fb11-4bb8-a657-037eff834794', 83: '28a20fd9-994f-4fe8-bade-5303811f538d', 84: '1c11c819-4cc8-471d-97f6-57a75061c76f', 85: '6ded6466-03d8-4bce-a55c-a2fcf7222789', 86: 'b19e7302-d216-4b09-80f9-64302d1d32ab', 87: '16aa9b64-29ec-4b94-9746-6eb551ab324e', 88: '77288032-88d3-4b53-831f-6a9f63c6fa19', 89: '18758df7-1ebc-494d-997b-fd961a600d9f', 90: '3ea6f75b-0663-4106-8045-3778c87b5818', 91: '8cb0cacf-7e86-47f4-9233-9556f3d1fe59', 92: '685d9113-8191-4d3e-9968-0cd54b1936ec', 93: '9164565e-1e7b-4815-965b-dc67c5974727', 94: '8036583b-fb11-4cf3-9573-b6eb749aafd6', 95: 'bc7851b7-26a2-45b6-8b5a-bc7101aa8e92', 96: '60c025c7-572c-4e6a-a703-7577c601b93c', 97: '12ad6f5e-0eb6-4749-95f1-5d7e45ac860b', 98: '979d46c6-49eb-4a38-84e3-6f7bf86bb66c', 99: '95138118-3581-41e9-b6c6-a6488e40e7f9', 100: 'fc61c7dd-49e3-47bb-b6d6-5b89c3fd54a5', 101: 'f54aed90-ff46-47f1-8917-f98e89b6e180', 102: 'fe12fe11-50af-4f47-8844-485b27f40ef6', 103: '2adb5fc1-dc11-4afe-883e-463e237c26a0', 104: '5d54bbea-c01f-4ec8-b77f-ea66b8f4281d', 105: 'c132bba5-dd88-4a14-8f6a-84ee919ea01d', 106: '99d5f9cf-277e-4fd0-98aa-d8765a3c9350', 107: 'b99e2334-ce10-4a5c-b65f-be777a2f0af9', 108: '8b1abbf3-2aa2-43b5-a89a-fdedaf86d170', 109: '880a846b-42d1-4347-bcf5-9d07f6289080', 110: 'cf314e85-d295-4064-a1f1-6c08c97ad177', 111: '174e6726-28b2-4623-9d70-375a4c1da2e5', 112: '4f2e9709-d749-4047-a899-0f78787c838b', 113: '33e1327a-2612-42ac-a75b-2b7da776471a', 114: '5d89392a-6910-4a0e-abd4-8cd177b05923', 115: '5dfa06a5-d62d-49f2-8d36-915f2690fe4d', 116: '00761a7e-ab3d-44a1-8e18-5853ebaf464a', 117: 'd8de7b0d-88fc-49ff-ab8a-556acd3dd505', 118: '70a8c8e5-430a-4a40-ade9-5cc5f9be441c', 119: 'c12e7698-7417-4961-b80c-7d786c49b3bc', 120: 'ecb19594-d9f6-454d-84c1-80e2a3e0e60b', 121: 'dbd9f4d2-7855-42a0-b359-439b9a203bc5', 122: '1911968e-f5c3-4e5d-91e7-9a268ebb36b6', 123: '57026f1b-c618-4f22-8949-ca9f540e9b66', 124: '49da2c54-40dc-4db9-817e-c51a74c7e584', 125: 'e280bac2-f4a6-4a79-93d1-5a893e8e89eb', 126: '867d7b31-675d-490f-98ca-c28325b8dfc7', 127: '22c65972-65fb-496d-97aa-5fbd7c160a7e', 128: '467e6b19-9e97-413e-b567-01a6af27abc5', 129: 'd2a74654-2ca2-4712-be3a-bce31a31dbb5', 130: 'b138a95d-a6a3-4e8d-a66f-519e63b76518', 131: 'c7028f2d-2726-413e-8cf2-8b8440070650', 132: '8f6f0462-62df-43fa-acea-0c85719fe23f', 133: '53ed253b-2d05-4dd6-8faf-a980b303ae41', 134: '03a63934-a1d2-4a32-8503-ca2cd4880599', 135: '9363a74f-24fc-4eb0-a3a9-8e8823b2d183', 136: '21ca17bd-4c51-4df8-b437-7c7ab330a3ab', 137: 'e7330a7c-991f-4bef-87d6-92258c130799', 138: '2b81bdb6-583d-4991-908c-6501688753ba', 139: '7fdd7fb2-7d8c-492d-82e0-6eb2d61e9c6d', 140: '750369c2-94d4-4f89-89ca-23f69d0ed29c', 141: '4cc3710d-8b85-4801-ac7a-3aa9660abe58', 142: 'b6b19b6d-32da-4362-a856-3ca05f1f5a00', 143: '47a340fa-aa9b-42ad-8dec-e6bf87320a05', 144: '0e14cdfe-03b3-408d-87d4-84e8f457d411', 145: '1eaaba7b-bf25-4a86-b201-6606b8582ab6', 146: 'b86f0a89-9b0d-4984-8462-7a1a3c090c79', 147: 'd9b47584-d840-4688-ba70-5f79203a4df2', 148: '37aae062-b8bf-40ef-81bf-a38a20cca2c2', 149: '357923e8-73c6-4394-8fc6-f9114341c5b3', 150: '82c0af78-59d0-489e-809b-d7e0155c4a10', 151: '89c7a35f-0bfb-41d6-a64b-4a1056c1f517', 152: '4ca023e0-1d98-4ba4-acc8-4bfa0fbf7ed3', 153: '13883b9e-9238-4ba1-a7f2-c1f62b5c44c9', 154: '0219b825-2b74-4afe-9c72-6f8b8e5b1a86', 155: '2b01cea0-4f09-424b-8c31-5a9b269ad2ac', 156: '55ab1e25-e3d1-481f-88e7-548889d48a61', 157: '543a66f6-935b-4dc8-8bf0-8ada76c7f70b', 158: '7301ed85-23d9-42cd-9fdb-73b7caf57e48', 159: '2922a988-50f4-4ed5-86e7-8fccd47efcd5', 160: '2ebdaf32-3f70-4fc5-94ac-5b5cd869d3cf', 161: '970d9da4-8472-49a5-8058-e61ce029a959', 162: '430e66cf-28cc-4962-9cd8-fc58af1e0b17', 163: '542a241d-209c-49f9-a0e0-911096746f76', 164: '72d5bb73-b046-4191-9f67-64ff53f5ed2f', 165: '4a630e76-ca3d-4462-af6e-d2f58dd3a659', 166: '1369e624-cb44-40d3-bbab-69701cf5c1f4', 167: 'fb65b809-6a3b-43ca-a1aa-48fea161a4e1', 168: '9d12f1c6-a8e9-4b84-930c-0ff69eb856d0', 169: 'a42b5077-995f-4526-909f-9d3fc9648aa0', 170: 'e4226062-0069-4c82-9287-6e8d2abe4c82', 171: 'dd3f2230-96b5-42c6-880d-05f4b628407f', 172: 'b6ff5455-e53f-467e-8e7f-d9fb7bdc32ef', 173: '68f65f33-5940-44b2-8fd1-40b3b07f4930', 174: '2ca4ac62-58cb-4e7e-acd7-7028ed653fb7', 175: '088b1cbf-fe95-45ed-8805-a91cea9a02b2', 176: '011d2339-a4de-4c09-8dc6-d59c5898df27', 177: '1afc4bec-03ee-4c72-becf-9e1357319c60', 178: '6ccc2c8d-aa96-4d70-be72-52b640606c1e', 179: '1bb038b1-e091-475d-8998-19fdf0c59e30', 180: '2cf64254-9f63-4feb-8aea-5b9eee6a89ac', 181: '0291da6c-77d4-4dc6-954e-3b41ada463b5', 182: '4e6dd26f-49b2-4730-bfd7-5069150fb898', 183: '870b6804-532d-4811-b928-369ec030717c', 184: 'ea6cf2f5-0c84-447a-afcc-22d32ba3ef7e', 185: '0ee6499d-2010-40ca-a852-4948e40d19ff', 186: 'cd958886-452c-4114-aabb-9d91db1eff2a', 187: 'a7f9bc4e-2beb-4423-be51-3c23be368ea0', 188: 'afb5d29a-d0d4-4525-a09b-c44a039c8c1c', 189: 'dda5dea1-a92e-428e-9914-ea00da941aaa', 190: '36339342-bfb3-4920-ad7a-7aab1529bbb1', 191: 'c2c839fb-433e-4f61-bd22-a8782e1a3809', 192: '45f60bad-6820-4005-8c96-300e563e1977', 193: '6b3f4d67-ee00-47a2-b916-50c21c3878a8', 194: 'de4d4410-4c85-4aa7-b64a-daea50571e40', 195: '41baa85f-85be-42da-85cd-95bdabb67030', 196: '0fe4c37a-3057-4332-b54c-1d65f1767004', 197: '37a8d081-636f-435b-8641-d00696c0d50c', 198: '6af9dc0c-31c6-4eed-8c76-d8f36290b6fa', 199: '660bab9c-1f52-4710-b827-84a5eb781666', 200: '249372f7-7f99-45ba-9381-eeef728164f8', 201: '1a6e784d-4655-4b8d-b10e-250989f955a5', 202: 'f5feff23-6ffd-4e30-986f-a8fa3f6e0288', 203: 'bd16aec1-04cd-40b7-a3f6-4f389d481e7c', 204: '7d3491a7-cd22-43e4-b1fe-1c3f02d83f9d', 205: 'a926c8db-1832-47e8-9295-785a952b949c', 206: 'c2a97149-5e63-45a3-a308-0f89e459b6f8', 207: '3f04dd4a-277f-439e-b692-a922c503753e', 208: '7d2c2555-d917-40e5-8e05-6c2e57e86b9b', 209: 'd8ea7069-256f-4d65-8d66-90a515f290d1', 210: 'c8085b03-9346-4951-8895-1628d306a250', 211: '450a0b20-874c-4726-967e-7a8732ba888a', 212: '98bd3eaf-df0f-4d10-b42e-7b132bac9422', 213: '81d8f4cf-6a1f-4df6-a737-e17608adce2d', 214: '996e1950-c3ca-4e41-a189-901af077fb69', 215: '92bcc093-59bf-44f5-ad0e-4c3f39010d97', 216: '38997def-2ad2-4758-8ddd-aeb1f958db91', 217: '254da74e-0af2-4b42-857c-ac92525d5354', 218: 'c1f30689-1a22-477b-ba7a-29dc1f595b5e', 219: '503f45ee-d597-4af0-8d99-93c96f6b82a9', 220: 'fb56cd03-5d3b-4edd-a021-8a5e469360a4', 221: '1bc0d130-73cc-4baf-b699-3327899bbb75', 222: 'cd574cc0-528f-4236-841f-f228801c3e59', 223: 'e704ba7e-a2a3-44df-952f-0100b1d69a05', 224: '7d84ffcd-e6c3-4267-99d4-2afe9fe78606', 225: 'cc8a6bb2-485d-4d0c-9fc6-1328a6f360db', 226: 'ed2bcd9e-4e03-4948-8857-047794bb7dd5', 227: '39afc4d2-3464-45de-958b-a75a51d83943', 228: '1e8e5529-3a49-424b-8e1c-3525df319048', 229: 'eeb59704-9f09-416f-990b-48df6305683b', 230: 'eca4ded4-1eaa-4257-9c51-77ae9427ce46', 231: '7f54528a-c872-45cf-ac54-92310ceec952', 232: '550547d0-d779-4214-8873-f7cbe40de7c0', 233: '5a6d1be0-1eab-4d2c-b221-1e6a568632b8', 234: '7fda32c9-3cda-4487-915f-1cfba0c0d0d7', 235: '2c7f296a-296d-41a0-9607-46f9c6dd01f2', 236: '051eee4d-77ff-456d-9bda-a0725d309115', 237: '757d2318-0ba9-4ffd-86cf-709cb07fadf7', 238: 'f60f2d1d-e2c7-4f7d-b32a-533cd9b4db91', 239: 'fd2f5ebd-6e1d-4ceb-9751-30136706105c', 240: '1d3abfbd-7644-45a4-8be3-f9105d6adbb7', 241: 'a1721904-aec9-45e6-8466-2e1c33baa4f0', 242: 'ff5b0d5d-3122-4b30-a0ad-06c3eb3fc44a', 243: '014daef6-e75e-4297-826b-727c58a44c36', 244: '19de39c8-67e2-42c1-84c0-3ff92949f7d9', 245: '58c8efc7-f4bb-4f84-8745-5d609fe2a8cc', 246: '4b1bafda-0c35-4f55-8629-3d9b93d4b1e5', 247: '6d1a3328-efee-4de4-b168-fff02bae28d0', 248: 'abdd4d5b-117c-405d-bfd0-add6e167aca8', 249: '1b913fc0-46a2-49a8-a728-2db2284283db', 250: '00aa09f0-4041-46a5-97ed-522ed3a92dd8', 251: '2510163b-3784-4e8e-aaf7-46628dc651ae', 252: '7f766ac0-fed7-47ae-b3e1-ea761f89255d', 253: 'fff606ba-5916-4972-8ce4-033c1458c8db', 254: 'edd8828f-40dd-46db-8922-6189e79916b0', 255: '98905ed6-eb1c-4f03-b743-90c432eb000b', 256: 'e36787d7-dfe3-4a25-bdd2-9cf847202f51', 257: '812ef73e-e4ef-454f-a3ec-44289a3cb611', 258: '32ba3c72-30bc-4685-adfe-bbf2e63474a8', 259: 'bc890f20-8d6c-426c-b313-7c53359a6867', 260: '49b0c550-4de3-4084-abe6-d9ae4fcfe732', 261: '4c5c5173-001e-4dc3-a0fe-bd2ef4159fc1', 262: '62b3df20-6b38-4d4d-a31a-bf4b054c6cbf', 263: '99887cef-07d6-44ad-af93-38eae5c4791b', 264: '8fd102e8-edd1-434c-813f-6e9e32a13f3d', 265: '9dc99d7e-5395-46d1-a32d-0e60f972b9f4', 266: '3fa4415c-76e4-45b1-af6f-29cf6be30a64', 267: 'a7cee42e-fd5a-43bb-afa2-68c6d9eaef86', 268: '4b5ac547-1e61-47b8-9c26-60452e50810e', 269: '1dc8ac99-ca7b-43c6-b0fd-9c4a76f10da7', 270: '22f4a8f7-2f3a-4304-a245-bbf286c9b0f7', 271: '32a79bc2-7189-490a-864f-fb2151912945', 272: 'c1bde3b8-c4f6-4621-91b7-9de2b91ac214', 273: 'cffbbe88-3410-4011-9d22-1e7122a3e52d', 274: '01ade335-2c14-44b5-8a20-c012bcda4ceb', 275: '73dd6b79-e345-46a3-9c20-e9218168bcfd', 276: 'bf028f84-d570-4dab-9f85-efc6f4f14cfb', 277: '8764a378-a0ee-43a0-a23c-c661e3812f85', 278: 'd6d55743-6723-4471-9f5e-ed448366ae73', 279: 'cef5452e-6064-4842-9b1b-a1f5a15b6a33', 280: 'd0090fd6-6427-4f86-87de-033b53660e05', 281: '92b2ffd1-6995-4790-a281-f5a90b450136', 282: '4764072c-2642-4b8d-b20c-1dfc6c00a8da', 283: 'f64d8350-3937-4751-8b78-b4ed6e78fc5d', 284: '6e2a8c62-7aff-4d52-ada1-410b87245c1b', 285: 'ee9ace31-c72f-4a7f-9ca4-e3d49cdac1df', 286: 'a56a502d-ebd2-4291-b695-019661d3b5c0', 287: '56af61d9-ad52-4ca3-a756-090a0f620410', 288: '1960063f-96d5-4e0e-a14c-537ddd8bff72', 289: 'c0ed3747-8752-4896-89bd-98b94d15fa40', 290: '94e04a75-eee9-43e2-957a-7b87ab910254', 291: '63faf589-263a-43b4-a6a8-54fb13638855', 292: 'b1125276-e481-47d6-a0cc-164ee6e85993', 293: 'fe8344d6-bb00-48c2-b274-578836ec5db5', 294: '354c1a45-62ec-4c11-9338-2c8abe2d8637', 295: '4fda0839-668e-4002-ba89-d050051d6adf', 296: 'c0c5cae4-c10b-4a1a-8f6c-57a39a13240d', 297: 'ff0fa152-ee4a-4616-a47c-a358753b1c45', 298: '87c27268-f621-4eea-b7e3-46034f7aee53', 299: 'd2e7d49f-742c-455c-9ba0-9aff413e9297', 300: 'd266f7db-87ad-475b-afba-76b49cfb823e', 301: '6db89e21-d3c9-4bbf-bd59-ec9adc7869b5', 302: '78107c1c-e0de-4458-949a-25229d63e7e9', 303: 'ef133cb7-401d-45f3-82e8-5be50b42a739', 304: '5afbeae1-747d-4efb-a5f8-97fe08123390', 305: '50b123c1-ac3d-47a4-bbdd-2c6c52f48eb9', 306: '5da0de57-3db3-4c21-9139-a10ea8d0cfc6', 307: 'adb8798d-e156-45f6-92ca-2b4f19e44eba', 308: '07628da4-dc80-4a5f-9340-c9ea376b22db', 309: 'fe97303f-ee53-43a8-8dd0-7671e55915bb', 310: 'f9af08c4-484e-46a8-b458-b77378da8063', 311: 'c3797cd0-3a21-4ce5-8e63-e47ed370f216', 312: '9f9acece-0b38-4275-9b3e-cf61e29ecd0e', 313: 'b47e94db-5aa2-4977-b541-e8f0f28ea10e', 314: '9f1f9c8e-32bc-4b96-8cd1-8da7e137a673', 315: '79042e34-762c-4bf5-b94d-5293c2737e20', 316: '33261a51-caaa-454d-a1bd-14d5a7025509', 317: 'b7ef61c2-0b79-4b9a-a66e-93c7ca7d4b57', 318: '1725cf00-2066-4487-9cac-e66220aab7ca', 319: 'b287d662-edc5-4444-8201-bce2feacd19a', 320: '2907d4e4-fb85-44c4-9492-ff03eb5b108b', 321: '45c74b19-ffdf-4fd5-a524-c8b7063252bb', 322: '38658c49-50ed-491c-bbb5-e717a50394c2', 323: 'fcbd262a-8713-4f2a-97ad-b18e7a723eb9', 324: 'f2114a00-8d1d-4d7e-8227-c7887daa6a55', 325: 'e9ac289c-7cb4-4f6a-a5e0-81da0395efec', 326: '5f58d02c-99e9-4e47-b728-de5418471cff', 327: '1e4b64e7-a76c-408d-a233-79f745ab05e4', 328: '5d4ac536-96c4-49ec-a16b-51dd923495e9', 329: '49237e0e-4f06-45fb-8e1d-666830b86c98', 330: 'fc1a42d8-d626-4e9e-a7ed-478f29c39049', 331: '83bf4e99-f89c-4169-b300-0e730e233abf', 332: '88daf0eb-5bea-4dff-95ce-c2950a0bccfc', 333: '8bfcddb2-33e1-4d8b-bac2-4cc717af87d7', 334: '1fc59cb8-51a7-4d02-a139-9e83bf304fc4', 335: 'e63d2209-6457-4d88-bf3e-6976f73f8777', 336: '69b44038-27a4-47c4-a960-d0bd36f54253', 337: '4e9ee3e1-8b10-4e9c-8c45-20d06a55e9b5', 338: '2f5e3f14-fef9-4e00-95b6-6be05c5d370e', 339: '7fe6c679-360a-485c-a6b6-7544951111f2', 340: 'a949f0e3-e035-4aea-8ed0-5bede7d55608', 341: '164c88cb-27db-414f-8be0-d2be28dba697', 342: '88c0a812-3631-4cbe-9b34-a39ac4404c00', 343: 'b77f9ebf-74fd-4e45-9075-a4b546b671f8', 344: '5beb1f72-ec48-48e7-9855-4f40c6a54c3b', 345: 'f9aa48e8-5a94-43a1-ac20-5dd8e7b03379', 346: '27d22b01-c3e9-400f-bf03-c1c4432fbe39', 347: 'dd971a11-ffe9-47f6-ba32-afc488f92179', 348: 'aeef9f94-2e31-495a-b3f2-8a12ec0c4502', 349: '2c81d84a-a895-47dc-be11-e40a4178a139', 350: 'e2c4ee25-2251-425c-a044-2b736f912ef2', 351: 'a23fa87d-f266-4a98-9679-8d534dfdf7ac', 352: '35f8d4f3-bac3-45f8-b40e-3560849748be', 353: 'd8053c56-24f9-4b1b-9a00-3aaf46514d9d', 354: '6f2ffaf7-13db-46d3-a25a-72c12aa47c9a', 355: '58c41413-474e-49e2-a3ed-899e0069a176', 356: '1cc15a30-490b-431a-8754-f652ac92616c', 357: '690b9192-d7d3-4b54-bd6a-fbbdd7014396', 358: 'd1026682-9580-4f7a-a571-e5726f23ad58', 359: '8b8c7b10-8c9f-4ba5-b1b2-8686192e077b', 360: '917f588a-7648-4e15-94cb-eefff949c057', 361: '866e98ad-049f-42bf-a6b3-e58c7477cc71', 362: '1196fb12-6ff2-4050-811b-c2013f1939b2', 363: '2e1d6f42-b0a5-4621-9498-71e52fbe7089', 364: '6775bdfb-3e60-42f4-8f62-345adbaa0bd8', 365: '30006870-fe82-4c81-b6b8-ae8b1caeaab8', 366: 'a76bec20-995a-4e18-9f47-d7b9198a5bb6', 367: '7c67cf37-22ce-470b-9d5d-2d46acc77f3b', 368: '9ad246d2-2abd-4255-82d6-3b540f26def8', 369: '63e939d4-ea30-47ae-b475-892bb567074b', 370: '35c45b3f-8671-4065-8394-4173f93b4384', 371: '49ee1f79-763b-4e19-9f3e-eb8fcdfef5ba', 372: '0938f1a9-1cbd-4842-9ad9-6ed788d9dede', 373: 'fce75c65-7742-4b42-b6b1-fb8d567837c5', 374: '3cefba5c-50fd-456a-b9e5-c9445e2caf4a', 375: 'b369e92e-135e-4c9b-86ac-188232f75799', 376: '270cdd06-3931-436d-80c2-c1f987df16ba', 377: 'b6aa0ad3-6901-4b5d-927c-439f52c0d075', 378: '61c8873c-98ae-4ab9-bbcd-bb821a4029e4', 379: 'e0af2de8-b863-42cc-af01-17c8b2936246', 380: 'ecf0ad0a-980b-40bf-bb54-2093ad239efc', 381: '2ae5a966-cf73-4fd3-a8f9-23bbae6aa234', 382: 'f4fc7465-252d-46a2-a6a4-815a392b8495', 383: 'b749de69-5460-48c4-a4ad-b62a86d4283a', 384: 'c8c41739-d180-4012-9e0e-b6b86104eba3', 385: '0cdc51d3-fb5d-41d5-9c82-dc9640291f3b', 386: '0a37fe77-dc08-43fa-a9a4-0a9316e11ab6', 387: '231bf561-c1b5-4503-80b6-7534c6c2f8cd', 388: '3f6d1af6-4f82-4cfd-a497-f2be585acdf2', 389: '7f9f608b-bb4b-427c-9847-87acef7f7dfd', 390: 'ca233dce-9d19-447a-9f1d-3e854e44378a', 391: '858b8e79-6c4f-4ce8-ab10-827c0291baff', 392: 'cfb84843-b9b4-4ab6-b3de-f9b5e4eb5ba2', 393: '19d26fc1-e70d-4e6b-8ed8-451794a4837e', 394: 'ddf99485-a226-4820-b348-78ee8078d6c2', 395: '5977f66f-beee-4645-9a85-7cf5b117bb60', 396: '9ed12a87-93f9-43a7-844e-984a5b037aca', 397: 'f0a4de6c-7043-4b63-9960-09be0ec67c7b', 398: 'ef331cc6-5685-44cc-af32-4b9a5859ca36', 399: '8be86d11-3f90-4bbc-b8ec-b5de9a775238', 400: '86700055-8ba2-46a2-8d72-0d1accc5ef12', 401: 'c3a495f7-f147-40a7-a661-210c8cf108de', 402: '89ef0f41-5097-4af2-8dd6-811943c4e157', 403: '1859073d-e9f9-4fa8-8f02-8dcea4fba67d', 404: 'a2f97538-e956-4407-bf6b-de5463b0925c', 405: '8d52cd60-b3c3-481f-a165-3ee0279ed8d4', 406: '164e0e48-ea54-4755-beab-b57a722798e9', 407: 'db0cbe9e-6602-4d6b-974b-dcc1fdbfb7e5', 408: 'aa3bdb1b-1c25-40b6-a417-008dfbdd98be', 409: '97199ccd-5c65-417f-a12c-04e22c9d0949', 410: '90c5efb3-e665-4c58-bb80-6920a0aff867', 411: 'b3520b41-31cb-4678-bc98-2efff15ad26d', 412: '55f42cba-057a-4806-8371-b98d4e8dad08', 413: 'f48b7e20-0f83-491a-8d97-c0821b874d76', 414: '2b689623-a4f5-4736-9f59-c2d5c4a1b10f', 415: 'f2af20b2-a0de-4410-b975-5ec90830e8af', 416: 'fe39ed9f-7bd6-497a-8bbb-70aece562f5f', 417: 'f33ebf10-7325-48be-82e4-3707a42eacda', 418: '692934f0-5724-4754-9618-af880c22ac6c', 419: 'a005c176-edb6-4f2f-af1a-fca837939ca9', 420: 'f2ef1b8e-7861-46e9-815e-57095d5265a7', 421: '0fa9696d-aa9a-4f62-a1c4-135f31f10b6d', 422: 'fa1e4d72-282b-4689-957c-3dadee0cf419', 423: '28e2ea1e-538f-43e6-9a95-8db614c46ed2', 424: '51a8f575-2d11-477a-8c16-f7a86d4a9f42', 425: 'c64ee9fe-8c5b-4dac-a051-600655f8c948', 426: '6a444f76-24f2-45a9-bd51-1cc5dad5ae15', 427: 'bc5e936f-492a-4b26-81fa-69503b6328c7', 428: '9660cdb0-5e62-42b5-b002-9e39d1597cec', 429: '7de89520-9196-49e1-b9c9-f82f22375883', 430: 'fd8713a5-cd4a-4a2c-9ac3-8f257cd87535', 431: '4f4018e8-b007-43c0-9e91-cfaa74bf939c', 432: 'c165cda8-189c-495b-8d17-9e65ba050393', 433: '18146b7b-915e-409b-a2d1-e8d0ebe94f90', 434: '9bfa5068-27c8-464d-a748-d7f9438ab975', 435: '5693a5e5-852b-4279-94ae-c4439475b7ea', 436: 'e6343303-8ca5-4028-9331-299a93ed85e1', 437: '91068ae7-e274-4162-949c-2a13285db046', 438: '0d24bed0-d867-48d8-91c3-a46da6d83993', 439: 'd7589833-c6a6-4916-b179-ac1bc93eb347', 440: '8fff71e9-6445-45e3-81ba-675c87452705', 441: 'd6e773c6-ec63-49c8-97c7-dceabda8e7e2', 442: '70625fe3-fa59-41eb-ae79-3f260c36f090', 443: 'fb66f411-48ed-4a12-97b8-8136b07528f4', 444: '8a4bd750-471f-42d3-8864-5de12e3fd5d9', 445: '0ad1fc5e-221d-4dcb-8143-707781652ae3', 446: '089c13cc-10c2-4934-b281-37db349bf2d4', 447: 'bf87bed5-df55-4df4-af07-f2f328c85837', 448: 'aa4394fc-95e9-4b71-a246-76ba200f9956', 449: '616dc43d-fbf6-4073-9961-070bf2207120', 450: 'cad717f9-5c83-4a3a-bf0a-dcf303222f48', 451: '85dcb49a-d99a-41b7-a502-3030884280b8', 452: 'eaef4e66-69b3-4b8e-945f-e8f63163d3c7', 453: '1e1dcd58-b947-4b7d-a43b-e1e6f0df10d5', 454: 'e5e13a57-d345-4910-8dc2-83983263d058', 455: '643302f9-0085-459a-b2ea-c2995f540c43', 456: 'dac227f5-633b-420b-b14f-1bb414f6aca6', 457: '160ae6df-3954-432f-8586-5bcb8b540060', 458: '52564089-e059-49f6-8c09-02dcaf0ad448', 459: '33c2d2e6-2887-4772-bedf-dfdd581d7b93', 460: '759b0eb3-eb7e-4d63-81d9-f12575c36bbc', 461: 'c90b246b-34b8-4d1e-9f1b-e363e8ba5806', 462: '0c6a8750-a110-4c26-a7c1-d5f16cc69fb5', 463: 'e1a44ea6-3ada-4800-8f05-3613364eb3af', 464: '8b55b8f0-e8e5-4f7a-9f09-ac6f4f90818e', 465: 'b4216760-6076-4d04-95ab-8091538e366d', 466: 'f9f7a9b3-c406-4593-bd68-f77d8e1a9972', 467: 'fb4b4f49-3e65-4c6b-bcdf-a7f65c4f46ba', 468: '8147da76-1407-4bdc-b883-48b7b3de5077', 469: 'e2ae96e0-c957-4b57-8cba-b890e2f78ffd', 470: '2f39f235-dbb6-4e8b-8c51-ada1309ff42d', 471: 'ae9de81d-60bb-424d-ab4a-ef072e441fec', 472: '3b3709f8-dc8a-4e8c-b362-00b65e3d15cf', 473: 'e0ff20b1-6c8e-49a3-8d95-bf4eccf832bd', 474: 'aff479ff-6ab6-425c-9302-432291719b5d', 475: '3a70599b-e060-4a5d-b8af-74e2b819870b', 476: '99a92d9d-0d14-4afc-90c1-b8faceb63a67', 477: '4a40c81f-7f86-4407-a7d1-c1ff2f1adac2', 478: '0807c180-4eb0-4de5-8ae2-d1212f40e614', 479: '714a3e45-27f1-4269-8038-05ef29ebb1ea', 480: '83dc311a-0392-4a0f-ae3f-6a8c3e379d60', 481: 'efe38f57-79c6-4514-87a0-b80331d0ff4b', 482: 'db50403c-5f99-401c-9b5f-92909e29c1e5', 483: '6311610c-117f-4ae3-8ec0-47218bf01c31', 484: '598c2f54-b926-4691-b6f3-67f6033618c7', 485: '1c5159b5-f09e-40f7-9f12-ab7dc2dcd3c2', 486: 'eb032f58-d89c-4dc2-a349-f87f61322f7b', 487: 'af247971-5bf9-4e50-9c45-f220ea81a12c', 488: '1d7b3bda-525d-4a25-974a-115f9f5087de', 489: 'c86d9b67-fc60-4882-862a-a39cc8174074', 490: 'ea596c2b-e9e8-4e8d-9fd0-5894bd3b0566', 491: 'd6e21db9-a7b9-4c7d-833e-4dbeb5e5ea51', 492: '8e6d1b36-7726-460a-968c-e35e04d1cf03', 493: 'fd574c77-c6c0-4ecd-b322-bd63bba773dc', 494: '24fa6ad8-2684-4b94-95e5-2509de1a65d1', 495: 'dfd7263c-6ff8-4512-954c-124015a4162e', 496: '75e42a46-1e0c-4d11-8d86-6687a31a0a39', 497: '4b71b061-9c6f-4162-b637-8df000fb7864', 498: '5d4e6679-d07d-4e7c-8f88-b6ae92b6a8ba', 499: '9cdc5dc8-41d7-4a7f-b092-a9dc4d0b3b55', 500: 'b290b91c-484e-40fd-b044-ded89d9c4b4f', 501: '5bab60c9-0cc3-4d92-a6d6-47c0148102ef', 502: '2d7abeb8-3ece-4fe3-922f-cee0fdddc389', 503: '4ffa4ca2-e38a-45bd-b7ba-47707ed1a412', 504: '8d34dcde-66a9-4dcf-b59d-c97d61fa1438', 505: 'a1d7f8e3-07f1-40d9-ae3d-f89bbe727b02', 506: 'fc37462e-a0fc-43d2-9f00-99db0309b886', 507: '26de558a-e2e7-4323-9d9e-fea09526cfbe', 508: '094a00ee-db4d-429c-8669-c483d5f6806b', 509: '9d9f185c-4942-4092-9668-bc2d8b2b89ee', 510: 'b627ec66-4430-4c67-86e0-3cdc797fb6b7', 511: '44a683bc-827b-44a1-962a-6a7f2ce8ca9a', 512: 'ed72df7a-abcf-46a6-a754-2af7e0bb3ac8', 513: '15659abc-ba8b-4462-a2d1-2187a7681116', 514: 'a95513f7-503d-4823-97dc-24aa5b108894', 515: '6b907434-d2ef-427d-afc6-c25daa82065a', 516: 'f0fba927-2550-406f-89cc-aa9ff1aa36d8', 517: '1e0e389c-85ed-4dd9-b117-da26fbf91b71', 518: 'a6672492-19a8-4dd8-9c4f-a09548889156', 519: '21cf2369-9501-4717-a00b-ac2cb74b0dcc', 520: '59e041e3-b95d-4e35-93f2-f53c3cddd3ce', 521: 'a1057749-0dc2-49d3-a30a-a007d79dd431', 522: 'e4c3bd40-8935-4930-a356-34d47eae5a27', 523: '31c5eb21-4787-49e3-aff6-dabf2a2d99a6', 524: '172f9ea0-b376-4399-a7c4-a0d951197fb6', 525: '001d489a-e6fa-4794-ab36-cdad5a649977', 526: '79c1a046-d19f-42a9-8757-eccfdea120e6', 527: '0687a720-7fd5-426e-9128-f79b64e09c91', 528: '305a639b-fc31-4696-8902-6a03a9a30c6f', 529: 'ee819607-3678-4cb7-9355-59ed3bf282b9', 530: 'a6e37bd9-efbb-45c4-a7e9-1688396a5d03', 531: 'c68c18c7-9e1a-466c-af81-af3dc0844a9b', 532: 'ddd8803b-103b-46d3-bd64-24eeede1535b', 533: 'ec771460-7e44-4aee-a70b-15e6d69c4243', 534: '9c3953e4-5014-430b-820b-1dae0fc4e234', 535: '0f18b548-e047-421a-888b-062dea2b0367', 536: 'd2219753-2bbb-4c8d-a6ef-08975b2a9c9a', 537: 'afcd36fd-bd0f-49d9-910f-8b33e581f332', 538: '2d83938a-125a-4e33-8d49-8034445367de', 539: '39fff63b-0da6-4935-b24a-6652f22f42bf', 540: '9c92c652-6cdc-4dee-a1ec-df437a9c9c90', 541: 'af9f858d-59ca-469a-86e6-507f761f19f7', 542: 'd0f11dd4-1f5c-4ef7-9b9b-bdbe0a22e13b', 543: 'c4aef4bc-b786-4b29-aa61-49715328873f', 544: '4cd75f00-acf1-4df9-b731-2c988b20a3db', 545: '4db641d9-37ca-43ca-ba82-78d13a296e13', 546: 'b81b84d3-9285-495a-bb17-c1ec3ecb6f8c', 547: '1d344586-944d-473f-9431-360ac417fd53', 548: 'a9498fc0-d64c-42e0-9c2e-d025aeaa8bc7', 549: 'd7e1536d-998b-4173-9290-9ffaa4f85285', 550: '9f5a8ebb-ff94-4463-bd93-345c5a1ba4c4', 551: 'ba93dfcd-b2c9-4696-a272-383a7d121361', 552: 'fda258a5-758a-4078-9b89-fb4e3681021c', 553: '4ddb1bd5-2e1b-4030-8738-6f06418e9794', 554: '8c6f5af7-154a-45c6-8c38-b963bd890899', 555: '97fcebea-68ea-4bd4-ae5b-2ff8f47b4294', 556: 'a58b8b10-9dec-44eb-931a-508d8e076334', 557: '59063db1-2a45-4384-985e-66219cdaa82f', 558: '05c1a681-8da8-4435-ad45-a41de35bcdac', 559: '3b204fde-8839-4f3d-bbd8-8bd0176a4c55', 560: '503c095d-a2bc-4b09-9ee7-4e61a97db450', 561: '38f27418-9be1-4f03-9aeb-1bbf77c45705', 562: '540af469-ac19-4dff-94b7-0a9c577cc650', 563: '392594e9-dbbc-44e7-9607-1f0f26629df3', 564: '71a2ea11-221e-4f50-9cb0-0024eef5bc77', 565: 'f0828363-11c7-4730-8c99-41b8b9144856', 566: '4c1dac30-67e0-4f8d-bc19-2d3fe61e1b03', 567: 'd34a6c15-0aea-4e5b-a562-fd9fbf59c4ea', 568: '9177a983-542e-47c5-8e74-e064ea459b57', 569: 'e88f9c65-51a9-401d-83d6-acd45b0aaa99', 570: '978e372d-be4a-4ec5-9087-d4e615762f00', 571: 'a7ebe415-6028-46d4-b926-7ca8492c7305', 572: '7b335a65-022d-4b3f-a603-c40655cb44fd', 573: '214e74ab-40ce-471c-8bcf-ceb2398d69b2', 574: 'a35f23b4-acb0-461f-a510-c60de1d9481d', 575: '8c2b4af5-3eb2-4718-8692-93e30d253509', 576: 'df97fb98-19ab-4e38-ba43-6b09c17e1e7d', 577: 'c340b2ff-b8cb-485d-abcd-13016fe6af07', 578: '5f3bfb86-11ea-4292-8120-3cf9a6f10018', 579: '88555cf3-944c-415f-b4d2-2e703487ab83', 580: '4b934c80-a342-464d-9e77-a8eb0a1bb304', 581: '1d7b1b76-144b-4984-a379-301dd8919544', 582: '17e5443c-03da-4b41-afaf-523f59bd1898', 583: 'd366d749-2605-46eb-a8d3-1e42788a0c18', 584: '89a6ce06-ceab-4d62-b73b-715e4935086f', 585: 'f8a808f4-a232-456f-bdf6-a3ae384ee6bf', 586: '8f029132-6063-4060-8cd3-8f2b59eb241e', 587: 'f0231599-75f7-4222-ab4a-e39c1f2df5bc', 588: '2d17f312-2ed7-4338-a028-26c96baa668b', 589: '1010d3a8-2cfc-4932-9d03-6641fc24669f', 590: '55b258bf-e569-4fc0-9e1d-67dc493f43b1', 591: 'ae8e17d2-a063-466c-8924-e3dd3aa632b4', 592: 'e3af9299-88de-4cf0-9d75-b89f6cb4cfcc', 593: '87dcbead-b5b4-4578-9100-f2a0f9a9bc60', 594: '3f309a6e-f4da-45ec-a8eb-99bdd891ee48', 595: '2e2bbbe0-dd0b-42bb-aa9b-94f5e01eba1c', 596: '6ddf28c5-8ce9-49b1-a4bd-da9655ec3e46', 597: 'f0cf77df-6338-41f3-a204-0ab91bb5e220', 598: '310f8b8e-f1c5-4b9a-bbbf-57383397f40d', 599: '266667c0-39e4-45a5-a577-fab97f358ffb', 600: 'cdef08f8-40e1-400b-8131-6dd4eb0089e4', 601: 'eb689253-03e2-4182-8993-e88e11d6ad9d', 602: '997e1d77-a4e2-4737-98f0-68a71b06dd74', 603: '58029f44-b8cf-461a-8d90-ca177999db59', 604: '41e79060-b0c0-47f3-aa47-5b6cf703aa2b', 605: '0e67372f-86c3-45a3-a42f-a5c9dbb558ab', 606: 'd4b4ae4c-2529-4a3e-8316-545aa81f9e0b'}
2025-07-07 02:23:26,664 - INFO - length of chunks: 607
2025-07-07 02:23:26,665 - INFO - Retriever is working good.
2025-07-07 02:24:24,698 - INFO - Transcript : welcome to the ultimate Django course in this course I'm going to teach you everything you need to know about Jango from the very Basics to more advanced concepts so by the end of this course you'll be able to use Jango to build production grade backends for your web and mobile apps if you have always wanted to learn web development with python you are in the right place we'll use Python and Django to build and deploy the back end for an e-commerce application if you're looking for a comprehensive organized and practical course that takes you from Zero to Hero and prepares you for the job this is the right Django course for you everything you need to know about Django is in one place in the right order so you don't need to jump back and forth between random tutorials I'm msh hamadani and I've taught millions of people how to advance their software engineering skills through my YouTube channel and online school Cod with.com if you're new here be sure to subscribe as we upload new videos all the time now let's jump in and get started [Music] let's talk about what you need to know to take this course for starters you need to know python you need to know the basics of python as well as objectoriented programming Concepts such as classes inheritance polymorphism and so on you should also know the basics of relational databases so you should be familiar with Concepts such as tables columns primary and foreign Keys relationships and so on if you need to refresh the fundamentals I have a couple of beginner level tutorials on my my YouTube channel as well as comprehensive courses on my website codewithmosh docomo that you're the right student for this course now let's talk about how you should take this course first and foremost I want you to watch this entire course all the way from the beginning to the end even if you're familiar with jangle because along the way I will share a lot of tips and tricks and I don't want you to miss out on any of them if you taken any of my other courses you know that I'm not going to waste your time with repetitive or useless stuff so make sure to watch every lesson now while watching each lesson I want you to take notes you can just write down some keywords on a piece of paper if you don't want to write a lot of notes I strongly believe that the act of writing things down will help you remember new things that you learn then after each lesson go through your notes and repeat the same steps I show you in the video this is exactly how I personally learn new things also I've care designed tons of exercises that help you understand and remember the materials so make sure to do all these exercises because the more you practice the better you'll be at Django or coding in general welcome back to the ultimate Jango course in this section we're going to talk about the basics of Django first I will give you a quick introduction to what D Jango is and why it's so popular then we'll talk about the fundamental web development Concepts that every web developer must know next we'll set up our machine for development and create our first Jango project once that project is up and running I will show you two essential techniques for debugging D Jango applications this is going to be a short and sweet introduction to D Jango so let's jump in and get [Music] started so what is D Jango and why is it so popular well Jango is a free and open-source framework for bu building web applications with python it's not the only web framework for python but it's the most popular one because it helps us build a website in less time with fewer lines of code that's why a lot of companies like YouTube Instagram Spotify and Dropbox use D Jango in their text stack now Jango is what we call a batteries included framework which means it comes with a lot of features out of the box so we don't have to code them from scratch for example it gives us an admin interface for managing our data which is a huge timesaver it also has an object relational mapper that abstracts a database so we can query or persist data without writing a lot of SQL code it also comes with an authentication package for identifying users it also has a package for caching data and much much more so since D Jango offers all these amazing features we can focus on our application and its requirements we don't have to reinvent the wheel and code all these features from scratch now once in a while you might come across someone like our popular super star developer John Smith who thinks D Jango is a piece of crap because it's old and Bloated with so many features he used it hated it and then rewrote his entire project with a new shiny framework that is faster well saying a framework is better than Dango because it's faster it's kind of like saying a Ferrari is better than a truck because it's faster what if you want to move something you're not going to use your Ferrari for that right so a white software engineer doesn't pick up a framework merily based on it performance there's so many other things you need to take into account like the maturity of the framework how stable it is from one version to another its learning curve the size of the community and so on D Jango has been around for a long time and it has a huge community so there are tons of Jango packages built by the community that you can reuse in your applications also if you get stuck there's always someone out there to help you if you want hire people there are tons of people to choose from so these are the benefits of having a huge Community around the framework now regarding Jango features yes Jango comes with a lot of features but you don't have to use or even learn all of them because all these features are optional so you can use the features that make sense for your own application so in my opinion debates about the best framework in the world are useless we all like different things and just because someone doesn't like Django it doesn't mean it's bad a lot of companies are using D Jango and are looking for Jango developers here in the US the average salary of ajango developer is just over 100 $177,000 a year so if you like Python and want to get into web development learning Jango is a good investment for your [Music] future so you learned that D Jango is a framework for building web applications with python now let's talk about some of the fundamental concepts you need to understand to build web applications let's say we're going to build an online store and publish it at mh.com now this website is going to have two parts or two applications a front end and a back end the front end is the part that is loaded inside a web browser on a client machine it's the part that the user sees and interacts with the back end is the part that runs on a web server and is responsible for data processing validating business rules and so on now let's imagine that Alice wants to visit our website so she points her browser to mhbay.com this address is also called a URL which is short for uniform resource locator it's basically a way to locate a resource on our internet a resource can be a web page an image a video a PDF and so on so Alice types mosh by.com in her browser and presses enter at this moment a browser sends a request to the web server that hosts our website and says hey Alice wants to see the homepage so the web server should take this request process it and return a response back to the client this data exchange is defined by a protocol called HTTP which is short for hypertext transfer protocol it defines how clients and servers can communicate so this is the big picture as Alice navigates our website for each page her browser sends an HTTP request to the server and receives an HTTP response now as part of building the backend for this website we need to decide how we're going to respond to clients one option is to generate the requested page on the server and return it to the client we use HTML for that HTML is short for hypertext markup language it's a simple language for representing web pages on their content every web page you have seen on our internet is built using HTML so one option is to generate the page on the server and return an HTML document to the client the other option is to return only the data needed on the requested page and have the client generate the page so instead of putting a complete page or a complete HTML document in an HTTP response we only return the data like the list of products now what is the difference well if we push this responsibility to the client we can free up the server so it can serve more clients our application will be more scalable that's why over the past few years this approach has become more trendy and is now considered the industry best practice these days we have tools like react angular and view for generating web pages on the client these are all client side tools that are used by frontend developers in contrast we have server side tools for building back ends D Jango Falls in this category so you should not compare Django with let's say react you may compare Jango with other server site Frameworks like as.net core which is used by C developers Express used by JavaScript developers and so on so if you push the responsibility of generating web pages to the client the server essentially becomes a gateway to the data on the server we can provide endpoints that the client can talk to to get or save various pieces of data for example we can provide one endpoint to get the list of products and another endpoint to get the list of orders someone has placed now all these endpoints together represent the interface that clients use to talk to the server in technical terms we say the server provides an API or an application programming interface to clients this API is essentially like the buttons on a remote control all these buttons together represent the interface or the API we use to interact with the TV Okay so so in this course our Focus will be on using D Jango to build an API for our online store client applications can use this API to get or save the data how these clients are built is irrelevant here we can use react angular or even plain JavaScript that falls under frontend development which has nothing to do with Jango once we build this API if you know frontend development you can always build a client app that talks to this API all right now that you understand the big picture we ready to set up our development environment and that's what we will do [Music] next all right let's make sure you have the right setup before we start coding the first thing I want you to do is upgrade your python to the latest version so head over to python.org download and download the latest version of python for your operating system once you do that then open up your terminal window and run python D- version to make sure you have upgraded your python correctly now here we see Python 2.7 because on Mac we have two different versions of python running side by side we have the old python 2 which is now deprecated and we also have Python 3 so if you're using a Mac you have to run python 3-- version but if you're on Windows or Linux you have to run python D- version okay so here I'm using python 3.9.5 great next we're going to use pip or pip 3 if you're on Mac to install pip NV I talked about pipn in my python course it's basically a dependency management tool for installing our application dependencies in Virtual environments this way our application dependencies will not clash with other applications dependencies okay so let's go ahead and install this now in this course just like my other courses I'm going to use Visual Studio code or vs code as my editor it's just my personal Al preference if you have a preference for a different tool like pie charm that's totally fine having said that I highly encourage you to use vs code because throughout the course I'm going to show you a lot of shortcuts and time-saving tips that will not apply to your editor in case you don't have vs code you can get it from code. visual studio.com now once you run it I want you to go to the extensions panel over here and search for python make sure to install this extension because with this we get features such as intelligence debugging code navigation and so [Music] on all right now that we have installed all the necessary tools let's create our first triango project so here in the terminal window I'm going to go to my desktop you can go anywhere on your machine it doesn't really matter now we're going to create a directory called store Front that is the n project next we go inside this directory and run pipm install Jango so we're going to install Jango using pipm inside a virtual environment now let's go ahead all right now take a look so over here you can see that pipm has created a virtual environment for this project down below you can see the path to this virtual environment if you're on Windows you're going to see something like C drive backs slash whatever now if you're on on Mac and using zshell which is this fancy colorful terminal window we can hold down the command key and click on this path to go into it otherwise you can just copy this and use the CD command to go inside this directory now take a look so here's our virtual environment in this environment we have this bin folder that contains a bunch of binaries for example we have python pip Jango admin and so on so back to the terminal pipm created a virtual environment and installed D Jango inside that environment but in addition to this pipm also created two files in this directory pip file and pip file. loock so I'm going to open this directory using visual studio code by running code period if this doesn't work on your machine just drag and drop this folder onto vs code all right so here's our pip file this is like package.json for JavaScript projects so in this file we can see that our project needs this particular version of python and under packages you can see the packages that our application is dependent upon so here we have D Jango equals asterisk that means any version or the latest version of Jango if we installed a particular version of Jango we would see that version here now back to the terminal window we need to activate this virtual environment so we'll use the python interpreter inside this virtual environment not the one that is installed globally on this machine to do that we're going to run pipm shell okay next we're going to use D Jango admin to start a new project D Jango admin is a utility that comes with Django so if you run it we can see all these commands that we can use to work with Django project as we go through the course you'll become familiar with this commands in this lesson we're going to use Jango admin start project and we're going to call that project store front now back to vs code Jango admin created this directory for our project and inside this directory it created another directory that is the core of our application in this directory we have this files which I'm going to talk about in a second but before I do so let's get rid of this redundancy because we have three storefront directories the top one is the one that we created earlier in the terminal and then we have these two other d director is one for the project one for the core of our application so I'm going to delete this project directory now we're back in the previous step so we don't have a Jango project at this stage now back in the terminal let's bring up the last command but type a period at the end this tells D Jango to use the current directory as the project directory so D Jango is not going to create an additional directory for our project okay now take a look so we have this directory which is the core of our application in this directory we have this init file which defines this directory as a package we have the settings module where we Define our application settings we have the URLs module where we Define the URLs of our application and these two other modules that are used for deployment for now don't worry about them now next to this directory we have this file manage.py this is a wrapper around D Jango admin so going forward instead of D Jango admin we're going to use manage.py the reason for this is that manage.py takes the settings of this project into account let me show you what I mean so now that we have a project we want to run a web server so another command that jangle admin provides is run server however if you run jangle admin run server we get an error saying requested setting debot but sending are not configured because at this point Jango admin doesn't know about the settings of our project so now that we have a project instead of Jango admin we're going to run python manage.py now look we see the same commands that Jango admin provides so here we can say python manage.py run server now optionally we can supply a port number if we don't Supply this by default this will use port 8000 but you might have another application running on Port 8,000 in that case you might want to explicitly set the port number so let's go ahead with that now we don't get an error because manage the P knows about the settings of our project now here we get this warning saying you have 18 unapplied migrations don't worry about this yet we'll talk about this soon so if you look over here you can see that D Jango has started a development server at this address so we can copy this and paste it into browser or if you're on a Mac and using zshell you can hold down the command key and click this all right beautiful our first Django project is running successfully so let's move on to the next [Music] lesson so far I've been using a separate terminal window but vs code also has an integrated terminal window that is easier to use but to use that we have to properly configure it to use the python interpreter inside our virtual environment let me show you how to do this so back to our terminal window first we're going to stop the web server by pressing controll and C okay now back in vs code on the top Under The View menu look we have this command pallet the shortcut on Mac is shift command and P now here we're going to search for python interpreter So currently vs code is using this python interpreter that is installed globally on this machine we don't want to use this we want to use the one inside our virtual environment but how can we find the path to our virtual environment very easy so back to the terminal let's run pip andv d-van all right here's the path so let's copy this good now back to vs code we're going to select enter interpreter path then we're going to paste the path and append slash bin slash python at the end if you're on Windows instead of a forward slash you have to use a back slash okay good now in this project we have an extra directory vs code we have a settings file and here we have the pass to python interpretor good with this we can go to the view menu now look we have this integrated terminal the shortcut on Mac is control and back take now vs code automatically activates the virtual environment for this project so here we can run python manage.py run server good so going forward I'm going to use the integrated terminal window here it's easier we can always hide it by pressing control and back take or bring it back we can maximize it move it around and so on Now One Quick tip sometimes when running this command you might get a syntax error saying invalid syntax this happens every now and then when vs code fails to activate the virtual environment for this project to solve this problem all you have to do is open a new terminal window and look vs code executed this command to activate the virtual environment for this project now we can run python manage.py run server great [Music] all right let's talk about apps so every Jango project is essentially a collection of various apps each providing certain functionality just like the apps on your mobile phone each app provides a certain functionality right Jango projects are exactly the same so in this project let's open up the storefront directory and then look at our settings module now we can collapse this panel by pressing command and B on Mac or control and B on Windows okay now in this module we have a bunch of different settings in this lesson we're going to look at the install apps so every Jango project by default includes these apps the first app is the admin app which gives us an admin interface for managing our data then we have the off app which is used for authenticating users then we have content types app which we'll talk about later in the course next we have the sessions app which is kind of Legacy we don't use sessions anymore a session is a temporary memory on the server for managing users data these days when building apis with Django we don't use the sessions app so we can come here and delete this app then we have the messages app which is used for displaying onetime notifications to the user and finally we have the static files app for serving static files like images CSS files and so on so each app provides a certain piece of functionality okay now we can also create our own apps here so let's save this file now let's open up the terminal window by pressing control and back tick so here's our terminal window where we have our development server running we're going to open a new terminal window okay now let's expand this to clear the window we simply press contrl and L now we're going to run python manage.py start app and we're going to call this app playground okay so let's close this window and open up the Explorer panel all right look here's our new app which is represented using a folder with a special structure so every Jango app has the exact same structure here we have the migrations folder for generating database tables we'll talk about that later in the course we have a complete section about this topic we have the admin module where we Define how the admin interface for this app is going to look like next we have the apps module where we configure this app app so the name is misleading I don't know why Jango developers decided to call this module apps it would be better if it was called config that's just my two sets next we have the models module where we Define the model classes for this app we use model classes to pull out data from the database and present to the user next we have the tests module where we write our unit tests and finally we have the views module which we'll talk about in the next lesson again the name is misleading this is not the view that you think if you come from a frontend develop background so what we have here is essentially a request Handler it's not a view it doesn't have a template or HTML again we'll talk about that in the next lesson so we created a new app now we need to register this app in the settings module so every time you create a new app you need to register it here in the list of installed apps we simply add the name of the app which is called playground save the changes done in the next lesson we're going to talk about views [Music] all right let's talk about views so earlier you learned that HTTP is a request response protocol so every data exchange involves a request and a response this is where we use views in Django so here in the playground folder let's open up the views module this is where we Define our views or view functions a view function is a function that takes a request and returns a respon response so more accurately it's a request Handler in some Frameworks it's called an action in Jango it's called a view but I don't agree with this name because from an architectural point of view a view is often associated with something that the user sees that part in Jango is called a template and we'll talk about that later in this section now that aside let's create our first view function so we're going to create a function we can call it anything we want I'm going to call it say hello now this function should take a request object and return a response so first on the top from Jango that HTTP package we're going to import the HTTP response class now in this function we can do anything we want in a real word scenario we can pull data from a database we can transform data we can send emails and so on for now let's just return a simple response so we're going to return an instance of the HTTP response class and in this object in this response you want to add a simple string so let's say hello world okay so this is our first view or first view function now we need to map this View to a URL so when we get a request at that URL this function will be called and that's what we're going to do [Music] next all right here's our Django project now let's say whenever we send send a request to playground /hello our view function should be called and return hello world to the user let's see how we can do that so back to our project here in the playground folder we're going to add a new file called urls.py we could call it anything the name doesn't matter but by convention we call it URLs now in this module we're going to map our URLs to our view functions so on the top we're going to import the pass function from Django the URLs so from Jango URLs we're going to import the path function now don't worry about memorizing any of these as you practice all of this will become second nature also from the current folder we should import the views module so we can reference our view function now we should Define a special variable called URL patterns all in lowercase make sure to spell it properly because this is what jangle looks for we should set this to an array of URL pattern object we use the path function to create a URL pattern object so if we call this function look at the signature of this function this function has a bunch of parameters the first one is Route which is a string the notation you see here is called type annotation which is kind of a new feature in Python with type annotation we can see the type of parameters and the return value of a function so the first parameter is Route which is a string the second parameter is view which is a function that returns HTTP response object object now look over here this notation represents the return type of this function so the pth function returns a URL pattern object so I'm going to call this function and give it two arguments a route or a URL which is playground SL hello and a view function so from the views module we're going to get say hello note that I'm not calling this function so here we don't have a pair of parenthesis we're just passing a reference to this function okay so what we have here is called a URL conf module that basically means URL configuration so every app can have its own URL configuration but now we need to import this URL configuration into the main URL configuration for this project where is it you saw it earlier so back to the Explorer panel here in the storefront folder we have another URLs module up here we have a bunch of comments about how we should use this module now look over here if you want to include another URL conf there are two things we need to do first we need to import the include function from jangle URLs so over here we have from Jango URLs we're going to import the include function next we need to add a URL to URL patterns so in this module we also have a URL patterns object which is an array of URL patterns object so here we're going to call Path give it a route and then we use the include function to reference the URL configuration module in this app so we're going to call Path and say any URLs that start with playground followed by forward slash should be routed to our playground app so this is where we use the include function now the include function requires a parameter that is a string here we're going to reference playground. URLs so if we send a request to playground /hello D Jango knows that all requests that start with playground should be handled by this app so it's going to chop off the first part of this URL and pass the rest to the URL configuration module in the playground app so back to this URLs module we no longer need to add playground here because we added it once in in the main URL configuration module so we simply add hello followed by a forward slash I forgot to add that we always end our routes with a forward slash so let's save the changes now whenever we change our code D Jango web server automatically restores itself so let's open up the terminal window make sure we don't have any arrows good so back to the browser let's send a request to this endpoint great we see Hello World on the screen so so this is how we can map URLs to view functions next we're going to talk about [Music] templates so I told you that views in Django are not really views they're more like request handlers or actions what we often call a view in other Frameworks is called a template in Django so let's see how we can use a template to return HTML content to the client so here in the playground app we're going to add a new folder called templates and in this folder we're going to add a new file called hello.html and of course we could call it anything here we can write some HTML markup for example we can type H1 and press tab to add an H1 heading and say hello world now don't worry if you don't know HTML we're not going to use it in this course I just want to show you how Jango templates work so let's save the changes now back to our view function instead of returning a plain HTTP response we're going to use the render function to render a template and return HTML markup to the client so let's remove this line and call the render function now look at the return type of this function it returns an HTTP response object so here we're going to return the response now let's remove the brackets and type them again so we can see the function signature the first parameter here is a request object and the type of this is HTTP request so we're going to pass this request object right here now the second parameter that's the name of our template which is a string so here I'm going to say hello. HTML the other parameters are optional so don't worry about them at this point now save the changes let's make sure our project works up to this point so back in the browser refresh beautiful now we see HTML content we can verify it by right clicking on this page and looking at the page source so look we returning HTML content great now let's make this a bit more interesting so back to our template instead of hello world we can dynamically render some value so back to review function let's type a comma to see the next parameter that is a context object and the type of of this is a mapping of string to any that means we can pass any mapping object that Maps a string value to any other type of object so here we can pass a dictionary so let's pass a dictionary the type of the key should be a string so we can call that name and we're going to set that to a value like let's say MH now back to our template instead of hello world we can render the name that we passed here so we type two pairs of braces and in between we type the name of the key save refresh beautiful now in this template we can also write some logic so we can type an if statement so we type braces and in between them we add two percentage signs in between them we can write an if statement so we can say if name is set we can render it here otherwise we can render hello world and of course we need an end if Clause as well so and if now this syntax is kind of ugly but the good thing about D Jango is that it's modular so you can easily replace D jango's default template Engine with your preferred template engine but once again we don't really use templates in D Jango projects that often these days there are special cases for them but for the most part we use Django to build apis that return data not HTML content so I just included this lesson so you know what templates are and how they work we're not going to spend any more time on templates for now unless we encounter a situation where we really need [Music] them let's talk about debugging Jango applications in vs code this is particularly useful if our application doesn't produce the right result and we want to run it line by line and see where exactly something has gone wrong so click on this icon to open the run and debug panel now the first time you see this message saying we should create a launch. Json file basically we need to create a launch profile so vs code knows how to run or debug this application so let's click on this now in this list select Jango all right here's our launch. Json file what you see here is kind of like a dictionary in Python you have a bunch of key value pairs these key value pairs Define a launch profile so vs code knows that to run this application it should use the current python interpreter to run manage.py which exists in our workspace folder and then as an argument it should Pass Run server to it here we can add an additional argument to specify the port so it doesn't clash with Port 88000 which is currently in use okay save the changes we're done with this file so let's close it now if you're curious let me show you where this file exists is added to our project up here inside the vs code folder so here's our launch profile now that we have a launch profile if we go to the run and debug panel we see something else so here we can start our application for debugging but before doing so I want to write some dummy code here in our view function so let's set X to one one and Y to two now I'm going to click on this line to insert a break point when we add a breako vs code will execute every line of code until it hits our breakpoint from that point onward we can execute our code line by line so let's add a breakpoint and then start the application for debugging all right let me collapse this window good so in this new terminal window we have a development server listening on Port 9000 so let's hold down the command key on Mac or control on Windows and click on this link all right here's what we get the homepage of our project is gone because we have registered a custom route that is playground SL hello so we see the homepage only the first time we run our Jango project so let's go to playground SL hello all right our breakpoint is activated and we are on this line now on the left side in the variable section you can see the local variables So currently we have the request object that is the request object that we receive in this function so we can expand it and inspect its various attributes we don't want to do that for now so let's close this we want to execute our code line by line so here we have a bunch of functions the first one is step over and the shortcut for this is F10 with this we can step step over the current line so if we press F10 this line gets executed and now we on the second line now look over here in the list of local variables we have X and its value is one this is very useful when debugging applications so if something is not calculated properly we can inspect it here now most of the time you can see your local variables here but if not you can always add them in the watch window so before recording this video I was practicing that's you see X here let me select this and delete it so in your watch section you're not going to have any variables to add one we simply click on this and then type the name of our variable okay so this is how we can step over various lines so we can press F10 again and again so this function is executed and now back in the browser we see the final result now let's do something more interesting so back to our code let's close the terminal window so we have more space I'm going to define a function here called calculate and here we're going to set X to one y to two and return X just some dummy code now over here we're going to call the calculate function okay now save the changes back in the browser let's refresh so our view function gets C now we are right here now this time instead of stepping over this line we want to step step into it because if you step over this line we're not going to see what happened in the calculate function we see the final result so we see X is set to one and we can verify that over here as well but sometimes we need to step into a function to see what is happening there maybe there is a bug inside the calculate function so let's restart the debugger okay I'm going to close this back in the browser let's refresh this page okay we're back to this line now this time we going to step into this function so look over here this is the icon for stepping into a function and as you can see the shortcut is f11 so if you press f11 we go inside the calculate function now we can execute each line using F10 or step over and see where something has gone wrong now let's imagine this calculate function is a large function with a lot of code at some point we want to step out of it without having to execute every line of code in this function there's a shortcut for this so look over here that is step out the shortcut is shift and f11 so if you press shift and f11 we get back to the previous function so this is how we can debug Jango applications in vs code now once we're done it's always a good practice to remove these break points otherwise they get in the way so as you debug your applications you place various break points in different parts of your code and you will hit them all the time so always remove your breakpoints once you're done with them so we're done with this debugging session now we can disconnect by pressing shift and F5 or clicking on this icon all right now one last step before we finish this lesson on the top Under The Run menu look we have a command called run without debugging the shortcut on Mac is control and F5 so if we use this shortcut we can start our application without having to run python manage.py run server let me show you what I mean so first let's bring up our terminal window here's the second terminal window that we use for debugging I'm going to delete this here's the first terminal window where we started our application by running python manage.py run server so let's press contrl and C to stop the server good I'm also going to delete this terminal window let's imagine we just open this project in vs code day one now to run this application without debugging we can press controll and F5 now our application has started on Port 9000 so we can go to this address and then hit playground /hello so this is how we can run our application without debugging just remember that if you use this command your breakpoints are not going to get hit so if you want to debug your applications you should start it in the debug [Music] mode there is another way to debug Jango applications using a powerful tool called D Jango debug toolbar so if you go to Google and search for Django debug toolbar you're going to find this page over here you're going to find the installation instructions so I highly encourage you to follow along with me and repeat the same steps so we install this toolbar together so first we have to use pip or pipf to install D Jango debug toolbar so back to vs code I'm going to open up a new terminal window and as you can see vs code used the source command to activate our virtual environment so now let's run pipn install django-debug-toolbar good now back to the documentation the next step is to add debug toolbar in the list of installed apps in our settings module so back to vs code we can press command and P on Mac or control andp on Windows to bring up the search box now we search for our settings module good now in the list of install apps at the end we're going to add debug underline toolbar good now the next step the next step is to add a new URL pattern in our main URL conf module so I'm going to copy this line and back to vs code let's bring up the URLs module we're going to pick the one in the storefront folder okay now we add a comma here and paste that line now here we have a compilation error because debug toolbar is a module that we have to import on the top so if you look at the documentation you can see that over here import debug toolbar so copy this and paste it right here good now back to the documentation the next step is to add a middleware we use middleware to hook into D jango's request response processing so in our settings module we have a setting for middleware we're going to add this line in that file so copy this back to the settings module here we have the install apps right after that you can see the middleware setting so we're going to add that on the top now the final step is to add our IP address in the internal IP setting so for local development we should use 1271 so I'm going to copy this entire setting because by default this doesn't exist in a new Jango project so copy this and you're going to paste it anywhere in this settings file it doesn't really matter okay save so we have completed all the steps now back in the browser if you go to this URL playground /hello we don't see the toolbar it should appear here because the toolbar only appears when we return a proper HTML document if you right click here and look at the page Source you can see that we are not returning a proper HTML document so we don't have the HTML head and body elements so let's open up hello.html now on the top we type HTML press tab now in inside these elements we're going to add a body and then inside the body we're going to add the code that we had earlier so let's move that right here good now we have a proper HTML document of course the head element is missing but it doesn't really matter now back to the browser refresh and here's D Jango debug toar here we have different panels like history we're seeing the URLs we have hit so far we have versions to see the version of Django Python and debug to we're running we have processing time we have our settings we have request headers and so on now my personal favorite panel is the SQL or SQL panel here we can see the queries that are sent to the database so later in the course where we talk about quering the database using D jango's object relational mapper we're going to come back to this panel and see what queries Jango will generate and send to the database so that's it for this lesson we're done with this section in the next section we're going to talk about about building a data model so I will see you in the next section welcome back to another section of the ultimate Django course in this section we're going to talk about models which are used to store and retrieve data we'll start off by quick introduction to data modeling to make sure you know the essential Concepts then we're going to design the data model for an e-commerce application next we're going to talk about organizing our models in apps to improve reusability this is one of the areas that is often misunderstood so I'm going to demystify it once for all and then we'll spend the rest of this section in coding model classes we'll use these classes to store and retrieve data throughout the course so let's jump in and get [Music] started the first step in every Jango project is figuring out the pieces of data we want to store so what entities or concepts do we have in an e-commerce application well for starters we need the concept of a product with attributes like title description price and imager now in a real scenario our product entity might have other attributes it really depends on the requirements of our application for now we just want to keep things simple okay now quite often our products are divided in different categories like shoes beauty products fruits and so on so we need another entity called collection or category with an attribute called title now we need to add a relationship or an association between these entities so we can start from one end and navigate to the other end for example we can get a collection and find all the products in that collection okay now let's assume that in our application a product can belong to one and only one collection and a collection can have multiple products so an asterisk represents many we could also use an N here okay now we have a one to many relationship between collection and product so relationships can be one to one one to many and many to many back to our diagram now over here we can add a label called products and that means when we code these entities or these classes in the collection class we're going to have an attribute called products for now I just want to hide this for Simplicity okay now sometimes we can have multiple relationships or multiple associations between two entities so let's imagine that a collection can optionally have a featured product that is the product whose picture we want to show to the user so we can add a second relationship between these entities now look at this number here 0 to one means a collection can have zero to one product and we're going to call that attribute featured product so once again that means in the collection class we're going to have an attribute called featured product okay now you might ask what about the ID attribute shouldn't every entity have an ID attribute yes but jangu is going to automatically create that for us that's why I haven't shown it here now A little exercise for you grab a piece of paper and identify the other essential entities we need in an e-commerce application just the bare minimum don't go ahead and create a complex diagram like this I don't want this there are only five entities that I want you to identify so spend a couple minutes and identify these entities along with their attributes and relationships then come back see my solution [Music] all right so this is what we ended up with in the previous lesson we have a one too many relationship between Collections and products now don't take this as a hard and fast rule maybe in your application a product can belong to many collections then you're going to have a many to many relationship between products and collections okay so back to our model I'm going to remove the collection from here so we have some free space on the screen now what else do we need here well in every e-commerce application we have the concept of a shopping cart right so we're going to have an editing or a model or a class called cart with an attribute called created at let's assume that we need to know when each card is created so every now and then we can do a clean up and remove cards that are 30 days old I just made this up but in a real scenario you should always design your models based on the requirements of your project they make up your own rules okay now we need a relationship or an ass association between products and carts because a cart can have multiple products and a product might be in different carts so here we have a many to many relationship between products and carts now sometimes the relationship between two entities can have attributes for example if a product is in a shopping cart we need to know how many instances of that product we have in the shopping cart so this relationship itself should have an attribute called quantity so we're going to add a new entity here called cart item now look at the notation I've used to represent this concept I've connected cart item to the relationship using a dashed line that means cart item represents the relationship between these two entities product and cart this is what we call an association class so cart item is an association class okay now there's another way to show this instead of using an association class we can add a relationship between cart and cart item because a cart might contain multiple items and an item belongs to one and only one cart and similarly we can add a relationship between product and cart item because each card item represents a single product and a product might be referenced by many card items so here we have two one too many relationships between these entities now compare this with the association class notation so we can either add a many to many relationship with an association class or two one to many relationships it's a matter of personal preference okay so we're done with the shopping cart but you might ask what about the user or the customer that owns this cart where is that in the diagram well I haven't connected cart with an entity like Customer because we don't want to force people to register and log in before they can add products to their shopping cart okay so there's no relationship between carts and customers so carts are essentially Anonymous anyone can have a cart whether they're Anonymous users or registered customers Okay so so we're done with the cart now let's talk about customers so our customer entity can have attributes like name email username password and so on now for Simplicity I'm only showing name and email here now a customer can have many orders and each order belongs to one and only one customer so we need a one to many relationship between customers and orders now once again the order entity might have multiple attributes for now we just want to know when this order was placed okay now an order can contain multiple products and a product can be in multiple orders so we have a many to many relationship between orders and products and similar to the shopping cart example this relationship itself needs attributes so here we need another entity called order item with an attribute called quantity that's our association class alternatively we could add a relationship between order and order item because each order may contain multiple items and each order item belongs to one and only one order similarly an order item references one and only one product while a given product might be referenced by multiple order items so two one to many relationships so these are the entities that I wanted you to identify but to make this project more interesting I decided to throw in one more enti tag here we have a many to many relationship between products and tags because a product can have many tags and a tag might be referenced by different products we'll come back to this anti in the next [Music] lesson so I told you that a Django project contains one or more apps and just like the apps on your phone each app in a Django project provides a specific piece of functionality so that means each app is going to have its own data model so in this lesson we're going to look at a few different ways to organize our entities in different apps one way is to have a single app called the store and drop all of our entities here now we can bundle and distribute this app for a pip and this way anyone can install this app in their project and get all these models and the functionality around them so next time we're working on an e-commerce project we don't have to rewrite the same functionality over and over we simply install this app in our project and write extra code for customization great but there's a problem here as this application grows and gets more complex it gets bloated with too many things like too many models too many views and other stuff this is what we call a monolith like a large heavy piece of stone so at some point our application might become hard to understand hard to maintain and hard to reuse it becomes like one of those remote controls with too many buttons when designing these apps we want to follow the unix's philosophy so each app should do one thing and do it well so here's another solution we can break down this project into four small apps the products app which represents a product catalog so here we're going to have three entities product collection and tag then we're going to have the customers app for managing customers we're going to have the shopping cart app for adding the shopping cart functionality and the orders app for adding the ordering functionality not bad right well this is actually a poor way of breaking down this project for a number of reasons look at the coupling or dependency between these apps the orders app is dependent on the shopping cart app which is dependent on the products app so next time we're working on an e-commerce project we'll have to install all these apps one by one first we have to install the products app followed by the shopping cart app the customers app and the orders app ideally each app should be self-contained so we can easily drop it into a new project the other problem is that if we publish a new version of the products app that might cause a breaking change in the shopping card and subsequently orders apps so anyone using these apps have to upgrade all these apps together together again more and more work also it doesn't really make sense to have the shopping cart functionality without having a product catalog right why would we ever want to add the shopping cart functionality to a project without a product catalog so shopping cart functionality and product catalog always go together by the same token why would we ever want to add the shopping cart functionality to a project without the ability to place an order just to allow people to add something to their shopping cart then what again it doesn't really make sense so these concepts are highly related and should be bundled together if we separate them we increase coupling between apps and we end up with the problems I just talked about so doesn't mean we have to go back to the monolithic design no there is a middle ground here look at the tag entity the ability to tag products is optional we don't necessarily need it in every e-commerce application in fact we might need it in other types of applications like a blog or video platform and so on so so tagging is not specific to products or an e-commerce application it's a separate piece of functionality so I'm going to move the tag entity to a separate app called Tags and here we're going to have another entity called tagged item which represents an item that is tagged it can be a product an article a video and so on it's an abstract concept now with this separation each app is self-contained and provides a specific piece of functionality so we can use either or both of them them in a new project depending on what we're going to build plus we have zero coupling between these apps so we can independently change and deploy them without affecting other apps this is the proper way to break down this project into multiple apps so here's the takeaway if our app boundary is so large we'll end up with a monolith that gets bloated and becomes hard to reuse on the other hand if our app boundaries are so small and fine grained we'll end up with a lot of coupling between them a good design is one with minimal coupling and high cohesion meaning High Focus so each app is focused on a specific piece of functionality and includes everything needed to fulfill that piece of functionality okay so back to vs code we're going to create two new apps so we run python manage.py start app the first app is store and the second one is tags okay now as I told you before every time we create a new app we should add it in the list of installed apps so let's close this window and go to our settings module here's the list of install apps I'm going to add those apps right here so store and tags all right we're done with this step starting from the next lesson we're going to create the model classes for these [Music] apps all right in this lesson we're going to create our first model class so let's go to the store app and open the models module now on the top we have an import statement from D Jango DB which is a package we importing the models module in this module we have a bunch of useful classes that you're going to learn about as we go through this section so over here we're going to create our first model class so we Define a new class called Product and have it inherit the model class in Jango that class is defined in the models module so models. model now here we need to define the fields of this class What fields do we need here well every product needs a title so we set title to then we go to the models module now here we need to choose a fi type so let's take a break here now here on Google let's search for Jango fi types okay here's the model filled reference we're going to get back to this page over and over so on the right side over here you can see all the built-in field types for example we have Boolean field for storing Boolean values we have charfield for storing a sequence of characters or more accurately short or mediumsized strings we have date field datetime field decimal field and so on so as we go through this section you're going to become familiar with this field types so back to our code we want the title to be an instance of the chart field class now all these fi types have a bunch of options so back to our documentation on the top look over here field options these options are common to all field types for example using null we can determine if a field is nullable or not we also have DB index with this we can create a database index on this field we can also set the default value and so on so all these options are available to all fi types now some field types depending on their type have extra options so let's scroll down and find the CH field okay now read over here charfield has two extra arguments we have max length which is required and DB colation which is optional so using max length we can specify the maximum number of characters we can store in this field so here we're going to set max length to let's say 255 characters so this is our first buil now in the next section where we talk about migrations you will see that we can generate our database tables based on the definition of this model so then we're going to have a table called Product and in that table we're going to have a column called title and the type of that column is going to be varar of 255 for now let's not worry about this so that's our first fail what else do we need here we need a description that description can be a long text so instead of a chart field we're going to use a a text field okay the text field doesn't have any required arguments so here we don't have to set the max length Okay what else next we need to add the price field for this I'm going to use decimal field always use decimal field for monetary values we also have float field but floats have rounding issues so for storing monitary values we should always use decimal field now decimal field if you look at the documentation has two required arguments so as an example let's say the maximum price with support in this system is going to be 999999 I'm just making this up so how many digits do we have here six digits how many digits do we have after the decimal point two digits we need to specify these values as arguments here so max digits equals 6 and decimal places equals 2 these two arguments are always required for decimal Fields okay now let's remove the comment another field is inventory we can set this to an integer field we also have positive integer we have small integer big integer and so on and the last field I'm going to Define here is last update let's say every time we update this product you want to store the current daytime here so we're going to set this to models. daytime field and optionally we can set auto underline now to true that means every time we update a product object Jango automatically stores the current datetime in this field we also have Auto Now underline ad with this only the first time we create a product object D Jango stores the current daytime here okay so we don't want this we're done with the definition of the product class now A little exercise for you I want you to create the customer class with this bus first name last name email which should be unique phone and birth date which should be nullable so spend a couple minutes on this and then come back to my solution all right here's my implementation of the customer class so first and last name fields these are both CH Fields with a maximum length of 255 characters next we have email which is an instance of the email field and here I've said unique to true so we don't end up with duplicate emails next we have phone which is also a CH field with a max length of 255 characters and finally we have birth date which is an instance of date field and here I've said null to true so this field is nullable now for birth date I've used a date field not a daytime field because we don't care about the time someone was born okay now you might be curious why we don't have an ID field in any of these classes because as I said earlier Jango creates it for us automatically so every an or every model class is going to have an ID field that is going to be a primary key but what if we don't want to have an ID field what if in this product class we need a field called SKU and this is going to be our primary key so we can set this to let's say a CH field with a max length of let's say 10 characters now here we can set primary key to True with this D Jango is not going to create an ID field and make it the primary key so SKU is going to be primary key okay so since we don't need this field for now I'm going to remove it good so this is how we create model classes next we're going to talk about Choice [Music] Fields sometimes we need to limit the list of values that can be stored in a field for example here in our customer class let's define a new field called membership and set it to models the chartfield with a max length of one now let's imagine in this field we can have one of these three values we can have B that is short for bronze or s for silver or G for gold how can we implement this well let's go back to our documentation earlier I told you that all fi types share these options one of these options is choices and we use this to specify the possible values for a field so what we need to pass here is a sequence consisting of a durables of exactly two items now I know this is a mouthful let's look at a real example so over here we have an array of top holes where each top hole includes two values the first value is the actual value we're storing in the database and the second value is a human readable name so back to our customer class here I'm going to define a new attribute called membership underline choices I'm using uppercase letters here to indicate that this is a fixed list of values we shouldn't mess with it okay so we're going to set this to an array in this array we're going to add three topples here's the first topple for the value I'm going to use B that is for bronze and for human readable name I'm going to use bronze now let's duplicate this a couple times and change this to S and silver and finally G and gold now that we have this array we can go to our membership field and set choices to membership choices okay like this now we can also set the default value so we can set default to let's say B that is for bronze now this works but there is a tiny problem in our implementation if tomorrow we decide to change B to something else then there are two places we have to modify here's one place and here's the other place so the best practice is to Define these values separately so here we can Define another attribute called membership underline bronze we set it to B so this is where we store the actual value and now we reference that in multiple places so here we use membership underl bronze and also we're sending the default value we use membership underline bronze okay now for consistency we should also Define separate attributes for S and G I'm going to pause the video and do this on my own all right here's the end result we have three attributes membership bronze silver and gold and we have used them here now you might be wondering why we need the human readable name well later when we talk about the admin interface you will see that this human readable name will be used in a drop- down list to populate this field we'll talk about that later in the course now A little exercise for you I want you to create the order class with two Fields placed at and payment status place at should be a daytime field and it should be autop populated at the time we create an order object payment status should be a chart fi with these values so P for pending C for complete and F for fail spell a couple minutes on this then come back see my solution all right here's my implementation of the order class so first we have our constants which are payment status pending complete failed and choices and then we have our fields which are place at which is a daytime field and here I've said Auto now add to true so the first time we create an order D Jango automatically populates this field next we have payment status which is a CH field with a max length of one I've set choices to our area of choices and the default value to payment status [Music] pending so you have learned how to create model classes now let's see how we can Implement a onetoone relationship between two models so here in the models module let's define a new class called address and assume that every customer should have one and only one address and each address should belong to one and only one customer so here we have a onetoone relationship between customers and addresses right now let's add a couple of fields here like Street which is going to a CH field with a max length of 255 characters and city with the same definition now as you probably know a database relationship has two ends a parent and a child the parent should exist before we can store the child right I've got a question for you in this relationship which class or which entity is the parent it's the customer because we say the customer has an address so the customer should exist before we can can create an address so here in the child class or the child entity we need to specify the parent so we add a new field called customer and set it to models. one:1 field now this field has a couple of required arguments the first one is the type of the parent model so here we type customer now the second argument is undelete and with this we specify the delete Behavior what should happen when we delete a customer so if we said undelete to models. Cascade when we delete a customer the associated address will also be deleted this is the Cascade Behavior alternatively if this field accepts null values we can use set null so when we delete the customer or the parent record the child record in this case the address is not going to get deleted it's going to stay in the database and the customer field or the customer column is going to get set to null in this case this field doesn't accept null value so it doesn't make sense to use set null alternatively we can use set default so this field will be set to its default value and one other option we have is protect and with this we can prevent the deletion so if there is a child associated with this parent we cannot delete that parent first we have to delete the child now which value we use really depends on the requirements there is no one siiz fits all in this case I believe we should use Cascade because if we delete a customer the associated address should also be deleted now there is one more argument we need to set here and that is primary key equals true if we don't set this Jango will create another field here called ID so every address is going to have an ID and that means we're going to end up with a one to many relationship between customers and addresses because we can have many addresses with the same customer but if we make this field the primary key we can only have one address for each customer because primary keys don't allow duplicate values right so this is how we can Implement a onetoone relationship between two models now you might be wondering if we should Define the reverse relationship in the customer class in other words do we have to go to the customer class and add a new field called address for the reverse relationship no we don't have to do that because Jango automatically creates this for us so we're done with this lesson next I'm going to show you how to implement a onet to many [Music] relationship now let's assume that a customer can have multiple addresses so we want to change this one toone relationship to one to many relationship how can we do this really easy first we need to change the type of the field to foreign key so we're telling D Jango that customer is a foreign key in this table okay next we need to remove primary key equals true because we want to have multiple addresses for the same customer so we want to allow duplicate values in this column right so remove this option this is how we can define a one to many relationship between two models really easy now it's your turn I want you to create a onet to many relationship between these entities so a collection can have multiple products a customer can have multiple orders an order can have multiple items and a card can have multiple items as well so spend a few minutes on this then come back see my solution all right let's look at my solution so I've defined a new class called collection with a single field called title pretty basic but note that I have defined this class before the product class so we can reference it over here so in the product class we have a new field called collection which is a foreign key and this is where we referencing The Collection class defined earlier now sometimes we cannot arrange our code in such a way that the parent class is further up in those cases we can pass their string just a little tip for you now for the delete Behavior I've used protect so if we accidentally delete a collection we don't end up deleting all the products in that collection okay what else do we have here here in the order class we have a new field called customer which is also a foreign key and for the delete behavior I'm using protect so if we accidentally delete a customer we don't end up deleting orders in fact we should never delete orders from our database because all these orders represent our sales so they should never be deleted okay now once again in this case I had to rearrange my code so the customer class is defined before the order class so we can reference it here now we have a new class called order item with four fields we have order which is a foreign key to order and once again we are using protect here so if you accidentally delete an order we don't end up deleting the order items so if an order has at least one item we will not be able to delete it okay then we have product which is also a foreign key and here we're using protect so if you accidentally delete a product we don't end up deleting the associated order items next we have quantity which I have said to positive small integer field this way we can prevent negative values from getting stored in this field and we also have unit price which is a decimal field now you might be wondering why have defined unit price here don't we have it in the product class yes we do but the price of products can change over time so we should always store the price of a product at the time it was ordered okay what else do we have here we have a new class called cart we could also call it shopping card here we have a single field create an ad which is a daytime field and I've said Auto now add to true so this field gets autop populated when we create a new cart and finally we have a new class called cart item with three Fields cart which is a foreign key to cart and here I've used Cascade so if we delete a cart we don't need it anymore we should delete all the items automatically then we have product which is a foreign key to product and here I've also used Cascade so if you can delete a product meaning if that product has never been ordered before then that product should be removed from all the existing shopping carts as well that's why I've used Cascade here and finally we have quantity which is again a positive small iner [Music] field all right let's talk about many to many relationships so I'm going to introduce a new class called promotion and Define a many to many relationship between promotions and products so a product can have different promotions and a promotion can apply to different products so let's define a new class called promotion which is a new model now here we're going to have Fields like description which is going to be a CH field with a max length of 255 characters we're also going to have discount which is going to be a float field we can also have start date end date and so on now we can Define the relationship in either of these classes and as I said earlier D Jango will automatically create the reverse relationship now in this particular case it makes more sense to define the relationship in the product class because we might have a product that we're showing to the user and at the same time we want to show all the promotions that apply to that product so I'm going to go to the product class and over here I'm going to define a new field called promotions so we use a plural name here because we might have multiple promotions now we're going to set this to models do many to many field and just like before we need to specify the name of the target model which is promotion now with this implementation Jango is going to create the reverse relationship in the promotion class so in this class we're going to have a field called Product underline set that returns all the products that a part particular promotion is applied to if you don't like this name you can always change it so in our product class where we Define our many to many field over here we can supply a keyword argument related name if we set this to products D Jango will use this name as the name of the field in the promotion class so instead of product set we're going to have product just remember if you change the default convention in Django it's best to change it consistently everywhere otherwise in some classes you're going to have a field like products and in some other classes you're going to have a field like product online set and this makes your code really ugly so in this implementation I'm not going to use related name I'm going to stick to the default convention okay so this is how we Define a manyo man relationship between two models [Music] earlier I told you that sometimes we can have multiple relationships between two models so here we have two relationships between collection and product now out of the two you have only implemented the one to many relationship now as part of implementing the other relationship we're going to face a situation called a circular dependency which is something we should avoid a circular dependency happens when two classes depend on each other at the same time so the product class is going to be dependent on the collection class and at the same time the collection class is going to be dependent on the product class so let me show you how to handle this situation so back in the code here in the product class we have this field called collection which is a foreign key to the collection class so here we have a dependency from the product class towards the collection class now to implement the other relationship we have to go to the collection class and add a new field here called featured underlined prod product which is going to be foreign key to the product class now here we're going to set UND delete to well if you delete a product and that product happens to be the featured product for a collection here we want to set this field to null so I'm going to set this to models. set null and that means we should make this field nullable so here we pass another keyword argument null equals true now look over here we have an error saying product is not defined we are seeing this error because the product class is defined after the collection class now this is where we have a circular dependency so in the product class we have a dependency to the collection class and that's why we Define The Collection class before the product class however because of the circular dependency now the collection class also needs to be dependent on the product class which is not possible to solve this problem we need to wrap this in quotes and pass a string here so this solves our problem however this introduces a new kind of problem if tomorrow we decide to rename this product class to something else this string is not going to get updated let me show you so we put the cursor here press F to to rename product to something else let's say product one now look this string is not updated so use this technique only if you have to okay now let's rename this back to product good save the changes now let's open up the terminal window we have an error saying reverse query name for Featured product clashes with field name collection what is going on here let me explain so in the collection class we have a field called featured product right now as you know jangle is going to automatically create the reverse relationship for us so that means in the product class we're going to have a field called collection which represents the other end of the relationship and this is exactly where the problem happens because in the product class we already have a field called collection so Jango cannot create the reverse relationship because of the name Clash so here we have two choices one solution is to set related name to something other than collection or if we don't care about the reverse relationship we can simply Type A plus sign here this tells D Jango not to create that reverse relationship now I save the changes look at the terminal the error is gone and our server has started at this address [Music] Perfect all right let's talk about generic relationships so I told you that we want to design the tags app such that we can reuse it in any projects anywhere we want to have the ability to tag items that's why we have two two models in this app tag which represents an actual tag and tagged item which represents a tag applied to a particular item which can be a product a video an article literally anything so let's see how we can Implement these models so back to vs code let's go to the tags app and open the models module here we're going to Define two classes the first one is tag and we're going to give it a field called label which is going to be a Char field with a max length of 255 nothing new so far now the second class is the one that is interesting tagged item Now using this class we can find out what tag is applied to what object now to determine the tag we simply add a fi here tag which is going to be a foreign key to the tag class now here we need to set UND delete to what well if we delete a tag we want to remove it from all the associated objects right so here we're going to Cascade again nothing new so far now the interesting part is identifying the object that this tag is applied to here's the poor way of implementing this if we add a field called Product then we need to set this to a foreign key to product now with this implementation we have to import the product class on the the top and that means the tags app is going to be dependent on the store app so look if we say from store. Models import product now the tags app is dependent on the store app we don't want to do this what if tomorrow we want to tag articles or videos these are completely different apps so the tags app should know nothing about these models so delete this line what we need here is a generic way to identify an object to do that we need two pieces of information the first one is the type of an object which can be let's say product video article whatever the second attribute we need is the idea of that object using these two pieces of information we can identify any objects in our application or in database terms we can identify any record in any tables because using the type we can find the table and using the ID we can find the record right so instead of using a concrete model like product we should use an abstract model called content type which comes with Jango so earlier we talked about the list of installed apps in the settings module let's go there real quick so over here we have an app called content types using content types we can create generic relationships between our models so content type is a model that represents the type of an object in our application now we need to import this on the top so from Django the contri which is short for contribution then we're going to go to content types app then we're going to go to the models module and import the content type class so this is a model just like any model that we have in our application but this model is specifically made for allowing generic relationships now back to the business so we're going to have a foreign key to content type and that means instead of product we should call this field content type now for undelete once again we're going to use Cascade because if that object type is removed we want to remove all the associated tags so models. Cascade now the second attribute we need here is the idea of the target object so we can call this field object underline ID and this has to be a positive fi because we're assuming that every table is going to have a primary key and all primary keys are positive integers now what if in a particular table our primary key is not an integer let's say it's a GID well this solution is not going to work so this is the limitation of the solution so now with these two pieces of information we can identify any object in our application now one last thing when quering data we might want to get the actual object that this tag is applied to like like the actual product to do that we're going to add another field here called content underline object and of course we could call it anything that we should set this to a particular type of field called generic foreign key now we need to import this on the top so I'm going to duplicate this line and change models to fields and content type to generic foreign key Now using this field content object we can read the actual object that a particular tag is applied to so let's quickly recap to define a generic relationship there are three fields we need to Define content type object ID and content object now A little exercise for you I want you to create an app called likes for tracking the objects that a user likes so in this app we're going to have a model called liked item and using an instance of this model we can tell what user likes what object so here we need a field called user which is going to be a foreign key to the user class defined in this module Jango cont trip. o. models so o is another app that is automatically installed in every Jango project and using this app we can authenticate and authorize users so go ahead and spend a couple minutes on this then come back see my solution all right here's my solution we have a new app called likes and in this app we have a new model called liked item now here we have four fields we have user which is a foreign key to the user class defined in Django cont trip. o. models now here for UND delete I've used Cascade so if a user is deleted you want all the objects that the user has liked to be deleted as well okay then we have three Fields exactly like before no changes so we have content type for identifying the type of an object that the user likes we have object ID for refereshing that particular object and content object for reading an actual object so that was pretty simple let's move on to the next lesson welcome back to another section of the ultimate Django course in this section we'll use Jango migrations to generate our database schema based off of the models we built in the previous section so we'll talk about making migrations running them reversing them in case make mistakes we'll also talk about populating our database so by the end of the section we'll have a production grade database that we can query in the next section so let's jump in and get [Music] started Jango supports many database Management Systems the most basic one that is set up by default is sqlite which is a very basic lightweight database engine you should use it only for development or for low traffic websites nothing serious for any serious projects you should use postgress MySQL Mario DB or Oracle these database engines are officially supported by Jango but there are also thirdparty libraries for other database engines like Microsoft SQL Server now out of all these options postgress and MySQL are the two most common database backends used in the Jango community in this section we'll start off by having a quick look at SQL light and then shortly after we'll switch to mySQL for the rest of the course now don't worry if you have never worked with mySQL we're not going to use any fancy MySQL features all you have to do is install MySQL now if you don't want to use MySQL and prefer a different database engine like postgress that's totally fine with me but I'm not going to cover connecting the project to postgress you need to research it on your own so next we're going to talk about creating migrations [Music] all right let's talk about migrations in D Jango we use migrations to create or update our database tables based off of the models we have in our project so in Jango projects we're not going to manually create or modify our database tables we're going to let Jango take care of that let me show you how this works so open up a new terminal window and run python manage.py make migrations make sure to spell it properly all right let's see what's going on here D Jango looked at all the installed apps in our project and for each app it created a new migration file so here we have the migrations for the store app we have a new file at this location store SL migration SL here's the name of the file so every migration file has a sequence number like 1 2 3 4 and a descriptive name if you're on a Mac you can hold down the command or if you're on Windows you can hold down the control key and then click to open this file so let's have a quick look here as you can see this migration file is just a python module so here we have a class called migration with a bunch of operations so here's the first operation for creating a model called cart with two Fields ID which is a big auto field which translates to a big Auto incremented column in a database and as you can see this field is used as a primary key so earlier I told you that we don't have to explicitly Define a primary key for each model because jangu is going to do that for us okay now in the same model we have another field called created at which is a daytime field now similarly we have other operations for creating other models like collection customer and so on now at some point we're going to run these migrations against a database at that point Jango is going to translate this python code into SQL code and run it on top of our database we'll see that soon so here's what I want you to take away as you build new models or modify existing ones you run the make migrations command to generate a new migration let's go through this exercise a couple more times so let me show you a cool trick let's say we want to quickly jump to the product class we can hold down the command key on Mac or control key on Windows and press T this is the go to symbol command you can find it on the top Under The Go menu so here we have go to symbol in workspace and the shortcut is command and T on Mac so if you search for product we can find all symbols that contain the word product a symbol can be a class a function a variable and so on so let's jump to the product class and rename the price field to unit price so here we press f2 to rename this to unit underline price now save the changes back in the terminal window we run make migrations one more time that Jango is asking did you rename product. price to product. unit price yes with did so we type y good now we have a new migration in the store app with this sequence number and this description rename price product unit price if you don't like the description you can always change it so let's go to the Explorer panel here's the store app the mation spoiler now we can simply rename this to rename price to unit price just remember if you rename a file here make sure to update all references to that file in other migration files let me show you what I mean so if you open this migration file over here you can see this migration is dependent on this other migration in the store app so if tomorrow we decide to rename this file from initial to let's say first migration then we'll have to find all references to this file and update them as well okay so now we have any new migration and in this migration we have a different kind of operation instead of a create model operation we have a rename field operation so when we run this migration Jango will go to the product table and rename the price column to unit price okay now back to the terminal window we haven't made any more changes so if you run make migrations one more time D Jango says no changes detected now sometimes you see this message even though you have changed your models why does this happen this happens if you forget to add the app in the list of installed apps so one more time we're going to use our shortcut which is command and team to jump to the installed apps variable okay so over here we have all the apps we have created so far store Tags and likes if likes was missing here Jango wouldn't detect any changes in this app okay now let's go back to the product class and make a different kind of change you want to introduce a new field called slug now a lot of people don't know what a slug is let me show you so here on stack Overflow if you search for question in the address bar you can see the idea of the question and the actual question itself what you see here is called a slug but this slug can only contain letters numbers underscores and hyphens so any other character is going to be replaced or removed for example here we have a space between each word but in the UR L the spaces are replaced by hyphens now the whole point of adding a slug here is to make it easier for search engines to find our Conta so this is a search engine optimization technique now similarly we want to give each product a slug so search engines can easily find our product so we're going to set this to models. slug field save the changes back to the terminal let's run make migrations one more time now this time we see a different kind of message saying you're trying to add a non-nullable field slug to product without a default now here we have two options one option is to provide a oneof default value right now the other option is to quate and add a default in our model file let me show you both options so if we type two we can quit now back to our model we can set a default value let's say hyphen the other option is to make this nullable if you make this nullable Jango is not going to complain that this field needs a default value now let's remove this and create the migration one more time so back to the terminal make migrations all right this time I'm going to select the first option so we want to provide a one of default value now Jango is asking what is that default value so we're going to supply a string that contains a hyphen exactly like before all right so Jango created a new migration file with this sequence number let's open this file real quick now in this file we have a new operation for adding a field to an existing model or table so when we run this migration jangu is going to go to the product table and it's going to add a new field called Slug and it's going to populate it with a hyphen so the difference between this option and the previous option is that this default value is not in our model it's only in the migration file it will be used only once okay so this is about migrations now before we finish this lesson let's give this migration file a more descriptive name so because this is our last migration file we don't have any other migrations that are dependent on this file so we can safely rename this file to let's say add slug to product okay so now we have a bunch of migrations in our project next I'm going to show you how to run these migrations [Music] so now we have a bunch of migrations where each migration describes a set of changes so each migration is like a commit in a version control system like git right now we're going to run these migrations to generate our database schema so here in the terminal we run python manage.py migrate all right so Jango went through all the installed apps and executed all the pending migrations so as you can see we have a migration that comes from the content types app we have another migration that comes from the off app we have a bunch of migrations from the admin app and so on now where is our database well if you look at the Explorer panel over here you can see a file called db. sqlite 3 so this is our SQL light database which is a very lightweight database you should only use for development or very small websites now here in vs code I have an extension called sqlite which we can use for opening a sqlite database so if you don't have this extension go ahead and install it there are also other tools like there is a tool called DB browser for sqlite which you can get from SQ light browser. org it's a free but crappy application but it gets the job done we're going to use it only in this lesson because from the next lesson we're going to switch to mySQL okay so install this extension and then bring up the command pallet so on the top you can go to view menu and open the command pallet the shortcut is shift command and P on Mac or shift control p on windows so we open this up search for sqlite open database you can see our database in the list so let's select it good now let's open the Explorer panel and collapse our project we have a new note here called SQL light EXP Explorer now here you can see our database as well as all the tables we have in this database so we have a bunch of tables that belong to the O app these tables are used for authenticating and authorizing users we'll talk about them later in the course then we have three tables that are used by D Jango to do his job again we'll look at this soon we have one table that belongs to our likes app we have a bunch of tables that belong to the store app and as you can see all these tables are named using singular names so we have address cart cart item collection and so on if you don't like singular names you can always change them I'll show you how to do that later in this section we also have a couple of tables that belong to the tags app okay now let's open the migrations table so we right click on it and select show table this table keeps track of the migrations that have been applied to this database so the first migration comes from the content types app here's the name of the migration and here you can see the date and time this migration was applied So currently we have 22 migrations applied to this database and that means if we go back to the terminal and run the migrate command one more time nothing is going to happen because all the migrations we have in this project have been executed so using this table Jango can tell which migrations have been applied and which migrations haven't so this is how we can run our migrations now we have another command called SQL migrate and using this command we can see the actual SQL code that is sent to our database at runtime for example if you want to see the SQL code for the third migration in the store app here we type the name of our app and the sequence number of our migration file so this is the actual SQL statement that D Jango will send to our database and this will be dependent on the database backend we use So currently we're using sqlite later when we switch to mySQL or a different back end the SQL code that will be generated will be different okay now one last thing before I finish this lesson is it SQL or SQL well this language was originally called SQL which is short for Structured English query language but SQL was a trademark of an aircraft company so IBM didn't want to get into legal issues that's why it changed the language to SQL now some people prefer to call it SQL other people call itq SQL so don't hate me for calling it SQL that's just my paraphrase now what about MySQL isn't that my SQL well according to mySQL team they prefer their tool to be called MySQL but they don't mind it if you call it my SQL so I personally call this tool MySQL but I prefer to refer to the language as SQL and now a little exercise for you add the zip fi to the address class create a migration run it and then inspect the migrations table so you see the whole work flow in [Music] action sometimes you need more control over the database schema for example you may want to overwrite the name of a table or you may want to add an index to a couple of columns and so on let me show you how to do this so let's press command and T on Mac or control and T on Windows and jump to our customer class okay now in this class we're going to Define metadata so inside this class class after our Fields we're going to add an inner class called meta the name of this class is important so this is where we Define metadata about this model now here we have a bunch of options if you simply search for Jango model metadata on this page you can find all the available options here so we have DB underline table for specifying the table name we can also set the ordering that will be used by by default when cing objects we can also create indexes and so on so let's look at a couple of examples so back to our code here I'm going to set DB underline table to store underline customers so here I'm using a plural name now even though this is possible it's not something that I personally recommend because if you want to use plural names then you would have to set the table name for every model in your project I find it unnecessary the whole reason we use Jango is because it comes with a lot of conventions that we can follow to quickly build applications if you want to constantly override these conventions and customize things maybe Jango is not the right tool for you that's just my personal opinion so here we can set the table name we can also create indexes so we set indexes to an array of index objects to create an index object we can use models. index like here we set a keyword argument called fields we set it to an array of strings so we can add an index on last name and first name columns now if you're not familiar with indexes basically we use them to speed up our queries I cover them in detail in my SQL course in case you want to learn more so we have made a couple changes now it's time for what it's time for creating a migration so save the changes back to the terminal we run python manage.py make migrations great so Jango created a new migration file but it couldn't come up with a good name for this file because we have mixed two different types of operations here on the one hand we're creating an index on the other hand we renaming a table so it's best if you don't mix up different types of operations write a bit of code to solve a specific problem create a migration and then move on to the next problem okay so I'm going to leave this file as is now let's run this migration so python manage.py migrate good now let's open up our database one more time so here in the Explorer panel here's our database I'm going to refresh good now look at the name of our table now we have a plural name here but look this is not consistent with other tables that's why I personally think we should stick to the default convention injo so in the next lesson I'm going to show you how to undo the last migration [Music] let's imagine that the migration that we applied in the previous lesson was a mistake so how can we undo it well there are a couple of different ways to do this if you want to selectively undo what we did in the previous lesson we have to create a new migration for example if you want to keep the index but remove the new table name then we have to remove this line save the changes create a new migration and apply it that's the only way however if you want to undo every everything that we did in the previous lesson we can completely revert the last migration let me show you how to do this so let's look at the Explorer panel here in the store app look at the migrations folder this is the last migration that we want to undo migration number four so we want to downgrade the database to the previous migration which is migration number three so we open up a terminal window and type python manage.py migrate we want to migrate the store app to migration number three okay beautiful the last migration is unapplied perfect so now our database is back to the previous date let's verify it so here in SQL light Explorer let's refresh look the customers table is gone and now we have the customer table and also if you look at the migrations table look the last migration which was migration number four in the store app is gone so we properly downgraded our database but the changes are still in the code so if we go to the Explorer panel and look at the migrations folder in the store app look the new migration is still there so if you open up a terminal window and run python manage.py migrate then the last migration which is currently on applied will be applied so to properly revert the last migration we should delete this migration file as well as all the changes we made in our code so let's go to the customer class earlier we added this meta class over here if we keep this code but remove the migration file the next time we create migrations D Jango is going to create a new migration for applying this change to our database we don't want this to happen so the proper way to undo the last migration is delete this code as well as the associated migration file now this is where we use Version Control Systems like git undoing code using a version control system like git is a lot easier than manually removing code from different places so in this project I've been using git and after each lesson I made a commit so let's open up the terminal window and run get log d-1 line this shows the list of commits I've have made so far so here's my last commit customizing database schema and this is where I created method data for the customer model now here we have this head pointer pointing to this commit so to undo this commit we have to make the head point to the previous commit now if this is all new to you don't worry just follow along with me and if you're interested I have a comprehensive course about git on my website so let's press Q here now to reset the head we type G reset D- hard head till the one so we want to move the head pointer one step back so it points to the previous commit okay let's go with that great now all the changes we made in the previous lesson are gone let's verify it so here in the migrations folder we no longer have the force migration and also if we go to the customer class the metadata is gone great now here's a little exercise for you in the customer model rename the first name field to give a name create a migration played and then reverted all right from this lesson we're going to switch to mySQL if you don't like MySQL you can use someone else's SQL that's totally fine with me but let's see how we can install MySQL on your machine if you already have MySQL feel free to move on to the next lesson so open up your browser and head over to myql.com then go to downloads on this page down the bottom you see a link called MySQL Community download now over here we're going to download MySQL Community server now on this page you can select your operating system so I'm on a Mac and then we're going to download the latest version now on this page you don't have to sign up or login there is a link down the bottom so let's just start the download great so open this DMG file or setup wizard on windows so here we have a set set of wizard pretty simple but there is one thing that I want to highlight here let's click on continue and again agree and install now here it's asking for your computer's password this is the password that you use to login so let's type that in now on this page we can select a password for login into MySQL this is different from the password you use to log into your computer so we're going to select use strong password encryption click on next and then here we type the password for the root user of MySQL so I'm going to type a complex password here and then finish now once again it's asking for my computer's password so let's type that in all right the installation was completed successfully great if you have any problems if you get any errors the best way is just to Google bu the error because every computer is different unfortunately I cannot help you resolve the errors on your machine so now that we have MySQL next we're going to talk about GUI tools for connecting to [Music] mySQL all right now we need a tool to connect to mySQL and manage our database there are many different tools out there you can use MySQL workbench which is absolutely free and you can get it from myql.com personally I've used it a lot in the past it gets the job done but quite frankly it's not the best tool out there we also have table plus which is a great tool it's very lightweight and it supports many different database engines so it's not limited to mySQL and of course that comes with a price at the time of recording this video the license for table plus is $59 and by the way I'm not an affiliate for table Plus or any other products these are the tools that I've personally used and introduced in my courses and of course there are many other tools out there you can research and find your favorite tool we also have data grip which is my favorite tool I believe this is the best database tool in the market because it's built by jet Brands which is the same company that has built intell webstorm resharper and many other amazing tools and of course this is the most expensive product you can get a license for $89 for the first year but for the second and third years the price will reduce to $70 and $50 so every year you have to pay to use data grip having said that you can download a trial version and use it for free so if you want to follow along with me you can just download it you don't need to provide a credit card just download it and use it for 30 days so the first time you open it you're going to see this window you're going to evaluate it for free now you can optionally supply your email address and evaluate great so this is our tool we're going to create a new project we can call that stor front now over here you're going to click on the plus ass sign to create a new data source which is going to be MySQL so look there's so many data sources available here you can use Amazon red shift Apache Cassandra and so many other data sources so let's go with mySQL now on this dialog box you can give your connection a name I'm going to accept the default next we're going to specify the host which is Local Host the port by default is 3306 the user should be root and the password should be the password that you set when installing MySQL server so I'm going to type my password here now pay attention to this Arrow we have missing driver files so let's download them good now let's test the connection we get this error saying server returns invalid time zone so let's set the time zone over here let's set the time zone to UTC press Tab and test the connection one more time okay we successfully connected to mySQL server perfect let's click on okay now let's right click on Local Host and go to new query console now in this console window we can type SQL commands so for this course we're going to create a database called storefront we have to create the database first before we can connect with it using Django so even if you're not using data grip let's say if you're using MySQL workbench you need to create create a database called storefront or whatever you want to call it now to execute this we click on this icon good so we have a new database called storefront and we're going to use this in the next [Music] lesson all right the next step is to connect our D Jango project to mySQL and to do that we have to install a package called MySQL client so here in the ter let's run pip and install MySQL client make sure to spell it properly all right the installation was done now before recording this video I was practicing these steps and there I got a weird error when installing my SQL client and quite honestly it took me over an hour to troubleshoot the issue so if you encounter any errors don't give up keep going this is a natural part of software development you have to be patient and determined just Google the ex ER message and I promise you you're going to find something on stackoverflow.com you can also post your questions on our Forum at forum. cwi.cc was corrupt so before going further let's make sure you have installed MySQL properly open a new terminal window and run MySQL so we're going to connect to mySQL using the root user and a password that we're going to supply now so let's type our password all right if you see this that means you have installed MySQL properly if you get an error saying MySQL command not found that means either you didn't install MySQL properly or MySQL is not in your path so then depending on the operating system you're running you need to research how to add MySQL to your path all right so let's stop this by pressing contrl and D good now we installed MySQL client package which great the next step is to change our database settings so we're going to go to our settings module now let me show you a new shortcut under the Go menu look at this command go to symbol in editor the shortcut is shift command and o on Mac so if you press this we can see all the symbols in this file these symbols can be variables classes functions and so on so all these symbols you see here these are various settings in this module so if you type databases we can jump to the database settings straight away so look at our default database engine that is sqlite and here's the name of our sqlite file so the project directory followed by db. sqlite 3 now we're going to change this to mySQL and this is the reason why we installed MySQL client package if you don't install this you cannot change the engine to mySQL okay now we're going to change the name to the name name of our database this is the database that we created in the previous lesson next we're going to set the host to Local Host next we set the user to root and password to the password we used when setting up MySQL now this is purely for development so we're not going to use this in production in production we're not going to include our password as PL text in this file so later in the course where we talk about deployment I'll talk about a different strategy for our database settings for now don't worry about it so let's save the changes now let's go back to our terminal window where we're running our server you should not get any errors at this point so your server should be still up and running if you get any errors then you have to stop here and troubleshoot otherwise you should run the migrations so all the tables are created in our myql database so let's open a new terminal window and run python manage. I migrate okay all the migrations are applied to our database so if you go back to data grip and do a refresh look our storefront database has these tables perfect so hopefully you didn't encounter any issues if you did just be patient and determined don't give up I deal with these issues all the time even with more than 20 years of software development so our database is ready let's move on to the next lesson [Music] sometimes we need full control over generating or updating our database schema this is really easy with Jango all we have to do is create an empty migration and there we can write any arbitrary SQL code let me show you so here in the terminal we type python manage.py make migrations we're going to go in the store app and create an empty migration okay so now we have a new migration migration number four with this name of course we can change the name to something more meaningful now let's open this file in this file we have an empty migration so the operations array is empty now here we can use migrations do run SQL so this is a class that is defined in the migrations module that is imported on the top we can create an instance of this class and here in the Constructor we Supply two two SQL statements the first one is for upgrading our database the second one is for downgrading it so here we can use triple codes in Python to break down our SQL statements into multiple lines so for this demo I'm going to insert a new record into the collection table so store underline collection we want to set the title column and for the value I'm going to use collection one okay now us the using the same Technique we could also create a stor procedure a function a view and so on now as I said this first argument is for upgrading our database so as a best practice we should Supply a second argument even though it's optional because if you fail to do this then you won't be able to revert this migration okay so in the second statement we want to undo what we did earlier so we want to delete the collection with this name so we say delete from store underl collection where title equals collection one now let's save the changes back in the terminal we run python manage.py migrate okay the last migration is applied so let's go to data grip and look at our collection table so double click on this and here's our new collection beautiful now let's unapply the last migration to make sure sure our implementation is right so we want to downgrade the store app to migration number three so here in the terminal we say python manage.py migrate store to migration number three perfect now back to our database let's refresh the collection table our new collection is gone great [Music] all right the last thing we're going to do in this section is populating our database with some dummy data and for that we're going to use a great website called mau.com it's one of my favorite tools so let's say we want to populate our customers table over here we can specify our columns and their type so we have ID which is a number we have first name which is a first name column so this tool will generate a bunch of random first names for us okay similarly we have last name email now instead of gender we're going to use phone so I'm going to change the type of this column to phone now we can optionally specify the format for the phone I'm going to leave it as is next we need to add the birth date column and for that we're going to use a date column and I'm going to change the format to this format four digits for the year followed by two digits for the month and the day now we should also add another field for the membership so if you recall in this column we can have B for bronze s for silver or G for gold so I'm going to change the type of this to regular expression and over here you can type any valid regular Expressions if you're not familiar with regular Expressions you can click on this and see some examples so what I'm going to type here is a pair of parentheses and inside the parenthesis I'm going to type B or and s or G so one of these characters will be used to generate the values for this column okay now over here we can specify the number of rows to generate I think a th000 is good for customers next we can specify the format which can be CSV Json tap delimited SQL and so on I'm going to select CSP for now and preview our data so this is what we're going to get we're going to get a thousand customers with these values now we can download the CSV right away or we can change the format to SQL and over here we specify the name of our table which is going to be store underline customer and then we can download our data so now we have a SQL file we can open this with data GP or MySQL workbench to populate our table so now I'm going to drag and drop this file onto data grab so we have a bunch of insert into statements now on the top make sure the current schema is storefront if it's not just select it over here then select all these rows and execute them all right so now we're done let's open a new query console for the storefront database and find the number of records at the customer table so we type select count of everything from store underline customer so as you can see over here we have a th records in this table beautiful so we have reached the end of this section now I'm going to stop recording and generate data for a bunch of tables we're going to work with in the next section so at the beginning of the next section I will give you a sequel file to populate your database with dummy data okay so that's it for now I hope you learned a lot and I will see you in the next section welcome back to another section of the ultimate Django course in this section you will learn how to query and manipulate data using Jango RM or object relational mapper we'll start off this section by quick overview of Jango RM and the problem it solves then we'll spend the rest of the section on various ways to query and manipulate data we'll cover filtering sorting grouping data and much much more so by the end of this section you'll be able to confidently pull out data or store it in a relational database so let's jump in and get [Music] started let's start off this section by a quick overview of object relational mappers and the problem they try to solve so you know that in relational databases data is stored as rows in tables so when pulling up data from a relational database we need to map these rows into objects in the past we used to do this by hand and this was pretty repetitive and time consuming so we would have to write a SQL query send it to the database read the result and map it to a bunch of objects so for each record you'll have to create a new object and set its attributes this is where an object relational mapper comes into the picture an object relational mapper as the name implies Maps objects to relational records and that frees us from writing a lot of repetitive code so using an object relational mapper we don't have to write SQL code to query or manipulate data we can code in an objectoriented programming language like python the URL will then translate our python code into cql code at runtime so does it mean we never need to write SQL no when dealing with complex problems ORS can produce efficient SQL queries so that's when we need to jump in and write optimize SQL queries by hand but overall orms help us reduce complexity in our code make it more understandable and get more done in less time a good example of that is Jango migrations using these migrations we generated our database tables almost instantly we didn't have to write any SQL code or use a tool like data grip to create our tables add relationships indexes and so on Jango migrations took care of all of that for us so migrations are part of D Jango RM also all the model classes we have created so far inherit from the model class in Django this model class is also part of D Jango RM so as you will see in this section all our model classes inherit the functionality to query or manipulate data from the base model class now once in a while you see someone like our popular John Smith who hates orm and prefers to write every bit of Code by hand because he believes orms are slow what JN is missing here is that he doesn't understand that the more code he writes the more bugs he or someone else has to fix in the future there is an old saying that says the best code is no codee writing and maintaining all that extra code costs time and money someone is paying for it your employer or your client if you were that person you wouldn't want someone else wasting your money writing code that was unnecessary right throughout my career I've seen so many projects over engineered by people like John that never made it into production in my opinion a good software engineer is one who delivers working software in time building the best most optimized solution that will never make it to production is not something to be proud of so use the right tool for the job as I said ORS don't perform well when dealing with complex queries but that doesn't mean we should never use orms we can use them in a lot of cases perhaps for the most part remember the old saying premature optimization is the root of all evils so don't optimize your code unless you have proof that it's slow so that's it for the Chango RM let's move on to the next lesson [Music] all right before we get started let's make sure that we're on the same page I want to make sure that we're both using the exact same code and database so what you see on your machine will be exactly the same as what I'm going to show you in the videos so please follow everything I'm going to show you in this lesson so at the beginning of the course in the first section I give you a zip file that contains all the resources for this course so here we have a folder called code that contains the code for each section now we're going to go to the fifth section and open the starter code so here we have the storefront project let's drag and drop it into vs code okay we get a message saying no python interpreter is selected don't worry about this so let's close this now let's go to the settings module and here in the section for our database settings change the password of MySQL otherwise you're going to get a connection error so use the password for the root user next we open a terminal window and here we're going to run pep and install so this is going to create a new virtual environment and install all of our dependencies there okay great now let's open up data grip or any tool you use for managing your database here we have the storefront database I'm going to delete this database and recreate it from scratch so delete good now we're going to right click on Local Host and open a new query console and here we're going to type create database store Front make sure to spell it properly because this is the name that we use in our project okay so now we have a new database let's verify it great so this database is currently empty the next step is to run all of our migrations to create our tables so back to our project here in the terminal we run python manage.py migrate now we get an error saying invalid syntax because in this window our virtual environment is not activated so back to our project let's activate our virtual environment good now we're going to run python manage.py migrate okay all of our migrations are applied so back to data grip let's refresh all of our tables are created beautiful but these tables are currently empty so the next step is to populate them with data but before doing so I want to close all the sessions I have open in data grip so down the bottom over here we have the services tab I'm going to right click on Local Host and close all sessions now I'm going to right click on storefront and open a new query console now back in the resources folder we have this data folder and here we have a seed file that will populate five of our tables collection product customer order and order item so let's drag and drop this into this window good now on the top we have to select the schema so I'm going to select storefront good now make sure that all these statements are selected So currently all of them are selected if not just press command and a on Mac or control and a on Windows and finally we're going to execute them all in one go good so now five of our tables are populated with data let's look at the customer table all right so here we have 1,000 customers beautiful and now the final step is to start our server so python manage.py run server great so now that we're on the same page let's move on to the next lesson [Music] all right the first thing you need to understand about D Jango RM is the concept of managers and query sets so let's press command and T on Mac or control and T on Windows and jump to our say hello function so we're going to go back to our playground and write all the code here now for this section we don't really need the calculate function so I'm going to delete it and I'm going to delete this line as well now on the top from store. Models we're going to import the product class now every model in Jango has an attribute called objects and this returns a manager object a manager is an interface to the database it's like a remote control with a bunch of buttons that we can use to talk to our database so here we have a bunch of methods for querying or updating data for example we have all for pulling out all the objects in the products table we also have get for getting a single object we have filter for filtering data and so on now most of these methods like the all method return a query set so when we call this method we don't get a list of products we get a query set object a query set is an object that encapsulates a query so at some point Jango is going to evaluate this query set and this is when Jango will generate the right SQL statement to send into our database but when will this happen well under a few scenarios one scenario is when we iterate over a query set so if you write code like for product in query set at this moment Jango will evaluate this query set and get the result from the database so for this demo let's just print the product on the terminal I'll save the changes back in the browser here on the Hello page let's refresh okay now let's open Django debug toolbar so look at the SQL tab over here you can see the actual SQL statements that Jango sent to our database so here we have three queries the first two are just used by Jango to do his job the third query is our select statement to get all the products from the products table so let's expand this this is the exact query that Jango has sent to our database so select ID title Slug and other fields from product table now over here we can click on the select button to see the actual result that is returned from the database so this is very useful when debugging applications now back to our code so one scenario where a query set is evaluated is when we iterate over it another scenario is when we convert it to a list so if we call the list function and give it this query set this query set will be evaluated another scenario is when we access an individual element like the first element or when we slice this so if we use the slice operator and pick the first five elements then the query set will be evaluated so because of this we say query sets are lazy which means they're evaluated at a later point now you might be wondering why query sets are lazy why doesn't Django simply call the database the moment we call the all method well the reason for this this is that we can use Query set methods to build complex queries so over here we can call query set filter to filter the result and this will return a new query set so once again the query is not going to get evaluated at this point so we get a new query set and then right away we can call the filter method to apply a second filter now similarly we can call the order by method to sort the result so by chaining all these methods we'll build a complex query and at some point when we iterate over that query or converted to a list that query will be evaluated now imagine if query sets were not lazy the moment we call the all method the query would be evaluated and this would result in thousands or even millions of objects returned from the database but what if you were only interested in a subset of these products then calling the filter method would filter the objects in memory so would get thousands or millions of objects will store them in memory and throw most of them out so to recap every model has an attribute called objects which returns a manager which is an interface to the database now the manager has a bunch of methods for querying an updating data most of these methods like the all method return a query set now in contrast we have some other methods that return result immediately for example we have the count method which Returns the number of Records in the product table now why don't we get a query set here well because this method returns a number so it doesn't really make sense to do something extra with that number we're not going to apply a filter to it we're not going to sort the result or build a complex query around it so this was the basics of managers and query sets as we go through the Section you will learn more about these query sets next we're going to talk about retrieving objects in detail [Music] all right in this lesson we're going to talk about a few different methods for retrieving objects the first method is the all method that we briefly talked about in the previous lesson this method returns a query set and when this query set gets evaluated we get all the objects in a given table like the product table now sometimes we want to get a single object like the product with the ID one to do that we use the get method and here we pass a lookup parameter like ID equals 1 that we could also use PK that's a special argument so when we use PK D Jango will automatically translate this to the name of the primary key field so our primary key field might be ID it might be code whatever we don't have to remember this is the benefit of using the PK argument okay now unlike the all method the get method returns an actual object not a query set the reason for this is because once we get an object it doesn't really make sense to do anything extra with it we're not going to sort the result we're not going to apply additional filters and so on so here we get a product and that means we should rename this variable to product so always pay great attention to the name of your variables and functions I cannot emphasize this enough because this is one of the main issues I see in a lot of people's code they have a function like get airplane so you see that function and you think you're going to get an airplane but when debugging the application you realize that this function actually returns an orange and that orange ends up getting stored in an object called book don't do this so always pay great attention to the name of your variables okay so let's save this and see what we get back to the browser refresh let's look at the SQL tab so here's our select statement so we're selecting all these columns from the product table and here we have a we Clause to select the product with the ID one now Jango also adds a limit Clause a limit of 21 I'm not entirely sure why they use 21 here to me it looks like a magic number but this is something you can find in Jango source code so for now don't worry about it this limit doesn't really make a difference for us now one thing you need to know about the get method is that if it cannot find this object it will throw an exception so if we set PK to zero look we get an exception of type does not exist so to handle this we have to wrap our code inside a TR catch block so back to the code first we're going to import the type of the exception on the top so from Django core. exceptions we're going to import object does not exist now not that I put all my Jango import statements next to each other so my code is cleaner and more organized compare this with this so we importing something from Django then something from another app then we're going back to Django again this is a little bit ugly so I prefer to put all Jango import statements next to each other now we need to wrap this line inside a tri catch block don't tell me that you don't know what the tri catch block is because I covered it in detail in my python course so here we type try then we type accept followed by the type of exception which is object does not exist also note that you don't have to type the full name of the class so here I'm typing obj d n e and with that we can easily look up this class so we can use abbreviations okay Enter now in a real scenario here we want to show an error to the user but for now don't worry about it so I just want to pass okay now back to the browser refresh this time we didn't get an exception great now this TR catch block looks a little bit ugly we don't want to repeat this pattern over and over in our code so let me show you a better way first I'm going to delete the track catch block good now instead of the get method we can use the filter method now this method returns a query set so right away we can call the first method of the query set now if the query set is empty the first method returns none so in this case product is going to be none we're not going to get an exception check this out so save and refresh great now sometimes we want to check the existence of an object so over here right after the filter method instead of the first method we can call another method called exists so first we apply a filter and then we check to see if there is an object in our query set with this criteria so in this case we're not going to get a product object we get a Boolean value so we should rename this variable to something like exists okay so these are various ways to retrieve objects now in the next lesson we're going to talk about filtering in detail [Music] all right let's talk about filtering data so let's say we want to find all the products that are $22 so here we pass a keyword argument and say unit price equals 20 pretty straightforward now what if you want to find all the products that are more expensive than $20 we cannot use our logical operators here look we have an error because this expression this piece of code is a Boolean expression and returns a Boolean value which can be be true or false but when calling the filter method we need to pass a keyword argument so we need to pass a keyword followed by a value right so to solve this problem after the field name we type two underscores followed by a lookup type so in Jango we have GT which is short for greater than we also have greater than or equal to we have less than less than or equal to so for this demo I'm going to change this to GT equals 20 now we're passing a keyword argument to this method but the name of our keyword is kind of special right save the changes now to find all these lookup types we can search for query set API and on this page look over here where is it it's right here filled lookups so we have various lookup types for numbers strings and dates in this lesson we're going to cover a lot of them and I'm going to leave the rest to you so back to our code another useful Lookout type is range and with this we can find the products whose price is in a given range so over here we cannot pass a single value we need to pass two values a minimum and a maximum so we need to pass a topple with two values let's say 20 and 30 now out of curiosity let's render these products in our template and see what we get so here's the context the object that we're passing to our template in this object in this this dictionary I want to add another key value pair called result we could also call it product that's better and set it to query set so we're passing the query set here now it would be better to convert this to a list so the name of the key reflects the type of the value once again we don't want to get an airplane and store it in a book right so save the changes now let's go to hello.html and after our if block we're going to render an unordered list which represents a list of bullet points so tab inside the unordered list we're going to add a for Loop so we add a pair of braces with a perent and here we say for product in product we don't need a colon here just the expression okay now in our for loop we're going to type a list item for rendering a bullet point and over here we add two braces to render product. type finally we need to close our for Loop so once again braces with Ampersand and here we type end four now back to the browser here are the products whose price is between 20 to $30 great now we can also filter across relationships so let's remove this argument let's say we want to find all the products in collection number one so here we type collection followed by two UND scores so we navigate the relationship and over here here we can type the name of any of the attributes or fields of the collection class so we can say ID equals 1 we can also use our lookup types so we can add two underscores followed by a lookup type like greater than or range and then we can set this to a topple of let's say three values so with this we get all the product in any of these collections okay so these were the lookup types for dealing with numbers now let's look at an example involving a string so I'm going to remove this argument so let's say we want to find the products that contain coffee in their title so over here we can type two underscores and use the contains lookup type we set this to coffee and with this we don't get anything because this lookup type is case sensitive so to perform a case insensitive search we have to use I contains now take a look so here are are all the products that have coffee in their title now we also have starts with ends with as well as their case insensitive variation okay now for dates we have a bunch of lookup types so let's say we want to find all the products that were updated in 2021 so last update double uncore here we can use year and set it to 2021 now take a look so this is what we get so we can extract individual comp components in a date like year month minute second and so on we can also compare this with a date value not something we use that often and the last lookup type I'm going to cover here is checking for null so to get all the products without a description we can say description Dore is null equals true we don't get anything because all of our products have a description okay now it's your turn I've attached a PDF below this video in that PDF you're going to find a bunch of exercises and their Solutions so make sure to do this exercises before moving on to the next lesson where we talk about complex [Music] filtering all right let's see how we can apply multiple filters so let's say we want to find all the products with inventory less than 10 and unit price less than 20 there are a couple of different ways to implement this way one way is to pass multiple keyword arguments here so we can say inventory less than 10 and here we pass a second keyword argument and say unit price less than 20 so let's go back to the browser refresh here are the products we get let's look at our SQL query so here's our select statement as you can see in the work class we have two conditions combined using the and operator okay now there is another way to write the same query instead of passing multiple keyword arguments we can chain the call to filter method so I'm going to remove the second keyword argument so here we have the filter method the filter method returns a query set now we can get that query set and apply a second filter on it so here we can say unit price less than 20 now here we get a new query set which we store and this object and the moment we call the list function this query set will get evaluated so if we go back to the browser and refresh we get the same result as before so let's take a look at our query so exactly like before where we have two conditions combined using the and operator now how can we combine these conditions using the or operator well to do that we have to use Q objects back to our code first we need to import the Q class from Django so from django.db Models import Q so Q is short for query and using this class we can represent a query expression or a piece of code that produces a value okay so using this Q class we can encapsulate a keyword argument so let me remove all this code and start from scratch so we want to combine these conditions using the or operator so here here we say filter now instead of passing a keyword argument here we're going to pass a q object so we create a q object and right here we pass a keyword argument so we say inventory less than 10 so each Q object encapsulates a keyword argument or a query expression now we can combine this Q object with another q object using the bitwise operators so if we use the bitwise or operator this will translate to a log iCal or in a SQL query so here we pass a second Q object and at the second condition unit underline price less than 20 now let's save the changes so here's what we have implemented back to the browser refresh let's look at our query there you go so two conditions combined using the or operator beautiful now back to our code here we can also use the end operator but this syntax is a little bit too verose if you want to combine multiple conditions using the and operator we don't really need Q objects we can simply pass multiple keyword arguments to the filter method just like before like here we can also negate a q object so this will translate to the not operator in SQL so when we execute this we'll get all the products whose inventory is less than 10 and their unit price is not less than 20 okay so this is how we can build complex lookups using Q objects next we're going to talk about referencing Fields using F [Music] objects sometimes when filtering data we need to reference a particular field for example let's say we want to find all the products where their inventory equals their unit price now I know this doesn't really make sense in terms of a business rule but let's just imagine that we want to compare two f so here in the filter method if we say inventory equals unit price we get an error because unit price is not a valid value for this keyword argument where is unit price defined we don't know right now if we convert this to a string that's not going to work either because the inventory field is a number and we cannot compare a number with a string so to solve this problem we need to use an F object so first on the top from the same models module we're going to import the F class now using this class we can reference a particular field that's why it's called f so over here we're going to create an F object and in the Constructor we're going to pass the name of a field okay so let's run this query and see what we get refresh obviously we don't have any products that satisfy this criteria but let's look at our SQL query so over here look at the work Clause we are finding products whose inventory equals their unit price now using F objects we can also reference a field in a related table for example here we can say collection _ ID and with this we'll compare the inventory of a product with the idea of its collection okay so this is how we can reference Fields using F objects pretty simple next we're going to talk about sorting data [Music] all right let's talk about sorting data so here we have this order by method that I briefly mentioned before using this method we can sort the result by one or more fields for example here we can get all the products and sort them by their title in ascending order take a look so save and refresh there you go so all the products are now sorted in alphabetical order beautiful now let's look at the SQL tab so here's our query now with this implementation we have an order by clause for sorting the products by their title in ascending order if you want to change the sort direction we simply add a negative sign here that we can also sort by multiple fields for example we can sort by unit price in ascending order and then by title in descending order so with this implementation we're we're going to sort our products from the cheapest to most expensive ones and if you have multiple products with the exact same price within that group our products are going to be sorted by their title in descending order okay now the order by Method returns a query sell object and one of the methods of query sets is reverse so if we call the reverse method here this will reverse the direction of the sort so with this implementation we're going to sort the products by unit price in descending order and then by title in ascending order now we can also call the order by Method after filtering data because the filter method returns a query set object and orderby is one of the methods of query set objects so here on query set API reference over here you can see all the methods of query set objects so we have filter exclude order by and so on so as an example we can filter all our products to get products in collection one and then sort them by their unit price pretty straightforward now sometimes we want to sort the result and pick only the first object so let's remove the filter method here we're simply sorting our products by their unit price and then we're going to pick the first product so with this implementation we're not going to get a query set because we're accessing an individual element so up to this point when we call the order by Method we get a query set object but the moment we access an individual element in this query set the query set gets evaluated and then we get an actual object so we should rename this variable to product and of course we need to make a change here because we're not going to convert this to a list so instead of products we're going to pass product to our context and of course we need to change our template played to accommodate this but let's not worry about that in this video what I want to show you instead is a convenience method called earliest so another way to rewrite the same query is like this instead of order by we can call the earliest method to sort the result by unit price and get the first object so with the second implementation we're not going to access an individual element because the earliest method returns an object in contrast order bu returns a query set now similarly we have another method called latest which sorts the products by unit price in descending order and then it will return the first object okay so this is all about sorting data next we're going to talk about limiting [Music] results so our product table has a thousand products now quite often we don't want to show all these products to the user in one list we want we want to show pages of products so let's say our page size is five and we want to show the products on the first page to do that we use Python's array slicing syntax so if you type colon 5 here this is going to return the first five objects in this array so more accurately we're going to get objects at these indexes 0 1 2 3 and four so excluding five okay now let's go back to the browser and refresh so here are the first five objects or first five products now let's look at the SQL tab so now in our query we have the limit clause for getting the first five products now to get the products on the second page we can start from five and finish before 10 so this is going to return the product objects at these indexes 5 6 7 8 and N now refresh with this implementation our query is going to have an additional Clause so we have limit five followed by offset five for skipping five [Music] records so you have seen that when we query objects by default all of their fields are read from the database but what if your only interest set in a subset of these fields for example look at our product table our product table has a bunch of fields or columns some of these columns like the description column contains a lot of text what if we don't care about the values in this column what if we only want to return the ID and the title of each product to the user this is where we use the values method so we call the values method and specify the fields we want to query let's say ID and title now refresh we get the same result as before but look at our query with this implementation we're only reading the ID and the title of each product okay now we can also read related fields for example we can go to the collection and read the title field so using the double underscore notation we can access the related field now let me show you something interesting so back to the browser refresh let's look at our query one more time with this implementation now we have an inner join between the product and the collection tables because we reading a related field so this is how we can use the values method now one thing you need to know about this method is that with this method instead of getting a bunch of product instances we get a bunch of dictionary objects let me show you what I mean so let's go to our template instead of rendering product. title let's just render the product object itself so save and refresh see what's happening so each object in the result is a dictionary it's not a product instance so in this dictionary we have three key value pairs we have ID title and collection Dore title now we have another method called values list and with this method we get a bunch of toppos instead of dictionaries so take a look refresh now each object is a topple of three values so here we have the ID followed by the title of the product and the title of the collection now here's your exercise I want you to write a query to select products that have been ordered and sort them by their title now let me give you a hint before we get started so in our database we have this product table that contains all the products in our system but not all products have been ordered so to find the products that have been ordered you need to go to the order item table here we have a column called product ID you need to select all these values all these product IDs and use them as an argument when filtering products so spend a couple minutes on this then come back see my solution all right the solution as we said we should start with the order item table so first we go on the top and import the order item class now we go to order item the object now here we need to select all the product IDs from this table so this is where we use the values or values list method it doesn't really matter so I'm going to go with values because it's shorter so we go to values next we go to the product field and select the ID field now we can also use a single uncore because Jango will automatically create this field for us at runtime so even though we didn't declare a field called product ID on the order item class look we only have product right but angle will automatically create a field called Product underline ID at runtime and essentially this is our foreign key field okay so back to our query we select product idas and store the result in query Set Let's test our implementation up to this point so here in the browser this is what we get a bunch of dictionaries and as you can see we have a lot of duplicates now before I show you how to resolve duplicates let's look at our query so we have a simple query for selecting product ID from the order item table beautiful now to get rid of duplicates here we can use the distinct method so values returns a query set and distinct is another method of query set objects with this let's go back to the browser and refresh we no longer have duplicates beautiful now the last step we want to go to the product table and select all products with these IDs very simple so we're going to say product objects filter ID double uncore in so here I'm using the in lookup type to find all products whose ID is in a given list and we're going to set this to this expression over here where we select product IDs from order item table so cut move it here and we're going to set the query set right here so this is the end result let's see what we get in the browser so refresh we get a bunch of product objects so product with ID 1 four five and so on now let's go to our template and render the title of each product so instead of rendering the product we're going to render product. title and there you go so here's the list of products now the last thing we need to do is sort the list so after we filter our products we're going to call the order by method to sort the products by their title now take a look here's the final result these are the products that have been [Music] ordered so in the last lesson you learned how we can optimize our queries by specifying the fields we want to query now we have another technique called deferring in fields so we have a method called only and with this method we can specify the fields we want to read from the database let's say ID and title now you might be wondering how this method is different from the values method well with the only method we'll get instances of the product class whereas with the values method we'll get dictionary objects okay now let's save the changes back in the browser refresh so we get the same result as before let's look at our SQL tab so here's our query pretty simple we're selecting the ID and title from the product table great so this is how the only method works now you got to be careful with this method if you don't know what you're doing you will end up with a lot of queries sent to the database under the hood let me show you what I mean so let's go to our template and after the title of each product render its price so we had a dollar sign here followed by two braces and here we render product. unit underline price let save back in the browser refresh look what's happening our application is freezing so it's going to take several seconds until we see the result all right here's the result now let's look at our SQL tab how many queries do we have here 1,002 let's see what's going on here so here's our main query where we read the ID and title from the product table now after the main query for each product you have a separate query to read its price so look at this query here you're reading the ID and unit price from the product table where ID equals 1 we have a similar query for every other product in this list so because we have a th products in this list we have a th000 extra queries for reading the price of all these products this is what I was talking about so you have to be careful when using the only method if you don't know what you're doing you'll end up with a lot of extra unnecessary queries now we don't have this problem with the values method because with the values method we get dictionary objects and these dictionary objects don't have this Behavior so if you access a field that doesn't exist in a dictionary that dictionary is not going to issue a query to the database okay now we have another method which is the opposite of the only method and that is called defer with this method we can defer the loading of certain fields to later so let's say our product table has a bunch of columns you're interested in all of them except the description field so we can defer this to later but once again you have to be careful so if somewhere else you have let's say a for Loop and in that Loop you're iterating over the products and rendering the description of each product once again you're going to end up with all those extra queries [Music] sometimes we need to preload a bunch of objects together for example here we're loading all the products now let's go to our template and render the collection of each product next to its title so here we add a hyphen followed by two braces to render product. collection. tile now save back in the browser refresh look we have the same problem as before our application is hanging because Jango is sending a thousand extra queries to the database to read the collection of all these products because when we ask for products D Jango is only going to quate the product table it's not going to query the related tables unless we specifically instructed to do so so here we want to pre-load the products with our collection to do that before we call the all method we call Select related and here we specify the field we want to preload so that field is collection then we call the all method now back to the browser refresh our products loaded instantly now let's look at our SQL tab so here's our query see what's going on here we're selecting all these fields from the product table followed by these three fields from The Collection table and and here we have a join between product and collection so when we use the select related method Jango creates a join between our tables now we can also expand relationships so let's say collection has another field that we want to preload as part of this query so we add two underscores here and then type the name of that other field okay so this is Select related now we have another method called prefetch related so we use select related when the other end of the relationship has one instance like in this case a product has one collection right but we use prefetch related when the other end of the relationship has many objects what is an example of that the promotions of a product so let's go to the product class real quick look each product has one collection but it can have many promotions so to preload the promotions we use the prefetch method so back to our playground I'm going to replace this with prefetch related and the field we want to preload is promotions now before we go back to the browser I'm going to go back to the template and remove the collection of these products otherwise we're going to end up with all those extra queries so save now refresh all right let's look at our SQL tab so now we have two queries here's the first query to read all these columns from the product table now after that we have another query to read the promotions of these products so we reading three columns from the promotion table and we have a join between promotion and product so essentially we have two result sets the first set includes the products the second set includes promotions Jango reads these sets and then populates are objects in memory now we can also combine these two methods so let's say we want to load all the products with their promotions and collection so after the call to preface related we can call Select related to load the collection of each product so both these methods return a query set and that's why we can chain all these methods to build a complex quer okay now the order of these methods doesn't really matter so we can put select related first or less it doesn't really make a difference so now let's save the changes and add the collection back in our template so product. collection. tile now let's test the result great so we see the collection of all these products now in our SQL tab we have two queries the first query is to read all the products and and their collection so here we have a join between product and collection and the second query is to read the promotions of all these products all right here's your exercise I want you to write a query to get the last five orders with their customer and items including the product reference in each order item so pause the video spend a couple minutes on this then come back sa my solution all right here's the solution you want to get a list of orders so we should start with the order class then we go to objects now we want to preload these orders with their customer so this is where we call Select related to preload the customer field now we don't want to show all the orders we want to show the last five orders so first we need to sort them by place that in descending order so the latest orders come first and then we use array slicing syntax to pick the top five orders okay now let's test our implementation up to this point so we store the result in query set and then to keep our code clean we should change the name of this key from products to orders next we go to our template and rename products to orders and product to order now here we can render the idea of each product followed by let's say the first name of the customer so two pairs of braces to render order. customer. first name save now here we can see the last five orders and their customer beautiful let's look at our SQL tab to make sure we don't have any extra queries so we have a single query to read the orders and their customer so we're selecting all these columns from the order table followed by all these columns from the customer table and here we have a join between order and customer tables great so let's move on to the next step now we should preload the items of these orders so here we call prefetch related because each order can have many items now what is the name of the field we're going to query well let's have a quick look at our order class so each order has three Fields place at payment status and customer we don't have a field called items but look at the order item class here we have order which is a foreign key to order so Jango is going to create the reverse relationship for us now what is the name of that relationship that is order item underline set this is the convention that Jango uses to create the reverse relationship if you don't like this name you can set it using the related name argument so over here we can set related name to items so with this implementation the order class is going to have a field called items now I don't want to set this because we're going to end up with inconsistency in our code and I don't want to change the name for every relationship so for the purpose of this exercise let's go with jango's convention so back to our playground we want to prefetch order item underline set so the name of the target class in lowercase followed by an underscore and set okay let's see what we get after this point so refresh our page loaded instantly let's look at the SQL tab we have one extra query to load these order items so we're loading order items for orders in this list so everything is fine so far now the last step is to load the product referenced in each order item so over here where we are prefetching the item we can span the relationship by adding two underscores and then we type the name of the Target Field which is product save now refresh let's look at our query one more time now we have one extra query to read the products referenced in these order items so we reading all the columns from the product table where the idea of the product is in this list and this list is the list of order items we have queried so far so this is how I want you to write code write a little bit of Code test your code make sure everything works before doing a big step with this technique we can prevent a lot of crazy issues down the [Music] road sometimes you want to compute summaries like Max or average price of our products this is where we use the aggregate method so we call product. Objects do Aggregate and here we pass an aggregate object so first on the top we import an aggregate class so from django.db models. aggregate we import one of these classes so we have count we have Max Min average and sum so let's say we want to count our products here we create a count object and specify the field we want to use for counting if we use ID we can count the total number of products because every product has an ID but if we use a different column let's say description and assume that description can be null this will count the number of products that have a description okay so the proper way to count the total number of Records is to use the ID or the primary key field now the aggregate method doesn't return a query set because once we calculate a summary value it doesn't really make sense to do anything extra with it we're not going to add filters or sort data and so on so here we get a dictionary let's call that result and add that to our context object over here so I'm going to add a new key called result and set it to result okay now we go to our template and I cleaned up the code from the previous lesson so we don't have a for Loop for rendering the list of orders so right after our hello word message we can render the result object now let's see what we get refresh so we get a dictionary with one key value pair look at the name of the key it's idore count because we use the ID column for counting objects and as you can see we have a th000 products in this table now we can easily change the name of this key so back to our code over here we can pass a keyword argument we can say count equals this now take a look so the key is us name pretty simple now we can also calculate multiple summaries so in addition to the total number of products we can also calculate the minimum price of our product so we can pass another keyword argument say Min price and set it to Min of unit underlying price so here's what we have we have two keyword arguments count and Min price let's see what we get in the browser so refresh there you go M price is a decimal object with this value now one last thing before we finish this lesson since aggregate is one of the methods of query sets we can apply it wherever we have a query set so we can filter our products and pull out the products in a given collection let's say collection number one and then calculate these summaries over that data set all right so that's all about aggregating objects now I've attached a PDF below this video where you can find a bunch of exercises and their Solutions make sure to do these exercises before moving on to the next [Music] lesson sometimes we want to add additional attributes to our objects while quing them this is where we use the annotate method so we go to customer. objects and call the annotate method now let's say while cing customers we want to give each customer a new field called is new and we want to set it to true so let's get the result and store it in a query set now in our context object I'm going to add a new key value pair called result and set it to list of query set now in our template we are not doing anything in this lesson so let's just focus on the code here now here in the browser refresh we get this error saying query set. annotate received nonone expression what this error is telling us is that we cannot pass a Boolean value over here we need to pass an expression object so in Jango we have this expression class which is the base class for all types of Expressions derivatives of this class are value for representing simple values like a number a Boolean a string we have F which you have seen before using the F class we can reference F field in the same or another table right so an F object is essentially an expression object we also have funk for calling database functions so all these database engines have a bunch of functions for manipulating data to call those functions we use a funk object I'm going to show you that in a second we also have aggregate which is the base class for all aggregate classes so those aggregate classes you learn about like count sum Max and M all these classes derive from the aggregate class okay so let's go through a few examples so back to our code we cannot pass a Boolean value here we need to pass an expression object the simplest expression object is a value object so on the top from Jango db. models we're going to import the value class and now we're going to wrap this value inside a value object so we pass value of true okay now save take a look no more errors let's look at our query so I'm going to execute this query so in the list of customers now we have a new column called is new which is populated by one which is the numeric equivalent of a Boolean true so when Jango read this data it's going to give each customer a new field called is new and it's going to set it to True let's look at another example this time we want to give our customers a new field called new ID and for this demo we want to set this to the same value as the ID field so we need to reference another field in this model to do that first we need to import the f-class from django.db do models and then over here we can reference the ID field now let's run our query one more time so take a look now we have a new column called new ID which is populated with the same value as the primary key now we can also perform computations here so for example we can add one to the ID to generate the new ID now take a look so now the new ID is the original id+ [Music] one all right now let's see how we can call a database function so from the same module we're going to import the font class now we're going to give our customers a new field called full name and this is where we're going to call the concat function of a database engine so pretty much all database engines have this function for concatenating Strings so here we're going to create a funk object and give it a bunch of arguments so we want to specify two Fields here first name and last name how can we reference Fields using F objects so F of first name and F of last name name next we need to give this a keyword argument that specifies the target function so we set function to concat okay now if we run a query first name and last name are going to be concatenated but we also need to add a space in between so we cannot pass a white space here we need to pass an expression object so we need to wrap this inside a value object okay now let's run our query and see what we get so refresh and here's our query take a look so in our query we are selecting all these columns from the product table but we also have a new computed colum using the concat function of MySQL so we're concatenating first name with a space and last name and here in this table we have the full name of each customer great now there is also a shorthand to achieve the same result so back to our codee first we're going to import the concat class from Django so from django.db Models functions we're going to import the concat class and then we're going to use that class instead of a fun class so let me duplicate this query so you can compare them side by side in the second implementation we are not going to create a funk object we're going to create a concat object now here to specify our Fields so first name and last name now note that over here I'm not wrapping this Fields inside an F object so that is the benefit of using the concat class but to add a white space we need to wrap it inside a value object because otherwise Jango thinks this is a column in our table so let's wrap this inside a value object good now unlike the first method we don't have to specify the target function because that is reflected in the class itself so the code is shorter and gives us the exact same result now if you're curious about D Jango database functions just Google Django database functions on this page you can see various functions in different categories for example we have a bunch of functions for working with dates we have mathematical functions we have functions for manipulating text and so on these functions are common across all database engines but different database engines have their own unique functions so to call those functions you have to go back and use a funk [Music] object now let's say we want to see the number of orders each customer has placed so we're going to annotate our customers with a new field called orders count and here we're going to use the count class now look vs code offers to automatically import this class for us so we just press enter and it's imported on the top now let me show you a shortcut we can also import the count class from the models module and with this we can avoid an extra import statement now what is the difference between these two classes nothing the models module simply Imports the count class from the Aggregates module and then re-exports it okay so let's delete this line good so we create a count object now what field should we use to count the number of orders well let's go to our customer class so our customer has these fields but we don't have a field called orders so let's look at the order class here we have customer which is a foreign key right and you know that with this implementation Jango is going to create the reverse relationship for us so here in the customer class we're going to have a field called order under underline set so the singular name of the target class followed by underline set and this is all in lowercase now for some reason that is known to Jango developers we cannot use this name to count the number of orders for each customer let me show you what I mean so back to our playground if we type order underline set here we get an exception look cannot resolve keyword order set into field our choices are address birth date email first name ID last name membership order and phone so the name of the field that we should use for counting is order why honestly I don't know so back to our code let's change this to order and rerun our query great now let's look at our query so now we are selecting all these fields from the customer table and we're also counting the number of orders now look we have a left join between customers and orders because not every customer has an order now if you're not familiar with left joints you really need to look at my SQL course I cover this in detail there and finally we have a group by clause for grouping the number of orders for each customer so if you run this query we can see the number of orders for each customer so let's quickly recap what you have learned so far we talked about the expression class which is the base class for all types of Expressions derivatives of this class are value for representing simple values like a Boolean a number a string we have f for referencing Fields funk for calling database functions aggregate which is the base class for all aggregate classes like count sum and so on now in this lesson we're going to talk about another derivative of the expression class CL called expression wrapper we use this class when building complex Expressions so here's an example let's say we're going to annotate our products and give them a new field called discounted price so here we're going to get the unit price and multiply it by let's say 0.8 now if we run this query we're going to get an exception so take it look so we get this error saying expression contains mix types because we have mixed a decimal field which is our unit price field with a float field which is our 08 number now the area is saying that we must set the output field so to solve this problem first we need to import the expression wrapper class from the same module from the models module now we should wrap this expression inside an expression wrapper object and that's where we specify the type of the output field so so to keep our code clean I would prefer not to wrap this expression right here I would prefer to create an expression wrapper object over here then we move this right here and as the second argument to the Constructor of this class we specify the output field so we need to decide what is the type of the output field for monetary values we should always use a decimal field because float Fields have a rounding issue and are not very accurate so back to our code we set the output field to a decimal field object so make sure to create an object we're not simply passing the name of the class we're creating an object okay now we can store the result in a separate object like discounted price and then use that over here now let's run our query okay no more error so let's see what is sent to the database there you go we have a new computed column which takes the unit price and multiplies it by8 so this is how we can use expression wrapper objects now once again there is a PDF below this video where you can find a bunch of exercises and their Solutions so spend a few minutes on those and then come back see the next lesson [Music] all right let's talk about querying generic relationships so earlier in the course we created the tags app with two models we have tag and tagged item now if you remember we decided to use the content type framework to decouple this app from the store app so this app knows absolutely nothing about the store app it doesn't know we have a model called Product so with this decoupling we can reuse this app in any kind of project tomorrow we can use it to tag articles block posts videos and so on but now let's see how we can find the tags for a given product so let's go to our database and look at this table Jango content type in this table we can see all the models we have in our application so in the admin app we have a model called log entry we didn't create this this is built into the admin app that comes with every Jango project similarly in the off app we have three models group permission and user in the likes app we have a model called liked item and in the store app we have all these models that we have defined so far okay so this is the content type table now let's look at the tagged item table in the tags app so here we have a few columns object ID content type ID and tag ID so to find the tags for a given product first we have to find the content type ID of the product model so in this table currently in my database we have the product model and the content type ID for this model is 11 so once we find this then we can go to this table and write a query to filter all records where content type ID equals 11 and object ID equals the ID of the product whose tags you want to find out that is the big picture now let's implement this in code so back to our playground first we have to import a few classes from Jango contri content types. models we're going to import the content type model this is the model that represents the content type table that you just saw then from store. Models we're going to import the product class and finally from the tags. models module we're going to import the tagged item class now first we need to find the content type ID for the product model so here we say content type doobs so because content type is a model it has the objects attribute just like all the models we have created so far now here we have a method called get for model this is a special method that is only available in this manager remember I told you that the objects attribute returns a manager object which is a gateway to the database so content type manager has a special method called get for model so we call this method and give it our product class now we get a content type instance now more accurately this object represents this Row in our content type table so this is how we can find the content type ID for the product model now you might be wondering why we're not just using the number 11 because we cannot rely on these numbers in your database in your development database the content type ID for product might be 11 but in your production database it might be something else that's why first we have to find the content type ID for the product model now that we have this we can use it to filter tagged item so we say tagged item. objects filter you're going to give it two filters first is content type which we set to our content type object and then we set object ID to the idea of the product whose tags you want to query let's say product number one this should be calculated dynamically for example depending on the product that the user is looking at we're going to get the product ID from the URL and pass it here but for now let's not worry about that part so this will return a bunch of tagged item objects now back to our database look at our tagged item table in this table we have a field called tag ID which is a foreign key to the tag table so the actual tag is not stored here it's stored in this other table so we need to pre- load this field otherwise we'll end up with a lot of extra queries to the database so back to our code here we're going to call Select related to preload the tag field now let me show you a better way to format this code it's getting a little bit ugly so we can put this on a new line now we get an error because python interpretor doesn't know that this line is the continuation of the first line to solve this problem we add a backs slash here and now the error is gone so I would like to indent this line and then one more time we put filter on a new line and add a back slash here and then format our code like this I think this is nicer especially when you're building a complex query by chaining a bunch of method cost here so this returns a query set let's get it and now we can add a new key value pair in our context object so we can call that result or we can call it tags and set it to list of our query set list of query set now let's run our query and see what happens so refresh good no errors so we have two queries the first query is for finding the content type ID for our product model and the second query is for reading the tags for a given product like currently we don't have any data in these tables but if you're curious you can just populate these tables and render the the tags on the page so this is how we can get the tags for a given product now in the next lesson I'm going to show you how to encapsulate this logic inside a custom manager so our code is cleaner and easier to work [Music] with so our tags app is decoupled from the store app but writing code like this is not ideal every time you want to find the tags for a given object first we have to find the content type then we have to go to the tag item model we have to preload the tag field and apply a filter there must be a better way so wouldn't that be nicer if you had a method like tagged item. objects. G tags for product one obviously calling this method is much nicer and cleaner than writing all this code so let me show you how to implement this method to do this we have to build a custom manager for the tagged item model so we want to replace the default manager that is returned from the objects attribute we want to replace that with a custom manager so let's go to this class before this class we have to create a custom manager so class tagged item manager this class should inherit from the manager class in the models module so this class is the base class for all managers now here we're going to implement that custom method so get tags four now the first parameter should be self so this becomes a method of this class we also need two more parameters object type and object ID now let's go to our playground and grab all this code and move it to our new method okay let's fix the indentation good now we're going to replace product with object type and one with object ID as simple as that now finally we're going to return this query set so we can return it right away so we're done with this now we need to use this manager in the tagged item model so here's the tagged item class I'm going to add a new attribute here called objects we're going to set it to an instance of the tag item manager class as simple as that now we can go back to our playground and use this new method to get the tags for a given object like a [Music] product all right let's talk about the caching mechanism built into query sets so let's call product. objects. all and store the result in a variable called query set now you know that when we convert this query set to a list Jango is going to evaluate this query set and that's when it's going to go to the database to get the result now this is an expensive operation because reading data from the desk is always slower than reading it from the memory so when Jango evaluates this query and gets the data from the database it's going to store it somewhere in memory called the query set cache so the second time we convert this query set to a list Jango is not going to evaluate this query again it's not going to go to the database it's going to read the result from the query set cach let me show you so back to the browser refresh now let's look at our queries look we have a single query for reading the products so the second time we convert this query set to a list D Jango is going to read the result from the query set cache now the same thing happens if we access an individual element from this query set again Jango is going to read this object from the query set cache now one thing you need to know about caching is that caching happens only if we evaluate the entire query set first for example over here first we're evaluating the entire query set and then accessing an individual element in contrast if you accessed an individual element first and then converted our query set to a list you would end up with two queries to the database take a look so save refresh and look here we have two queries with the first query you're reading the first product in this table and with the second query you're reading all products so keep this in mind even though caching is a great optimization technique if you don't structure your code properly caching is going to come back and bite you so this is all about caching next we're going to talk about creating [Music] objects so far we've been only quering data now let's see how we can insert a record in the database so let's create a collection object and set his title to let's say video games now every collection has a featured product which is optional so we don't have to set it but let me show you how to set this field and create a relationship there are basically two ways to set this field we can set this to a product object like the product with ID one here we could also use PK and with this we don't have to remember the name of the primary key field so it can be ID code or whatever now the second way to set this field is like this we can set collection. featured product ID to one so we can either use a product object or use the value of the primary key field now either way this product should exist before we can create this collection in other words we cannot create this collection and this product at the same time this is how relational databases work the parent record should exist before we can create the child record right so assuming that we have a product with this ID now I'm going to remove the last line and set the feature product to a product object okay now there's another way to initialize this collection instead of setting these fields individually here we can set them using keyword arguments when creating a collection object so here we can set title to video games now there are a couple of problems with this approach one problem is that if you noticed here we didn't get intellisense so as it was typing title look we are not seeing the name of this field we're just seeing the name of other classes imported in this module so that's the first problem in contrast when we use the dot operator look here we can see that the fields in this class okay the second problem with using keyword arguments is that these keyword arguments don't get updated if you rename these fields let me show you what I mean so let's go to the collection class and for name the title field to name now back to our playground see what happened the title field is updated here but not over here so the keyword arguments don't get updated that's why I personally don't like this approach even though sometimes it can make your code shorter so let's set the fields individually here now to insert this collection our database all we have to do is call the save method so every collection has this method method for saving data now in this case because we haven't set the ID of this collection D Jango will treat this as an insert operation so it's going to create this collection okay now there is another way to write this code there's a shorthand so instead of writing these four lines we can call collection. objects. create and here we have to set the fields using keyword arguments so we set name to whatever and featured product look again we don't have intelligence so we can set feature product ID to one so the create method is available in the manager object and what happens inside this method is exactly what we have on the top so this method is going to create a collection object it's going to initialize this object based on these keyword arguments and then it's going to call the save method to insert this collection in the database and of course at the end it's going to return the actual ual collection object so either way here we can read the idea of this new collection that's going to be available here as well so the second approach appears shorter but again here we have the problem with our keyword arguments so if you rename this Fields our code is not going to get updated so I always prefer to use the traditional approach and before we finish this lesson let's go back to our collection class and rename this field back to title good so let's make sure everything works up to this point save back to the browser refresh now let's look at our query so we have an insert into statement for inserting a new collection with these [Music] values all right let's talk about updating objects so here we have this collection now to update it all we have to do is set its ID or primary key so in my database this new collection that we created it's ID is 11 so I'm going to set PK to 11 and by the way even though I'm using a keyword argument here this is not going to be an issue in the future because if tomorrow we decide to rename the ID field to something else our code is not going to break PK will always work okay so here we have an existing collection now let's set its title to games and featured product To None save refresh good let's look at our query so here we have an update statement for setting the title and featured product ID perfect now let me show you something tricky let's say we only want to update the featured product for this collection so we don't want to set the title save refresh and look at our query one more time now something crazy is happening here can you tell look at this line Jango is setting the title of this collection to an empty string and this causes data loss so as part of updating this field we end up losing the title for this collection but why does this happen here's the reason this collection object that we have in memory by default is title is set to an empty string so even if we don't explicitly update this field Jango is going to include it in our SQL statement and this is where Jango is different from some of the other RM you might have worked with some other orms out there have this feature called change tracking so the SQL statement that is generated here will be based on the fields that are updated so to properly update an object in Jango applications first we have to read it from the database so we have all the values in memory then we can update it so over here instead of creating a collection object first we have to get it from the database so get PK equals 11 good now we have a collection with all the values so we can update certain Fields I am might worry that reading this object first may cause a performance penalty but speaking from experience I'm telling you this is not an issue in most cases so don't try to prematurely optimize your code always profile first see if you really have a performance problem in this part of code before optimizing it okay so once again reading this object first before updating it is not an issue in most cases but let's say in your application you really have a performance problem in this part of your application so let me show you how we can avoid this extra read in the previous lesson we talked about a convenience method called create so collection. objects. create now on this manager we have a similar method called update for updating objects and with this method we can avoid reading this collection first before updating it so we can update it directly in the database so we call this method and pass one or more keyword arguments so here we can set featured product to n and that means here we have that problem with keyword arguments that I told you about so with this new method we can avoid reading an object first but at the cost of making our code a little bit fragile okay now this update method will update this field for all objects in our query set so if we use it like this it's going to update the featured product for all collections in the collection table but here you want to Target a particular collection so before calling the update method first we have to filter to get the collection with the id1 and then we can update its featured product so let me comment out this VI lines and run our code one more time refresh good so take a look with this new implementation our update statement is only setting the featured product okay all right that's it for this lesson next we're going to talk about deleting objects [Music] all right let's talk about deleting objects again we have two options here we can delete a single object or multiple objects in a query set so if you have a collection we can delete that collection by calling collection. delete pretty straightforward now to delete multiple objects first we need to get a query set for example we can say collection. object. filter let's let say we want to delete all collections whose ID is greater than five so here we say ID greater than five this returns a query set now on that query set we can call the delete method to delete all these objects in one go so these are two ways to delete objects in Jango now it's your turn download the PDF below this video and spend a few minutes on the exercises when you're done come back see the next lesson [Music] sometimes we want to make multiple changes to our database in an atomic way meaning all changes should be saved together or if one of the changes fails then all changes should be rolled back a typical example is saving an order with his items so let's create an order object here we should set the customer or the customer ID field and then save the order before we can save its items this is how relational databases work we should always create the parent record first before we can create create child records okay now after this we can create an order item here we should set a few field first we should set the order to the order that we just created then we should set the product or product ID we should also set the quantity and unit price with all this now we can save this order item now imagine while saving this order item something crazy happens we get an exception what's going to happen our database is going to be in an inconsistent state so we'll have an order without an item we don't want this to happen so this is where we use a transaction so we're going to wrap both these operations inside a transaction and either both of these will be committed together or if one of these operations fails then both changes are going to get rolled back so on the top from django.db package we're going to import the transaction module now in this module we have a function called Atomic which we can use as a decorator or a context manager so we can apply it as a decorator to this view function and this will essentially wrap this entire view function inside the transaction so all the code that is here will be run inside a transaction okay now sometimes you want to have more control over what parts of your view function need to be inside a transaction in those cases you can use this as a context manager so I'm going to remove move this decorator from here let's say we want to wrap these lines inside a transaction but let's say we have some other code here that is not going to be part of a transaction so we're going to leave this out and then wrap the rest of the code inside a width block so we say width transaction. Atomic this returns a context manager now we need to indent this code good now let's test this so I'm going to run the code refresh good so now in our database let's open a new query console and say select everything from store underly order and order by ID in descending order so here's our new order order 101 in this case both the order and its item were saved successfully but to demonstrate an exception let's go back to our code and set product ID toga1 so we're going to get an exception here because we don't have a product with this ID now back to the browser refresh so here's the Integrity error that we just got now let's look at our database so since we have wrapped both these operations inside a transaction now we should not have a new order because we couldn't save its item take a look so I'm going to rerun this query see there is no new order here so this is how transactions work [Music] all right we covered a lot about Jango RM the last thing we're going to cover in this section is executing raw SQL queries so sometimes implementing certain queries using D Jango RM can get overly complex you might end up with crazy annotations or filters in those cases you can always write your own query by hand and execute it directly using Jango RM let me show you so we're going to call product. objects. RA so every manager has this raw method for executing raw SQL queries so we call this and give it a query like select everything from store underline product so Jango is going to execute this query then it's going to map the column names to Field of product objects and return a bunch of products well more accurately it's going to return a raw query set so we're going to get a query set but this query set is different from the other query sets you have seen so so far so here we don't have the filter method we don't have annotate because these methods don't really make sense here okay so for this demo I'm going to add a new key in this context object called result and set it to list of query set now back to the browser refresh so here is our query great now a few things I need to highlight here in this case there is really no point writing this query because Jango can perfectly generate this for us so use this approach only when dealing with complex queries if you end up with complex annotations and filters and realize writing the same query using raw SQL is easier and cleaner then go for this approach or if the query that Jango generates doesn't perform well then again this is another case for using this approach okay now here we can also specify column names so instead of selecting all columns we can select title and Jango is going to load only these two Fields so the other fields are going to be deferred okay now sometimes we want to execute queries that don't map to our model objects in those cases we can access the database directly and bypass the model layer so instead of using the raw method we're going to use a different approach first on the top from Jango DB we're going to import the connection module in this module we have a function cursor for creating a cursor object so we get a cursor now this cursor has an execute method and here we can pass any SQL statements no limitations so we can have a select we can have insert update and delete now after executing our query we should always close the cursor to release the allocated resources so the proper way to use a cursor is to wrap it inside a tri final block so inside a finally block we close the cursor so this way if something goes wrong we don't end up with an open cursor but you know that Tri finally blocks are a little bit verbos so it's much easier to use a cursor using a width statement so let's delete these lines and say withd connection. cursor this returns a cursor object so using the as keyword we give it an identifier like cursor and now we can use this cursor inside the width block without having to explicitly close it so the cursor is always going to get closed even if there is an exception okay so this is how we can execute raw SQL queries Now One Last Thing Before we finish this lesson we also have another method here for executing stored procedures so we can call a store procedure like get customers and give it a bunch of parameters one two a whatever this is much better and cleaner than writing your SQL queries in the middle of your python code so you encap your SQL queries inside a stor procedure and then call that in Python now that really goes outside the scope of this course but I covered it in detail in my SQL course so we're done with this section in the next section we're going to talk about the admin interface welcome back to another section of the ultimate Django course in this section which is the last section of the first part of this series we're going to talk about setting up the admin interface for managing our data we talk about various ways to customize the admin interface how to add computed columns load related objects add searching and filtering Implement custom actions add data validations and more so by the end of this section we'll have a full-fledged admin interface for managing our data I'm super excited about this section I hope you too so let's jump in and get started [Music] all right the first thing we're going to do in this section is setting up the admin app so every Jango project comes with an admin interface which we can access at this address slash admin so here we have our login screen now to create a new user we have to open a terminal window and run python manage.py create super user okay now it's asking for username I'm going to use admin next we need to add the email address so programming with MOS atgmailcom and for password I'm going to use 123123 and repeat now it's complaining that the password is too short and it's not secure but for this lesson I'm not going to worry about this I'm going to bypass the validation by pressing y okay great now we have an admin user so let's log in now we get this error complaining about the session app because the admin app is dependent on the session app app and earlier in the course we removed this app by accident so we need to add it back in the list of installed apps so back to our project let's open up the settings module here in the list of installed apps we're going to add Jango cont trip. sessions and the order doesn't really matter so save now we need to run the migrate command to generate the tables for this app so back to the terminal python manage.py migr great now back to our database let's refresh take a look we have a new table here called Jango session and this table is used for temporarily storing some user data So currently it's empty because we haven't logged in the admin panel but once we log in we're going to see a new record in this table so back to the browser let's refresh good so this is our admin interface where we can manage our group group and users So currently we have a single user in this database let me zoom out a little bit so we can see things more clearly so we have this admin user with this email we have a bunch of filters on the right side we're going to talk about them soon we also have the list of groups which is currently empty so these users and groups are stored in the tables of the off app so back to our database look the off app has a bunch of tables for managing groups permissions and users so let's have a quick look at the user table here we have one record that is for the admin user the password is stored in encrypted format and here we can see the last login date and time we can see that this user is a super user which means it has all the permissions here's the username we don't have the first name and last name we can set that in the admin interface later we can see the email and here we can see is Staff which means this is an admin user for this website now if you forget your password you can always reset it in the terminal so back to the terminal we run python manage.py change password admin here we can enter a new password but I'm going to leave it out so contrl and C to exit okay now back to the browser let's go to the homepage of our admin panel so here on the top we can see D Jango Administration let's see how we can change this to something more meaningful now back to our project let's open the storefront folder and go to the URLs module now in this module all the URLs of the admin app are hooked up at this URL so any URL that starts with admin is going to be routed to the admin app okay now because the admin module is imported here on the top this is a good place to apply a bit of customization for the admin app so we can say admin Dot site do site underl header we can set it to store Front admin now save and refresh so we change the header on the top great we can also change the label here for example we can set admin. site. index title to let's say admin now save and refresh so the title is changed as well so now that our admin panel is ready next we're going to register our models so we can manage them here [Music] all right now let's see how we can register our models so we can manage them in the admin site so back to our project let's go to the store app now every Django app has this module called admin and this is where we write all the code for customizing the administration panel for that app so the first thing we need to do is registering our models for the admin site so the admin module is imported on the top here we're going to say admin. site. register let's say we want to register the collection model so on the top from the current folder we're going to import the models module and then here we can pass models. collection so back to the admin panel refresh now look we have the store app and currently only one of our models is registered in this app so we can look at the list of collections we can add a new collection or change one of the existing ones so let's look at our collection now what you see here is the default representation of a model object so we're going to change this and instead we want to show the title of each collection so back to our project let's go to the collection class now here's a question for you how can we change the string representation of an object in Python we overwrite the magic stir method so every python object has this magic method that is called when that object is converted to a string so here we type def Dore stir double uncore and press enter so this code is automatically created now what you see here is type annotation I talked about this earlier in the course this is basically saying that this method returns a string object now inside this method we have the default implementation which returns a string like this now we're going to change the default implementation and instead we're going to return self. tile now same take a look beautiful so now we can see all the collections the first collection doesn't have a name and this happened in the previous section when we were updating data so there we made a mistake and ended up storing an empty string for the collection title so let's select this and delete it yes I'm sure good now there is a problem here our collections are not sorted so let me show you how to sort them back to our collection collection class here we're going to define a metal class for specifying the default ordering of collection objects so we create a new class called meta we talked about this ear in the course and here we said ordering to a list of fields so here we want to sort the collections by their title so we add that here good now take a look beautiful all collections are sorted alphabetically now as your exercise I want you to repeat the exact same steps and register the product model so we can manage our products in the admin panel all right here's my solution so here in the admin module I registered the product model and here in the product class I overwrote the St method to return the title of each product and I also implemented this metal class for ordering the products by their title so now in the admin site we can see the list of products and as you can see our products are sorted alphabetically great so next I'm going to show you how to customize the list [Music] page now let's see how we can customize the list page so I'm going to show you how to add new columns here how to make them editable how to change the number of items and so on so back to our admin module first we need to create a new class called Product admin we could call it anything but by convention we use the name of our model model like product followed by the word admin now with this class we can specify how we want to view or edit our products so this class should inherit from admin model admin now in this class we can set a bunch of attributes to customize the list page for example we can set list display to the list of fields we want to display like title and unit price okay now that we have this new class we need to pass it while registering the product model so we say product admin this is one way but there's also a shorter way we can use the register decorator on this class so we say admin. register and here we pass models. product so we saying that this class is the admin model for the product class and with this we don't need the last line anymore so that is shorter now back to the browser refresh so look we have a new column where we can see the price of each product beautiful now we can sort by this column as well now we have two sort columns first our products are sorted by unit price and then by title if you don't want to sort by title you can just click on this icon where we can see a cross good so now our products are sorted by unit price in ascending order we can also change the sort order beautiful now imagine if you wanted to code all of this by hand it would probably take you a couple weeks if not longer so let's do some more customization another attribute we can set is list editable and with this we can specify the fields that can be edited on the list page for example if we set this to unit price and refresh now we can edit the price of a bunch of products in one go for example we can change this to 90 and this one to 95 now down the bottom we have the save button so we saved two products in one go now back to the code we can also set list per page to let's say 10 and with this we're going to see 10 products on each page so save and refresh look now we have 10 products and we have this beautiful pagination on the bottom so customizing the list page is really simple now if you want to see the complete list of options you can set here just Google Django model admin on this page on the right side over here look model admin options here you can see the complete list of options you can customize as we go through the Section I'm going to show you many of these but we don't have time for all of these so I leave it up to you to read about the other options all right now it's your turn set up this page where we can view our customers so here we have three columns first name last name and membership we can change the membership of each customer right here very handy again imagine if you wanted to code all of this by hand that would take you a really long time right so build this page over here we have 10 items per page and the default sord order is first name followed by the last name so spend a couple minutes on this then come back to my solution all right here's what I've done I've created a new class called customer admin in this class I've set list display to first name last name and membership I've set list editable to membership ordering to first name followed by the last name and list per page to 10 very very easy next we're going to talk about adding computed [Music] columns all right let's see how we can add a computed column to the list of products so here I've added a new column called inventory status if the inventory of a product is less than 10 here we see low otherwise we see okay so let's see how we can implement this so back to our product admin class in the list of fields we want to display we don't want to add inventory because otherwise we would see a number in this list we don't want this we want to get this number and depending on its value we want to return a string so here in this class we're going to define a method called inventory status with two parameters self and product so we want to take a product and depending on its inventory you want to return an inventory status so we can say if product. inventory is less than 10 we're going to return low otherwise we're going to return okay now instead of inventory we're going to display inventory status take a look so this is what we get beautiful but this column is not sortable by default because D Jango doesn't know how to sort the content of this column so to implement sorting we need to apply the admin the display decorator to this method and here we specify the field that should be used for sorting the data in this column so we said ordering to inventory which is one of the fields of the product model so back to the browser refresh now we have sorting here we can sort in ascending or descending order [Music] beautiful all right let's talk about loading related objects so here in the list of products I want to add a new column to show the collection of each product so back to the product admin class here in the list of fields we want to show let's add the collection field now because collection is a related field jangle will show the string representation of a collection here so back to the collection class remember early in the section we overwrote the stir method of this class so when showing the products for each product D Jango will call this method to get the title of the collection of that product okay so back to the browser refresh here's the collection column beautiful now let's open up Django debug toolbar and look at our queries so look we have seven queries on this page now don't worry about all these queries just look at the last one so over here we're selecting all these columns from the product table followed by these columns from The Collection table and we have an inner joint between the product and collection tables beautiful now what if you don't want to show the string representation of a collection in other words what if you want to show a particular field in this model unfortunately here we cannot use the double underscore notation to reference a particular fi like the title field now you might say Marsh what is the point of this we could see the title of the collection just by typing collection so here we get the string representation of a collection but imagine we have a special field here we want to show on this page let me show you how to do this first I'm going to remove this extra underscore so I'm going to define a method by this name Define collection title with two parameters self and product because we're rendering a a bunch of products so we're going to get a product and return product. collection. tile now back to the browser refresh let's hide this so our collection column is here beautiful but let's look at our queries one more time now this time we have 17 queries so we have 10 extra queries because for each product Jango is sending an extra query to the database to read the collection of that product so in the previous section where we talked about query sets you learn that we have a method called select related for eager loading or pre-loading the related fields now here we have a special attribute for the same purpose that is called list select related we set this to the list of fields we want to eagar load in this case collection now back to the browser let's look at our queries now we're down to seven queries beautiful so this is how we can load related objects on the list page now as your exercise I want you to set up the order page where we can see our orders and their customers so spend a couple minutes on this then come back see my solution all right let me show you what I have done so I created the order admin class to show three columns ID Place ad and customer and also in the customer class I overwrote the St method so here we're returning an F string for for combining the first name with the last name I also implemented a metal class for setting the default ordering of our customers so now anywhere we have a list of customers our customers will be sorted by their first name followed by their last name with this now we have a new page called orders and over here we can see all the orders the date and time that were placed and their customer [Music] sometimes we need to overwrite the base query set used for rendering a list page for example here in the list of collections let's say we want to add a new column to show the number of products in each collection so back to our admin module this is how we registering The Collection model currently we're not specifying an admin model so here we need to create a new class called collection admin which should inherit from admin. model admin and we should decorate this class with admin. register now here we set list display to title and products count now our collections don't have a field called products count so we need to treat this like a computed field so we Define a new method called products count with two parameters self and collection and here we return collection. products count but again our collection op objects don't have a field by this name so this is where we need to overwrite the query set on this page and annotate our collections with the number of their products so every model admin has a method called get query set which we can overwrite so here we have a couple of Errors because the generated code includes type annotations and these classes are not imported on the top so here we have two choices if you're on a Mac you can press command and period or if you're on Windows you can press control and period to import this class on the top alternatively if you don't care about type annotations you can just remove this okay so this is the get query set method with the default implementation so we're going to the base class and calling the get query set now we don't want to return this query set immediately we want to annotate it with products count now here we're going to use the count object for counting the number of products so let's press press enter to automatically import this good as the argument we're going to pass product okay now back to the page refresh and here we can see the number of products in each collection beautiful but look this column is not sortable because Django doesn't know what field to use for sorting this column so to solve this problem we need to decorate this method with admin. display and here we said order in to the name of the field that should be used for sorting in this case products count now refresh and now we can sort our collections by the number of their products [Music] beautiful all right now let's see how we can add links here so when we click on these links we can see the products in each collection so back to the products count method instead of returning a number we should return a string containing an HTML link now to generate an HTML link we should import a utility function on the top so on the top from Jango that utils HTML we should import the format HTML function now let me show you a cool shortcut under the Go menu look at the shortcut for the back command is control and hyphen so if you press control and hyphen we jump back to where we were that's pretty handy so here we're going to call format HTML and give it a format string that this is where we need to type a bit of HTML code in HTML we can represent a link using the anchor element with two tags the opening and the closing tag now in between these tags we can type the link text in this case I want to show the number of product so here we type a pair of braces and we're going to replace the braces with the number of products so we're going to pass this expression as the second argument to the format HTML function okay now for the actual link we go to the opening tag and set the HTF attribute to a string like this for now let's just send our users to google.com Okay and then return this value Let's test our implementation up to this point so refresh we get these links beautiful let's click on a link we go to Google now let's see how we can send our users to the products page so here's a products page look at the URL that is admin SL store SL product we don't want to hardcode this URL in our code because this URL can potentially change in the future so we should ask Jango to give us the URL of this page and to do that we have to import another utility function so back to the code from Django the URLs we're going to import the reverse function now let's go back to our method here we're going to call the reverse function and give it a special argument we type admin colon now here we need to type the name of our app followed by the model followed by the page so what app are we working on it's the store app what is the Target Model it's the product model because we want to send the user to the product list page right now what is the target page it's called change list so this list of products is called change list okay now let's test our implementation up to this point so we call the reverse function get the URL and replace Google with it so here we type another P Braes and because this is the first placeholder as the second argument to this function we should pass the URL okay now back to the browser let's go to our Collections and click on one these links great we go to the list of products but there is no filter applied here to apply a filter we need to append a quer string to the URL so we type a question mark followed by collection double uncore ID and a value okay so we need to add this part dynamically so back to the code after the call to the reverse function we're going to add a question mark that indicates the beginning of a query string now because we're going to type a long string I would prefer to wrap this expression in parenthesis so we can break it down into multiple lines so look we have reverse on one line then on the next line we have plus question mark and then plus that this is where we need to generate the query string parameters and for that we're going to use another utility function so on the top from Jango utils HTML module we're going to import the URL en code function okay now back to everyware we're going to call this function and give it a dictionary because a query string can contain multiple key value pairs so that's why we use a dictionary here now the key we're going to add is collection Dore ID and the value is collection which is this collection that we get in this method so that is collection. ID now this returns a number we should convert to a string so we wrap it with a string function okay that's pretty much all we have to do so let's test our implementation back to the collections page let's look at the beauty collection now we only see the products in the beauty collection let's look at another collection like cleaning okay beautiful now here's your exercise go to the customer page and add a new column for viewing the orders of each [Music] customer all right let's see how we can add searching to the customer page so back to the customer admin class we're going to set search fields to the list of fields we want to use for searching like first name and last name now I prefer to sort these attributes because this makes our code more readable so I'm going to move list per page up and the rest looks good all right now back to the browser refresh we get this beautiful search box so if you search for cat we see anyone who has cat in their first or last name okay now what if you search for M look at the first customer adult Mr it doesn't make sense to see adult Mr here because when we search for M we expect to see people whose first or last name start with M so back to the code here we need to use one of our lookup types remember we talked about lookup types in the previous section so after our field we type two underscores followed by a lookup type like starts with and similarly over here okay now back to the browser refresh this time we don't see any customers because this search is case sensitive so if we change this to an uppercase M now our search works so to solve this problem we need to use I starts with i is short for insensitive okay and one more time here now refresh our search works if we change the uppercase M to a lowercase M our search still works beautiful so this is all about searching next we're going to talk about [Music] filtering all right let's see how we can Implement filtering on the the products page so let's say we want to filter our products by their collection and last update so back to the product admin class here we should set a new attribute called list filter to the list of fields we want to use for filtering so collection and last update now take a look good so I'm going to collapse the left panel great now look on the right side we have this beautiful filtering panel where we can select a collection and now we only see the products in that collection very powerful also down below we have filtering by last update so we have any date today past 7even days this month and this year so we got all these capabilities by writing only one line of code imagine if you wanted to code all of this by hand that would take you a long time right now we can also create our own custom filters so let's say we want to add a filter here to see only products with low inventory so back to the admin module here we should create a new class called inventory filter we could call it anything doesn't really matter but this class should extend admin. simple list filter now here we should set a couple of attributes one of them is title and this title will appear over here after buy so I'm going to set that to inventory and the second attribute is parameter name this parameter name will be used in the query string so when we selected this colle collection you can see in our query string we have a parameter called collection ID so here we can set parameter name to inventory or anything we want now there are two methods we need to implement here one of them is lookups and with this method we can specify what items should appear here so once again we have a couple errors because of type annotations if you don't care about them you can just remove them so I'm going to remove them so we have less code on the screen so we can see things clearly now here we're going to return a list of topples so each topple represents one of the filters here okay so here's our topple in each topple we should have two values the first value is the actual value we use for filtering this can be anything here I'm going to use less than 10 the second value is a human readable description so we can say low and low will appear over here okay so this is our first item we could add as many items as we want but I'm going to stick to one filter here so this is the first method the second method is query set and this is where we implement the filtering logic so once again I'm going to remove type annotations all right now in this method we're going to write some logic like this so if self. value this Returns the selected filter if this equals less than 10 which is the value that we defined over here so as a best practice we should store this in a variable where we can reference multiple times but I'm going to leave that for now so we don't get distracted so if the user has selected this filter then we're going to take this query set and call the filter method on it now look we don't have intelligence here because python doesn't know the type of this object so this is the benefit of using type annotations if it decorated this parameter with it type which is query set now look when we type dot we can see all methods of the query set class okay so here we're going to call the filter method and get products with inventory less than 10 and of course we should return the new query set so here's our custom filter now to use it we simply type the name of the class in this list so here we say inventory filter take a look so here's our new filter by inventory this is the title that we set in our class now if you select low we only see the products with low [Music] inventory all right let's talk about defining custom actions so every list page comes with a delete action for deleting multiple objects in one go but we can also extend this list and register our own custom actions for example let's say we want to define a custom action for clearing the inventory of a bunch of products in one go so we want to set their inventory to zero let me show you how to implement this so back to the product admin class here we're going to define a new method called clear inventory and of course we could call it anything but here we need three parameters self request which represents the current HTTP request and query set which contains the objects the user has selected now we should decorate this method with admin. action and set the description to the text we want to appear in the dropdown list so clear inventory now in this method we can do anything we want for updating objects so we can take this query set and call this update method and here we set inventory to zero so this will immediately update the database and then return the number of updated records so we can get that value and store it in a variable like updated count now to show a message to the user we call self. message user so every model admin contains this method for showing a message to the user so we call this method and give it two arguments the first argument is the request object that we get here the second argument is the message we want to show to the user so here I'm going to use an F string and say updated count products were successfully updated okay so we defined a custom action now we go to the top over here where we set the attributes of this class we set actions to the list of actions we want to show to the user in this case clear inventory so we pass the name of the method as a string okay now back to our page now look we have a new action here clear inventory so I'm going to select the first two products and clear their inventory go great so we get this beautiful message saying two products were successfully updated and as you can see the inventory of these products is now low great now here we can also show error messages so when calling the message user method we can specify the type of the message as the third argument so first we go to the top and from Django cont we import the messages module now we go back to where wew and pass a third argument here so I'm going to say messages dot now here we should have different type of messages so we have error we have debug info success and so on so I'm going to show an error message once again let's select a couple of products and clear their inventory okay this time we see an error message so this is how we can Define custom [Music] actions so we talked a lot about customizing the list page now let's see how we can customize the form for adding or updating models so let's add a new product we get this beautiful form that is automatically generated based on the definition of the product model again very very powerful without Django if you used a different framework for every model we would have to create a form like this from scratch and that would be a lot of work so let's see how we can customize this form so back to the product admin class here we can set fields to the list of fields we want to show to the user so if we set this to title and slug now we only see these two Fields but of course this doesn't make sense because our product has a bunch of other required fields that we need to fill out like the unit price and inventory so if we don't show them to the user we cannot create a new product okay now we have another attribute called exclude which is the opposite of fields so with this we can exclude certain Fields like promotions now take a look so the promotions field is no longer here we also have readon Fields read only Fields so if you make the title read only now when we refresh it appears down below and it's read only again it doesn't really make sense here but I want you to know that these options are available to you now let's remove this and refresh so let's talk about the slug field let's say we want to create a new product called brown shoes it would be nice if the slug field was autop populated like this right so let's see how we can implement this back T code here we can set pre-populated fields to a dictionary in this dictionary we can specify how each field in this form can get pre-populated so we can pre-populate this lock field with the title field so here we're passing a list which means we can add multiple Fields here and Jango will combine the value of these fields to prepopulate this slog field okay remove now take a look so refresh as we type brown shoes Jango uses a bit of JavaScript to pre-populate this field but note that if we type something here and then go back to update the title the slug field doesn't get changed so it only gets pre-populated if we haven't touched it okay now look at the collection field here we have a drop down list and this makes perfect sense because we have a limited number of collections but if you had hundreds or thousands of collections showing a drop down list would have a couple of issues for St starters it would be a terrible experience for the user because the user would see a drop down list with 100 items and also in terms of performance getting all these objects from the server and rendering them on the web page would have a bit of overhead so let me show you how to convert this to an autocomplete field so back to our code here we can set autocomplete fields to collection now before going back to the browser let's look at our terminal here we get an error saying collection ad must Define search Fields because it's referenced by product admin. autocomplete Fields the reason we see this error is because D Jango doesn't know how to search for collections so we need to set this attribute in the collection admin class so let's go to collection admin okay and here we set search fields to title because we want to search for our collections by their title now refresh take a look so here we have an autocomplete field so we only see 10 Collections and other collections are hidden so we can search for them by typing a search query here so every time we type a character Django is going to send a request to the server to get the collections whose titles match our search phras okay so these are a few ways to customize this form but again if you want to find all the options available to you just search for D Jango model admin on this page we talked about this earlier look at model admin options on this page you can find all possible ways to customize the lists and forms now here's your exercise look at the page for adding a new order on this form we have two Fields payment status and customer but our order class also has another field called placed at why do you think that field is not visible here pause the video and think about it for a few seconds here's the answer let's look at the order class so here's the definition of the place at field as we can see we have marked this field to get autop populated by Jango so if you remove this argument and refresh this page now we get two fields for setting the date and time we can select today's date and the current time or we can go to a calendar and select a particular date again very very powerful we're getting all these features with very little code so let's put this back over here and refresh all right so look at the customer field currently we have a drop-down list which is a very bad experience because this drop- down list is populated with a thousand customers so this is a great opportunity to use an autocomplete field so pause the video and convert this field to an autocomplete field [Music] let's talk about data validation so by default our forms include basic data validation Logic for example because we have defined all these fields as required meaning none of them are nullable if we try to save this form without supplying any values we get all these validation errors beautiful we don't have to write a single line of code to get this functionality right now let's go through a few validation scenarios and see how we can customize the logic here first I'm going to make the description field nullable so back to the product class let's make the description field nullable okay now we need to create a migration and apply to our database so python manage.py make migrations good and then migrate beautiful so let's go back to the browser and refresh this page one more time so look we still get this error saying this field is required even though we made the description field notable why is this happening well back to our description field this keyword argument only applies to our database so to make this field optional in the admin interface we should set another argument called blank to true now let's refresh okay this time we don't get a validation error for the description field great now what about unit price well here we cannot type any characters like ABC because the type of this field is decimal and this input field only accepts numbers so that's a great starting point but what if we set the price to Zer or negative 1 the validation error goes away look we don't get a validation error but this is not a valid value for the unit price so back to our models module on the top from Django core. validators we're going to import main value validator in this module we have a bunch of built-in validators if you want to see all these buil-in validators just Google Jango validators on this page you can see all these built-in validators so we have Rex validator for validating using regular Expressions we have email validator that is automatically applied to our email fields we also have URL validator that is applied to URL fields and so on now down below you can also see we have max value validator mean value max length mean length and so on so here we imported main value validator now back to everywhere here's the unit price field let's break this down into multiple lines so our code is cleaner now we set validators to a list of validator objects so here we're going to create a main value validator object and in the Constructor we're going to specify the minimum value let's say one now optionally we can also specify a message if you want to I'm going to stick to the default message so back to the browser let's refresh all right now we get this default message saying ensure this value is greater than or equal to one great now similarly we could apply the same validation logic to the inventory field but I'm going to leave it to you as an exercise the only thing I'm going to do here is making promotions optional because when adding a product I don't necessarily want to apply a promotion to it so by to the product class here's the promotions field so we should set blank to true now refresh the promotions field is no longer required [Music] great So currently we can create a new order but there is no way to manage the items for an order so let me show you how we can edit them right here so back to our code here's our order admin class before this class I'm going to create a new class called order item inline now this class should inherit from admin. either tabular inline or stacked inline we're going to talk about the differences in a minute so let's go with tabular inline now in this class we set the model to models. order item okay now here in order admin we should introduce this class as an inline so first I want to sort these attributes and over here we're going to set in lines to order item inline okay now take a look so below the order we have this beautiful table where we can manage the items for this order so our product is currently a drop- down list we want to convert this to an autocomplete field so back to our code this inline class we have over here indirectly inherits from model admin so all the attributes you have learned about so far also apply here so here we're going to set autocomplete fields to product now take a look so now we have an autocomplete field beautiful so we can select the product set is quantity as well as the unit price we can delete them now the reason you see three rows here is because these are three placeholders if you don't want to see these placeholders just set extra to zero now take a look so by default we don't have any rows here we can add any order item set it right here we can also set the minimum and maximum number of items for our order so over here we set minum to one and maximum to 10 now take a look so we should always specify one item otherwise we're going to get a validation error so this is a tabular in line what we have here is a table of rows and columns now in contrast we can replace this with stacked inline and now each item will be represented as a separate form so this is how we can edit children using [Music] inlines now let's talk about using generic relationships so here in our product form we want to add a new section down here for managing the tags so back to our code first we should go to the tags app and here in the admin module we should register our tag model so we can manage our tags in the admin interface so here we say admin. site. register now we need to import the tag class on the top so from the models module in the current folder we're going to import the tag class and then register it right here now refresh let's go to the homepage of the admin interface take a look we have the tags app and over here we can manage all of our tags now currently we cannot see the label of each tag so we need to overwrite the St method in the tag class and that's really easy so let's go to the tag class and overwrite the St method now here we're going to return self. label okay now refresh beautiful so we can manage our tags Now using inlines we can manage the tags in our product form so let's open up the admin module in the store app here's our product admin class before this class we should create an inline class for managing a tag so we create a class called tag inline now this class should inherit from a special class called generic tabular inline so on the top from Django cont trip content types. admin we should import generic we can either import generic stacked inline or generic tabular inline I'm going to go with generic tabular in line because that's going to give us a kind of more compact interface okay now let's go back to where we were so this class should inherit generic tabular inline so this is a tabular inline but we use this with our generic objects so in this class we should set model to tagged item okay now that we have this inline class we're going to go to our product admin and set inlines to tag inline and of course I prefer to sort these so let's move this right here good let's see what we get up to this point so back to the homepage now in the store app we add a new product okay so over here we have a form for adding tags now just like before we have a drop- down list which does doesn't really make sense for tags because we can have hundreds or thousands of tags so we're going to convert this to an autocomplete field which is pretty easy here the tag inline class we set autocomplete fields to tag now take a look all right we should have an error so here in the terminal Jango is complaining that model admin must Define search Fields because is referenced by tag in line. autocomplete Fields so once again Jango doesn't know how to search for tags so let's go back to the admin module in the tags app now here we need to create an admin class for our tag model so class tag admin should inherit from admin. modeladmin and in this class we set search fields to label now we should decorate this with admin. register good so refresh okay the error is gone now we have an autocomplete field for looking up tax beautiful so this is how we can use generic relationships in our forms but there is a problem in our implementation and we're going to talk about that in the next [Music] lesson all right the last thing we're going to talk about in this section is extending plugable apps so here in the admin module of the store app look on the first line we're importing the tagged item class so that means our store app has a dependency to the tax app so we cannot build and deploy it independently remember earlier in the course I told you that ideally our apps should be self-contained so we can easily plug them into new projects so here we need to decouple the store app from the tags app but how it's actually very easy so here are the tags and store apps you want to build and deploy them independently of each other so none of these apps should know anything about each other okay now in this project we're going to create a new app which we can call store custom and this is the customization of the store app which knows about both these apps this is very specific to our project so we're not going to deploy this app for others to reuse okay so here in the terminal let's run python manage.py start app store custom good now we have this new app and in this app in the app admin module we're going to combine features from the two plugable apps so from store. admin we're going to import product admin and from tags. model we're going to import the tag item class okay now why do we have an error here that should be models okay good so back to the admin module of the store app let's jump to the tag inline class so so this class should be moved to our new app because this is where we are referencing the tagged item class so cut it from here and paste it right here now I want to import this class on the top so from Jango contri content types. admin we're going to import generic tabular inline great no errors up to this point now we need to create a new product admin which extends the generic product admin that comes with our reusable app and in this new implementation we're going to reference the tag inline class so we create a new class called custom product admin which extends product admin this is the class that comes with our plugable app now over here we set inlines to tag inline as simple as that okay now that we have a new product admin we need to unregister the old one and register the new one so here we say admin. site. unregister product and then we're going to call admin. site. register product with this new custom product admin okay now the final step we need to register this app in the list of installed apps so command and te let's jump to installed apps good now so here's the generic implementation right after we're going to add store custom okay now let's see what happens so refresh looks like we have an error so back to the terminal we have an error saying tag inline is not defined so I forgot to remove this from the old product admin so let's jump to product admin in the store app and over here we're going to remove this line because we implemented this in our custom Store app so delay and that also means on the top we no longer need to import tag item so our store app has no dependency to the tags app and we also don't need to import this generic class so delete good and refresh take a look so here's the product form now we have replaced the admin interface for this app using our custom Store app so that means if we go back to the settings module and remove this new app we see the generic implementation of the product form without the tags so this is the interface we're going to build and deploy independently now anyone can create a new custom app to customize this interface now let's bring this app back beautiful [Music] we have reached the end of this course first and foremost I want to say thank you for allowing me to be your instructor and following along all the way through I hope you have learned a lot and I'm going to see you again in my future courses this course is the first of a series in the next part we'll talk about the advanced Jango Concepts such as building restful apis authentication and authorization logging caching sending emails deployment and more so if you're serious about learning D Jango and want to become a back developer don't miss the next part and if you enjoy this course please support me by telling others about my coding school Cod with.com I really appreciate your support and send you my best wishes once again thank you so much for your support and I hope to see you again in the next part [Music]
2025-07-07 02:24:24,700 - INFO - Transcript is successfully fetched by api.
2025-07-07 02:24:24,761 - INFO - Chunks has been successfully created.
2025-07-07 02:24:24,766 - INFO - Use pytorch device_name: cpu
2025-07-07 02:24:24,766 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-07-07 02:24:24,840 - INFO - Transcript : welcome to the ultimate Django course in this course I'm going to teach you everything you need to know about Jango from the very Basics to more advanced concepts so by the end of this course you'll be able to use Jango to build production grade backends for your web and mobile apps if you have always wanted to learn web development with python you are in the right place we'll use Python and Django to build and deploy the back end for an e-commerce application if you're looking for a comprehensive organized and practical course that takes you from Zero to Hero and prepares you for the job this is the right Django course for you everything you need to know about Django is in one place in the right order so you don't need to jump back and forth between random tutorials I'm msh hamadani and I've taught millions of people how to advance their software engineering skills through my YouTube channel and online school Cod with.com if you're new here be sure to subscribe as we upload new videos all the time now let's jump in and get started [Music] let's talk about what you need to know to take this course for starters you need to know python you need to know the basics of python as well as objectoriented programming Concepts such as classes inheritance polymorphism and so on you should also know the basics of relational databases so you should be familiar with Concepts such as tables columns primary and foreign Keys relationships and so on if you need to refresh the fundamentals I have a couple of beginner level tutorials on my my YouTube channel as well as comprehensive courses on my website codewithmosh docomo that you're the right student for this course now let's talk about how you should take this course first and foremost I want you to watch this entire course all the way from the beginning to the end even if you're familiar with jangle because along the way I will share a lot of tips and tricks and I don't want you to miss out on any of them if you taken any of my other courses you know that I'm not going to waste your time with repetitive or useless stuff so make sure to watch every lesson now while watching each lesson I want you to take notes you can just write down some keywords on a piece of paper if you don't want to write a lot of notes I strongly believe that the act of writing things down will help you remember new things that you learn then after each lesson go through your notes and repeat the same steps I show you in the video this is exactly how I personally learn new things also I've care designed tons of exercises that help you understand and remember the materials so make sure to do all these exercises because the more you practice the better you'll be at Django or coding in general welcome back to the ultimate Jango course in this section we're going to talk about the basics of Django first I will give you a quick introduction to what D Jango is and why it's so popular then we'll talk about the fundamental web development Concepts that every web developer must know next we'll set up our machine for development and create our first Jango project once that project is up and running I will show you two essential techniques for debugging D Jango applications this is going to be a short and sweet introduction to D Jango so let's jump in and get [Music] started so what is D Jango and why is it so popular well Jango is a free and open-source framework for bu building web applications with python it's not the only web framework for python but it's the most popular one because it helps us build a website in less time with fewer lines of code that's why a lot of companies like YouTube Instagram Spotify and Dropbox use D Jango in their text stack now Jango is what we call a batteries included framework which means it comes with a lot of features out of the box so we don't have to code them from scratch for example it gives us an admin interface for managing our data which is a huge timesaver it also has an object relational mapper that abstracts a database so we can query or persist data without writing a lot of SQL code it also comes with an authentication package for identifying users it also has a package for caching data and much much more so since D Jango offers all these amazing features we can focus on our application and its requirements we don't have to reinvent the wheel and code all these features from scratch now once in a while you might come across someone like our popular super star developer John Smith who thinks D Jango is a piece of crap because it's old and Bloated with so many features he used it hated it and then rewrote his entire project with a new shiny framework that is faster well saying a framework is better than Dango because it's faster it's kind of like saying a Ferrari is better than a truck because it's faster what if you want to move something you're not going to use your Ferrari for that right so a white software engineer doesn't pick up a framework merily based on it performance there's so many other things you need to take into account like the maturity of the framework how stable it is from one version to another its learning curve the size of the community and so on D Jango has been around for a long time and it has a huge community so there are tons of Jango packages built by the community that you can reuse in your applications also if you get stuck there's always someone out there to help you if you want hire people there are tons of people to choose from so these are the benefits of having a huge Community around the framework now regarding Jango features yes Jango comes with a lot of features but you don't have to use or even learn all of them because all these features are optional so you can use the features that make sense for your own application so in my opinion debates about the best framework in the world are useless we all like different things and just because someone doesn't like Django it doesn't mean it's bad a lot of companies are using D Jango and are looking for Jango developers here in the US the average salary of ajango developer is just over 100 $177,000 a year so if you like Python and want to get into web development learning Jango is a good investment for your [Music] future so you learned that D Jango is a framework for building web applications with python now let's talk about some of the fundamental concepts you need to understand to build web applications let's say we're going to build an online store and publish it at mh.com now this website is going to have two parts or two applications a front end and a back end the front end is the part that is loaded inside a web browser on a client machine it's the part that the user sees and interacts with the back end is the part that runs on a web server and is responsible for data processing validating business rules and so on now let's imagine that Alice wants to visit our website so she points her browser to mhbay.com this address is also called a URL which is short for uniform resource locator it's basically a way to locate a resource on our internet a resource can be a web page an image a video a PDF and so on so Alice types mosh by.com in her browser and presses enter at this moment a browser sends a request to the web server that hosts our website and says hey Alice wants to see the homepage so the web server should take this request process it and return a response back to the client this data exchange is defined by a protocol called HTTP which is short for hypertext transfer protocol it defines how clients and servers can communicate so this is the big picture as Alice navigates our website for each page her browser sends an HTTP request to the server and receives an HTTP response now as part of building the backend for this website we need to decide how we're going to respond to clients one option is to generate the requested page on the server and return it to the client we use HTML for that HTML is short for hypertext markup language it's a simple language for representing web pages on their content every web page you have seen on our internet is built using HTML so one option is to generate the page on the server and return an HTML document to the client the other option is to return only the data needed on the requested page and have the client generate the page so instead of putting a complete page or a complete HTML document in an HTTP response we only return the data like the list of products now what is the difference well if we push this responsibility to the client we can free up the server so it can serve more clients our application will be more scalable that's why over the past few years this approach has become more trendy and is now considered the industry best practice these days we have tools like react angular and view for generating web pages on the client these are all client side tools that are used by frontend developers in contrast we have server side tools for building back ends D Jango Falls in this category so you should not compare Django with let's say react you may compare Jango with other server site Frameworks like as.net core which is used by C developers Express used by JavaScript developers and so on so if you push the responsibility of generating web pages to the client the server essentially becomes a gateway to the data on the server we can provide endpoints that the client can talk to to get or save various pieces of data for example we can provide one endpoint to get the list of products and another endpoint to get the list of orders someone has placed now all these endpoints together represent the interface that clients use to talk to the server in technical terms we say the server provides an API or an application programming interface to clients this API is essentially like the buttons on a remote control all these buttons together represent the interface or the API we use to interact with the TV Okay so so in this course our Focus will be on using D Jango to build an API for our online store client applications can use this API to get or save the data how these clients are built is irrelevant here we can use react angular or even plain JavaScript that falls under frontend development which has nothing to do with Jango once we build this API if you know frontend development you can always build a client app that talks to this API all right now that you understand the big picture we ready to set up our development environment and that's what we will do [Music] next all right let's make sure you have the right setup before we start coding the first thing I want you to do is upgrade your python to the latest version so head over to python.org download and download the latest version of python for your operating system once you do that then open up your terminal window and run python D- version to make sure you have upgraded your python correctly now here we see Python 2.7 because on Mac we have two different versions of python running side by side we have the old python 2 which is now deprecated and we also have Python 3 so if you're using a Mac you have to run python 3-- version but if you're on Windows or Linux you have to run python D- version okay so here I'm using python 3.9.5 great next we're going to use pip or pip 3 if you're on Mac to install pip NV I talked about pipn in my python course it's basically a dependency management tool for installing our application dependencies in Virtual environments this way our application dependencies will not clash with other applications dependencies okay so let's go ahead and install this now in this course just like my other courses I'm going to use Visual Studio code or vs code as my editor it's just my personal Al preference if you have a preference for a different tool like pie charm that's totally fine having said that I highly encourage you to use vs code because throughout the course I'm going to show you a lot of shortcuts and time-saving tips that will not apply to your editor in case you don't have vs code you can get it from code. visual studio.com now once you run it I want you to go to the extensions panel over here and search for python make sure to install this extension because with this we get features such as intelligence debugging code navigation and so [Music] on all right now that we have installed all the necessary tools let's create our first triango project so here in the terminal window I'm going to go to my desktop you can go anywhere on your machine it doesn't really matter now we're going to create a directory called store Front that is the n project next we go inside this directory and run pipm install Jango so we're going to install Jango using pipm inside a virtual environment now let's go ahead all right now take a look so over here you can see that pipm has created a virtual environment for this project down below you can see the path to this virtual environment if you're on Windows you're going to see something like C drive backs slash whatever now if you're on on Mac and using zshell which is this fancy colorful terminal window we can hold down the command key and click on this path to go into it otherwise you can just copy this and use the CD command to go inside this directory now take a look so here's our virtual environment in this environment we have this bin folder that contains a bunch of binaries for example we have python pip Jango admin and so on so back to the terminal pipm created a virtual environment and installed D Jango inside that environment but in addition to this pipm also created two files in this directory pip file and pip file. loock so I'm going to open this directory using visual studio code by running code period if this doesn't work on your machine just drag and drop this folder onto vs code all right so here's our pip file this is like package.json for JavaScript projects so in this file we can see that our project needs this particular version of python and under packages you can see the packages that our application is dependent upon so here we have D Jango equals asterisk that means any version or the latest version of Jango if we installed a particular version of Jango we would see that version here now back to the terminal window we need to activate this virtual environment so we'll use the python interpreter inside this virtual environment not the one that is installed globally on this machine to do that we're going to run pipm shell okay next we're going to use D Jango admin to start a new project D Jango admin is a utility that comes with Django so if you run it we can see all these commands that we can use to work with Django project as we go through the course you'll become familiar with this commands in this lesson we're going to use Jango admin start project and we're going to call that project store front now back to vs code Jango admin created this directory for our project and inside this directory it created another directory that is the core of our application in this directory we have this files which I'm going to talk about in a second but before I do so let's get rid of this redundancy because we have three storefront directories the top one is the one that we created earlier in the terminal and then we have these two other d director is one for the project one for the core of our application so I'm going to delete this project directory now we're back in the previous step so we don't have a Jango project at this stage now back in the terminal let's bring up the last command but type a period at the end this tells D Jango to use the current directory as the project directory so D Jango is not going to create an additional directory for our project okay now take a look so we have this directory which is the core of our application in this directory we have this init file which defines this directory as a package we have the settings module where we Define our application settings we have the URLs module where we Define the URLs of our application and these two other modules that are used for deployment for now don't worry about them now next to this directory we have this file manage.py this is a wrapper around D Jango admin so going forward instead of D Jango admin we're going to use manage.py the reason for this is that manage.py takes the settings of this project into account let me show you what I mean so now that we have a project we want to run a web server so another command that jangle admin provides is run server however if you run jangle admin run server we get an error saying requested setting debot but sending are not configured because at this point Jango admin doesn't know about the settings of our project so now that we have a project instead of Jango admin we're going to run python manage.py now look we see the same commands that Jango admin provides so here we can say python manage.py run server now optionally we can supply a port number if we don't Supply this by default this will use port 8000 but you might have another application running on Port 8,000 in that case you might want to explicitly set the port number so let's go ahead with that now we don't get an error because manage the P knows about the settings of our project now here we get this warning saying you have 18 unapplied migrations don't worry about this yet we'll talk about this soon so if you look over here you can see that D Jango has started a development server at this address so we can copy this and paste it into browser or if you're on a Mac and using zshell you can hold down the command key and click this all right beautiful our first Django project is running successfully so let's move on to the next [Music] lesson so far I've been using a separate terminal window but vs code also has an integrated terminal window that is easier to use but to use that we have to properly configure it to use the python interpreter inside our virtual environment let me show you how to do this so back to our terminal window first we're going to stop the web server by pressing controll and C okay now back in vs code on the top Under The View menu look we have this command pallet the shortcut on Mac is shift command and P now here we're going to search for python interpreter So currently vs code is using this python interpreter that is installed globally on this machine we don't want to use this we want to use the one inside our virtual environment but how can we find the path to our virtual environment very easy so back to the terminal let's run pip andv d-van all right here's the path so let's copy this good now back to vs code we're going to select enter interpreter path then we're going to paste the path and append slash bin slash python at the end if you're on Windows instead of a forward slash you have to use a back slash okay good now in this project we have an extra directory vs code we have a settings file and here we have the pass to python interpretor good with this we can go to the view menu now look we have this integrated terminal the shortcut on Mac is control and back take now vs code automatically activates the virtual environment for this project so here we can run python manage.py run server good so going forward I'm going to use the integrated terminal window here it's easier we can always hide it by pressing control and back take or bring it back we can maximize it move it around and so on Now One Quick tip sometimes when running this command you might get a syntax error saying invalid syntax this happens every now and then when vs code fails to activate the virtual environment for this project to solve this problem all you have to do is open a new terminal window and look vs code executed this command to activate the virtual environment for this project now we can run python manage.py run server great [Music] all right let's talk about apps so every Jango project is essentially a collection of various apps each providing certain functionality just like the apps on your mobile phone each app provides a certain functionality right Jango projects are exactly the same so in this project let's open up the storefront directory and then look at our settings module now we can collapse this panel by pressing command and B on Mac or control and B on Windows okay now in this module we have a bunch of different settings in this lesson we're going to look at the install apps so every Jango project by default includes these apps the first app is the admin app which gives us an admin interface for managing our data then we have the off app which is used for authenticating users then we have content types app which we'll talk about later in the course next we have the sessions app which is kind of Legacy we don't use sessions anymore a session is a temporary memory on the server for managing users data these days when building apis with Django we don't use the sessions app so we can come here and delete this app then we have the messages app which is used for displaying onetime notifications to the user and finally we have the static files app for serving static files like images CSS files and so on so each app provides a certain piece of functionality okay now we can also create our own apps here so let's save this file now let's open up the terminal window by pressing control and back tick so here's our terminal window where we have our development server running we're going to open a new terminal window okay now let's expand this to clear the window we simply press contrl and L now we're going to run python manage.py start app and we're going to call this app playground okay so let's close this window and open up the Explorer panel all right look here's our new app which is represented using a folder with a special structure so every Jango app has the exact same structure here we have the migrations folder for generating database tables we'll talk about that later in the course we have a complete section about this topic we have the admin module where we Define how the admin interface for this app is going to look like next we have the apps module where we configure this app app so the name is misleading I don't know why Jango developers decided to call this module apps it would be better if it was called config that's just my two sets next we have the models module where we Define the model classes for this app we use model classes to pull out data from the database and present to the user next we have the tests module where we write our unit tests and finally we have the views module which we'll talk about in the next lesson again the name is misleading this is not the view that you think if you come from a frontend develop background so what we have here is essentially a request Handler it's not a view it doesn't have a template or HTML again we'll talk about that in the next lesson so we created a new app now we need to register this app in the settings module so every time you create a new app you need to register it here in the list of installed apps we simply add the name of the app which is called playground save the changes done in the next lesson we're going to talk about views [Music] all right let's talk about views so earlier you learned that HTTP is a request response protocol so every data exchange involves a request and a response this is where we use views in Django so here in the playground folder let's open up the views module this is where we Define our views or view functions a view function is a function that takes a request and returns a respon response so more accurately it's a request Handler in some Frameworks it's called an action in Jango it's called a view but I don't agree with this name because from an architectural point of view a view is often associated with something that the user sees that part in Jango is called a template and we'll talk about that later in this section now that aside let's create our first view function so we're going to create a function we can call it anything we want I'm going to call it say hello now this function should take a request object and return a response so first on the top from Jango that HTTP package we're going to import the HTTP response class now in this function we can do anything we want in a real word scenario we can pull data from a database we can transform data we can send emails and so on for now let's just return a simple response so we're going to return an instance of the HTTP response class and in this object in this response you want to add a simple string so let's say hello world okay so this is our first view or first view function now we need to map this View to a URL so when we get a request at that URL this function will be called and that's what we're going to do [Music] next all right here's our Django project now let's say whenever we send send a request to playground /hello our view function should be called and return hello world to the user let's see how we can do that so back to our project here in the playground folder we're going to add a new file called urls.py we could call it anything the name doesn't matter but by convention we call it URLs now in this module we're going to map our URLs to our view functions so on the top we're going to import the pass function from Django the URLs so from Jango URLs we're going to import the path function now don't worry about memorizing any of these as you practice all of this will become second nature also from the current folder we should import the views module so we can reference our view function now we should Define a special variable called URL patterns all in lowercase make sure to spell it properly because this is what jangle looks for we should set this to an array of URL pattern object we use the path function to create a URL pattern object so if we call this function look at the signature of this function this function has a bunch of parameters the first one is Route which is a string the notation you see here is called type annotation which is kind of a new feature in Python with type annotation we can see the type of parameters and the return value of a function so the first parameter is Route which is a string the second parameter is view which is a function that returns HTTP response object object now look over here this notation represents the return type of this function so the pth function returns a URL pattern object so I'm going to call this function and give it two arguments a route or a URL which is playground SL hello and a view function so from the views module we're going to get say hello note that I'm not calling this function so here we don't have a pair of parenthesis we're just passing a reference to this function okay so what we have here is called a URL conf module that basically means URL configuration so every app can have its own URL configuration but now we need to import this URL configuration into the main URL configuration for this project where is it you saw it earlier so back to the Explorer panel here in the storefront folder we have another URLs module up here we have a bunch of comments about how we should use this module now look over here if you want to include another URL conf there are two things we need to do first we need to import the include function from jangle URLs so over here we have from Jango URLs we're going to import the include function next we need to add a URL to URL patterns so in this module we also have a URL patterns object which is an array of URL patterns object so here we're going to call Path give it a route and then we use the include function to reference the URL configuration module in this app so we're going to call Path and say any URLs that start with playground followed by forward slash should be routed to our playground app so this is where we use the include function now the include function requires a parameter that is a string here we're going to reference playground. URLs so if we send a request to playground /hello D Jango knows that all requests that start with playground should be handled by this app so it's going to chop off the first part of this URL and pass the rest to the URL configuration module in the playground app so back to this URLs module we no longer need to add playground here because we added it once in in the main URL configuration module so we simply add hello followed by a forward slash I forgot to add that we always end our routes with a forward slash so let's save the changes now whenever we change our code D Jango web server automatically restores itself so let's open up the terminal window make sure we don't have any arrows good so back to the browser let's send a request to this endpoint great we see Hello World on the screen so so this is how we can map URLs to view functions next we're going to talk about [Music] templates so I told you that views in Django are not really views they're more like request handlers or actions what we often call a view in other Frameworks is called a template in Django so let's see how we can use a template to return HTML content to the client so here in the playground app we're going to add a new folder called templates and in this folder we're going to add a new file called hello.html and of course we could call it anything here we can write some HTML markup for example we can type H1 and press tab to add an H1 heading and say hello world now don't worry if you don't know HTML we're not going to use it in this course I just want to show you how Jango templates work so let's save the changes now back to our view function instead of returning a plain HTTP response we're going to use the render function to render a template and return HTML markup to the client so let's remove this line and call the render function now look at the return type of this function it returns an HTTP response object so here we're going to return the response now let's remove the brackets and type them again so we can see the function signature the first parameter here is a request object and the type of this is HTTP request so we're going to pass this request object right here now the second parameter that's the name of our template which is a string so here I'm going to say hello. HTML the other parameters are optional so don't worry about them at this point now save the changes let's make sure our project works up to this point so back in the browser refresh beautiful now we see HTML content we can verify it by right clicking on this page and looking at the page source so look we returning HTML content great now let's make this a bit more interesting so back to our template instead of hello world we can dynamically render some value so back to review function let's type a comma to see the next parameter that is a context object and the type of of this is a mapping of string to any that means we can pass any mapping object that Maps a string value to any other type of object so here we can pass a dictionary so let's pass a dictionary the type of the key should be a string so we can call that name and we're going to set that to a value like let's say MH now back to our template instead of hello world we can render the name that we passed here so we type two pairs of braces and in between we type the name of the key save refresh beautiful now in this template we can also write some logic so we can type an if statement so we type braces and in between them we add two percentage signs in between them we can write an if statement so we can say if name is set we can render it here otherwise we can render hello world and of course we need an end if Clause as well so and if now this syntax is kind of ugly but the good thing about D Jango is that it's modular so you can easily replace D jango's default template Engine with your preferred template engine but once again we don't really use templates in D Jango projects that often these days there are special cases for them but for the most part we use Django to build apis that return data not HTML content so I just included this lesson so you know what templates are and how they work we're not going to spend any more time on templates for now unless we encounter a situation where we really need [Music] them let's talk about debugging Jango applications in vs code this is particularly useful if our application doesn't produce the right result and we want to run it line by line and see where exactly something has gone wrong so click on this icon to open the run and debug panel now the first time you see this message saying we should create a launch. Json file basically we need to create a launch profile so vs code knows how to run or debug this application so let's click on this now in this list select Jango all right here's our launch. Json file what you see here is kind of like a dictionary in Python you have a bunch of key value pairs these key value pairs Define a launch profile so vs code knows that to run this application it should use the current python interpreter to run manage.py which exists in our workspace folder and then as an argument it should Pass Run server to it here we can add an additional argument to specify the port so it doesn't clash with Port 88000 which is currently in use okay save the changes we're done with this file so let's close it now if you're curious let me show you where this file exists is added to our project up here inside the vs code folder so here's our launch profile now that we have a launch profile if we go to the run and debug panel we see something else so here we can start our application for debugging but before doing so I want to write some dummy code here in our view function so let's set X to one one and Y to two now I'm going to click on this line to insert a break point when we add a breako vs code will execute every line of code until it hits our breakpoint from that point onward we can execute our code line by line so let's add a breakpoint and then start the application for debugging all right let me collapse this window good so in this new terminal window we have a development server listening on Port 9000 so let's hold down the command key on Mac or control on Windows and click on this link all right here's what we get the homepage of our project is gone because we have registered a custom route that is playground SL hello so we see the homepage only the first time we run our Jango project so let's go to playground SL hello all right our breakpoint is activated and we are on this line now on the left side in the variable section you can see the local variables So currently we have the request object that is the request object that we receive in this function so we can expand it and inspect its various attributes we don't want to do that for now so let's close this we want to execute our code line by line so here we have a bunch of functions the first one is step over and the shortcut for this is F10 with this we can step step over the current line so if we press F10 this line gets executed and now we on the second line now look over here in the list of local variables we have X and its value is one this is very useful when debugging applications so if something is not calculated properly we can inspect it here now most of the time you can see your local variables here but if not you can always add them in the watch window so before recording this video I was practicing that's you see X here let me select this and delete it so in your watch section you're not going to have any variables to add one we simply click on this and then type the name of our variable okay so this is how we can step over various lines so we can press F10 again and again so this function is executed and now back in the browser we see the final result now let's do something more interesting so back to our code let's close the terminal window so we have more space I'm going to define a function here called calculate and here we're going to set X to one y to two and return X just some dummy code now over here we're going to call the calculate function okay now save the changes back in the browser let's refresh so our view function gets C now we are right here now this time instead of stepping over this line we want to step step into it because if you step over this line we're not going to see what happened in the calculate function we see the final result so we see X is set to one and we can verify that over here as well but sometimes we need to step into a function to see what is happening there maybe there is a bug inside the calculate function so let's restart the debugger okay I'm going to close this back in the browser let's refresh this page okay we're back to this line now this time we going to step into this function so look over here this is the icon for stepping into a function and as you can see the shortcut is f11 so if you press f11 we go inside the calculate function now we can execute each line using F10 or step over and see where something has gone wrong now let's imagine this calculate function is a large function with a lot of code at some point we want to step out of it without having to execute every line of code in this function there's a shortcut for this so look over here that is step out the shortcut is shift and f11 so if you press shift and f11 we get back to the previous function so this is how we can debug Jango applications in vs code now once we're done it's always a good practice to remove these break points otherwise they get in the way so as you debug your applications you place various break points in different parts of your code and you will hit them all the time so always remove your breakpoints once you're done with them so we're done with this debugging session now we can disconnect by pressing shift and F5 or clicking on this icon all right now one last step before we finish this lesson on the top Under The Run menu look we have a command called run without debugging the shortcut on Mac is control and F5 so if we use this shortcut we can start our application without having to run python manage.py run server let me show you what I mean so first let's bring up our terminal window here's the second terminal window that we use for debugging I'm going to delete this here's the first terminal window where we started our application by running python manage.py run server so let's press contrl and C to stop the server good I'm also going to delete this terminal window let's imagine we just open this project in vs code day one now to run this application without debugging we can press controll and F5 now our application has started on Port 9000 so we can go to this address and then hit playground /hello so this is how we can run our application without debugging just remember that if you use this command your breakpoints are not going to get hit so if you want to debug your applications you should start it in the debug [Music] mode there is another way to debug Jango applications using a powerful tool called D Jango debug toolbar so if you go to Google and search for Django debug toolbar you're going to find this page over here you're going to find the installation instructions so I highly encourage you to follow along with me and repeat the same steps so we install this toolbar together so first we have to use pip or pipf to install D Jango debug toolbar so back to vs code I'm going to open up a new terminal window and as you can see vs code used the source command to activate our virtual environment so now let's run pipn install django-debug-toolbar good now back to the documentation the next step is to add debug toolbar in the list of installed apps in our settings module so back to vs code we can press command and P on Mac or control andp on Windows to bring up the search box now we search for our settings module good now in the list of install apps at the end we're going to add debug underline toolbar good now the next step the next step is to add a new URL pattern in our main URL conf module so I'm going to copy this line and back to vs code let's bring up the URLs module we're going to pick the one in the storefront folder okay now we add a comma here and paste that line now here we have a compilation error because debug toolbar is a module that we have to import on the top so if you look at the documentation you can see that over here import debug toolbar so copy this and paste it right here good now back to the documentation the next step is to add a middleware we use middleware to hook into D jango's request response processing so in our settings module we have a setting for middleware we're going to add this line in that file so copy this back to the settings module here we have the install apps right after that you can see the middleware setting so we're going to add that on the top now the final step is to add our IP address in the internal IP setting so for local development we should use 1271 so I'm going to copy this entire setting because by default this doesn't exist in a new Jango project so copy this and you're going to paste it anywhere in this settings file it doesn't really matter okay save so we have completed all the steps now back in the browser if you go to this URL playground /hello we don't see the toolbar it should appear here because the toolbar only appears when we return a proper HTML document if you right click here and look at the page Source you can see that we are not returning a proper HTML document so we don't have the HTML head and body elements so let's open up hello.html now on the top we type HTML press tab now in inside these elements we're going to add a body and then inside the body we're going to add the code that we had earlier so let's move that right here good now we have a proper HTML document of course the head element is missing but it doesn't really matter now back to the browser refresh and here's D Jango debug toar here we have different panels like history we're seeing the URLs we have hit so far we have versions to see the version of Django Python and debug to we're running we have processing time we have our settings we have request headers and so on now my personal favorite panel is the SQL or SQL panel here we can see the queries that are sent to the database so later in the course where we talk about quering the database using D jango's object relational mapper we're going to come back to this panel and see what queries Jango will generate and send to the database so that's it for this lesson we're done with this section in the next section we're going to talk about about building a data model so I will see you in the next section welcome back to another section of the ultimate Django course in this section we're going to talk about models which are used to store and retrieve data we'll start off by quick introduction to data modeling to make sure you know the essential Concepts then we're going to design the data model for an e-commerce application next we're going to talk about organizing our models in apps to improve reusability this is one of the areas that is often misunderstood so I'm going to demystify it once for all and then we'll spend the rest of this section in coding model classes we'll use these classes to store and retrieve data throughout the course so let's jump in and get [Music] started the first step in every Jango project is figuring out the pieces of data we want to store so what entities or concepts do we have in an e-commerce application well for starters we need the concept of a product with attributes like title description price and imager now in a real scenario our product entity might have other attributes it really depends on the requirements of our application for now we just want to keep things simple okay now quite often our products are divided in different categories like shoes beauty products fruits and so on so we need another entity called collection or category with an attribute called title now we need to add a relationship or an association between these entities so we can start from one end and navigate to the other end for example we can get a collection and find all the products in that collection okay now let's assume that in our application a product can belong to one and only one collection and a collection can have multiple products so an asterisk represents many we could also use an N here okay now we have a one to many relationship between collection and product so relationships can be one to one one to many and many to many back to our diagram now over here we can add a label called products and that means when we code these entities or these classes in the collection class we're going to have an attribute called products for now I just want to hide this for Simplicity okay now sometimes we can have multiple relationships or multiple associations between two entities so let's imagine that a collection can optionally have a featured product that is the product whose picture we want to show to the user so we can add a second relationship between these entities now look at this number here 0 to one means a collection can have zero to one product and we're going to call that attribute featured product so once again that means in the collection class we're going to have an attribute called featured product okay now you might ask what about the ID attribute shouldn't every entity have an ID attribute yes but jangu is going to automatically create that for us that's why I haven't shown it here now A little exercise for you grab a piece of paper and identify the other essential entities we need in an e-commerce application just the bare minimum don't go ahead and create a complex diagram like this I don't want this there are only five entities that I want you to identify so spend a couple minutes and identify these entities along with their attributes and relationships then come back see my solution [Music] all right so this is what we ended up with in the previous lesson we have a one too many relationship between Collections and products now don't take this as a hard and fast rule maybe in your application a product can belong to many collections then you're going to have a many to many relationship between products and collections okay so back to our model I'm going to remove the collection from here so we have some free space on the screen now what else do we need here well in every e-commerce application we have the concept of a shopping cart right so we're going to have an editing or a model or a class called cart with an attribute called created at let's assume that we need to know when each card is created so every now and then we can do a clean up and remove cards that are 30 days old I just made this up but in a real scenario you should always design your models based on the requirements of your project they make up your own rules okay now we need a relationship or an ass association between products and carts because a cart can have multiple products and a product might be in different carts so here we have a many to many relationship between products and carts now sometimes the relationship between two entities can have attributes for example if a product is in a shopping cart we need to know how many instances of that product we have in the shopping cart so this relationship itself should have an attribute called quantity so we're going to add a new entity here called cart item now look at the notation I've used to represent this concept I've connected cart item to the relationship using a dashed line that means cart item represents the relationship between these two entities product and cart this is what we call an association class so cart item is an association class okay now there's another way to show this instead of using an association class we can add a relationship between cart and cart item because a cart might contain multiple items and an item belongs to one and only one cart and similarly we can add a relationship between product and cart item because each card item represents a single product and a product might be referenced by many card items so here we have two one too many relationships between these entities now compare this with the association class notation so we can either add a many to many relationship with an association class or two one to many relationships it's a matter of personal preference okay so we're done with the shopping cart but you might ask what about the user or the customer that owns this cart where is that in the diagram well I haven't connected cart with an entity like Customer because we don't want to force people to register and log in before they can add products to their shopping cart okay so there's no relationship between carts and customers so carts are essentially Anonymous anyone can have a cart whether they're Anonymous users or registered customers Okay so so we're done with the cart now let's talk about customers so our customer entity can have attributes like name email username password and so on now for Simplicity I'm only showing name and email here now a customer can have many orders and each order belongs to one and only one customer so we need a one to many relationship between customers and orders now once again the order entity might have multiple attributes for now we just want to know when this order was placed okay now an order can contain multiple products and a product can be in multiple orders so we have a many to many relationship between orders and products and similar to the shopping cart example this relationship itself needs attributes so here we need another entity called order item with an attribute called quantity that's our association class alternatively we could add a relationship between order and order item because each order may contain multiple items and each order item belongs to one and only one order similarly an order item references one and only one product while a given product might be referenced by multiple order items so two one to many relationships so these are the entities that I wanted you to identify but to make this project more interesting I decided to throw in one more enti tag here we have a many to many relationship between products and tags because a product can have many tags and a tag might be referenced by different products we'll come back to this anti in the next [Music] lesson so I told you that a Django project contains one or more apps and just like the apps on your phone each app in a Django project provides a specific piece of functionality so that means each app is going to have its own data model so in this lesson we're going to look at a few different ways to organize our entities in different apps one way is to have a single app called the store and drop all of our entities here now we can bundle and distribute this app for a pip and this way anyone can install this app in their project and get all these models and the functionality around them so next time we're working on an e-commerce project we don't have to rewrite the same functionality over and over we simply install this app in our project and write extra code for customization great but there's a problem here as this application grows and gets more complex it gets bloated with too many things like too many models too many views and other stuff this is what we call a monolith like a large heavy piece of stone so at some point our application might become hard to understand hard to maintain and hard to reuse it becomes like one of those remote controls with too many buttons when designing these apps we want to follow the unix's philosophy so each app should do one thing and do it well so here's another solution we can break down this project into four small apps the products app which represents a product catalog so here we're going to have three entities product collection and tag then we're going to have the customers app for managing customers we're going to have the shopping cart app for adding the shopping cart functionality and the orders app for adding the ordering functionality not bad right well this is actually a poor way of breaking down this project for a number of reasons look at the coupling or dependency between these apps the orders app is dependent on the shopping cart app which is dependent on the products app so next time we're working on an e-commerce project we'll have to install all these apps one by one first we have to install the products app followed by the shopping cart app the customers app and the orders app ideally each app should be self-contained so we can easily drop it into a new project the other problem is that if we publish a new version of the products app that might cause a breaking change in the shopping card and subsequently orders apps so anyone using these apps have to upgrade all these apps together together again more and more work also it doesn't really make sense to have the shopping cart functionality without having a product catalog right why would we ever want to add the shopping cart functionality to a project without a product catalog so shopping cart functionality and product catalog always go together by the same token why would we ever want to add the shopping cart functionality to a project without the ability to place an order just to allow people to add something to their shopping cart then what again it doesn't really make sense so these concepts are highly related and should be bundled together if we separate them we increase coupling between apps and we end up with the problems I just talked about so doesn't mean we have to go back to the monolithic design no there is a middle ground here look at the tag entity the ability to tag products is optional we don't necessarily need it in every e-commerce application in fact we might need it in other types of applications like a blog or video platform and so on so so tagging is not specific to products or an e-commerce application it's a separate piece of functionality so I'm going to move the tag entity to a separate app called Tags and here we're going to have another entity called tagged item which represents an item that is tagged it can be a product an article a video and so on it's an abstract concept now with this separation each app is self-contained and provides a specific piece of functionality so we can use either or both of them them in a new project depending on what we're going to build plus we have zero coupling between these apps so we can independently change and deploy them without affecting other apps this is the proper way to break down this project into multiple apps so here's the takeaway if our app boundary is so large we'll end up with a monolith that gets bloated and becomes hard to reuse on the other hand if our app boundaries are so small and fine grained we'll end up with a lot of coupling between them a good design is one with minimal coupling and high cohesion meaning High Focus so each app is focused on a specific piece of functionality and includes everything needed to fulfill that piece of functionality okay so back to vs code we're going to create two new apps so we run python manage.py start app the first app is store and the second one is tags okay now as I told you before every time we create a new app we should add it in the list of installed apps so let's close this window and go to our settings module here's the list of install apps I'm going to add those apps right here so store and tags all right we're done with this step starting from the next lesson we're going to create the model classes for these [Music] apps all right in this lesson we're going to create our first model class so let's go to the store app and open the models module now on the top we have an import statement from D Jango DB which is a package we importing the models module in this module we have a bunch of useful classes that you're going to learn about as we go through this section so over here we're going to create our first model class so we Define a new class called Product and have it inherit the model class in Jango that class is defined in the models module so models. model now here we need to define the fields of this class What fields do we need here well every product needs a title so we set title to then we go to the models module now here we need to choose a fi type so let's take a break here now here on Google let's search for Jango fi types okay here's the model filled reference we're going to get back to this page over and over so on the right side over here you can see all the built-in field types for example we have Boolean field for storing Boolean values we have charfield for storing a sequence of characters or more accurately short or mediumsized strings we have date field datetime field decimal field and so on so as we go through this section you're going to become familiar with this field types so back to our code we want the title to be an instance of the chart field class now all these fi types have a bunch of options so back to our documentation on the top look over here field options these options are common to all field types for example using null we can determine if a field is nullable or not we also have DB index with this we can create a database index on this field we can also set the default value and so on so all these options are available to all fi types now some field types depending on their type have extra options so let's scroll down and find the CH field okay now read over here charfield has two extra arguments we have max length which is required and DB colation which is optional so using max length we can specify the maximum number of characters we can store in this field so here we're going to set max length to let's say 255 characters so this is our first buil now in the next section where we talk about migrations you will see that we can generate our database tables based on the definition of this model so then we're going to have a table called Product and in that table we're going to have a column called title and the type of that column is going to be varar of 255 for now let's not worry about this so that's our first fail what else do we need here we need a description that description can be a long text so instead of a chart field we're going to use a a text field okay the text field doesn't have any required arguments so here we don't have to set the max length Okay what else next we need to add the price field for this I'm going to use decimal field always use decimal field for monetary values we also have float field but floats have rounding issues so for storing monitary values we should always use decimal field now decimal field if you look at the documentation has two required arguments so as an example let's say the maximum price with support in this system is going to be 999999 I'm just making this up so how many digits do we have here six digits how many digits do we have after the decimal point two digits we need to specify these values as arguments here so max digits equals 6 and decimal places equals 2 these two arguments are always required for decimal Fields okay now let's remove the comment another field is inventory we can set this to an integer field we also have positive integer we have small integer big integer and so on and the last field I'm going to Define here is last update let's say every time we update this product you want to store the current daytime here so we're going to set this to models. daytime field and optionally we can set auto underline now to true that means every time we update a product object Jango automatically stores the current datetime in this field we also have Auto Now underline ad with this only the first time we create a product object D Jango stores the current daytime here okay so we don't want this we're done with the definition of the product class now A little exercise for you I want you to create the customer class with this bus first name last name email which should be unique phone and birth date which should be nullable so spend a couple minutes on this and then come back to my solution all right here's my implementation of the customer class so first and last name fields these are both CH Fields with a maximum length of 255 characters next we have email which is an instance of the email field and here I've said unique to true so we don't end up with duplicate emails next we have phone which is also a CH field with a max length of 255 characters and finally we have birth date which is an instance of date field and here I've said null to true so this field is nullable now for birth date I've used a date field not a daytime field because we don't care about the time someone was born okay now you might be curious why we don't have an ID field in any of these classes because as I said earlier Jango creates it for us automatically so every an or every model class is going to have an ID field that is going to be a primary key but what if we don't want to have an ID field what if in this product class we need a field called SKU and this is going to be our primary key so we can set this to let's say a CH field with a max length of let's say 10 characters now here we can set primary key to True with this D Jango is not going to create an ID field and make it the primary key so SKU is going to be primary key okay so since we don't need this field for now I'm going to remove it good so this is how we create model classes next we're going to talk about Choice [Music] Fields sometimes we need to limit the list of values that can be stored in a field for example here in our customer class let's define a new field called membership and set it to models the chartfield with a max length of one now let's imagine in this field we can have one of these three values we can have B that is short for bronze or s for silver or G for gold how can we implement this well let's go back to our documentation earlier I told you that all fi types share these options one of these options is choices and we use this to specify the possible values for a field so what we need to pass here is a sequence consisting of a durables of exactly two items now I know this is a mouthful let's look at a real example so over here we have an array of top holes where each top hole includes two values the first value is the actual value we're storing in the database and the second value is a human readable name so back to our customer class here I'm going to define a new attribute called membership underline choices I'm using uppercase letters here to indicate that this is a fixed list of values we shouldn't mess with it okay so we're going to set this to an array in this array we're going to add three topples here's the first topple for the value I'm going to use B that is for bronze and for human readable name I'm going to use bronze now let's duplicate this a couple times and change this to S and silver and finally G and gold now that we have this array we can go to our membership field and set choices to membership choices okay like this now we can also set the default value so we can set default to let's say B that is for bronze now this works but there is a tiny problem in our implementation if tomorrow we decide to change B to something else then there are two places we have to modify here's one place and here's the other place so the best practice is to Define these values separately so here we can Define another attribute called membership underline bronze we set it to B so this is where we store the actual value and now we reference that in multiple places so here we use membership underl bronze and also we're sending the default value we use membership underline bronze okay now for consistency we should also Define separate attributes for S and G I'm going to pause the video and do this on my own all right here's the end result we have three attributes membership bronze silver and gold and we have used them here now you might be wondering why we need the human readable name well later when we talk about the admin interface you will see that this human readable name will be used in a drop- down list to populate this field we'll talk about that later in the course now A little exercise for you I want you to create the order class with two Fields placed at and payment status place at should be a daytime field and it should be autop populated at the time we create an order object payment status should be a chart fi with these values so P for pending C for complete and F for fail spell a couple minutes on this then come back see my solution all right here's my implementation of the order class so first we have our constants which are payment status pending complete failed and choices and then we have our fields which are place at which is a daytime field and here I've said Auto now add to true so the first time we create an order D Jango automatically populates this field next we have payment status which is a CH field with a max length of one I've set choices to our area of choices and the default value to payment status [Music] pending so you have learned how to create model classes now let's see how we can Implement a onetoone relationship between two models so here in the models module let's define a new class called address and assume that every customer should have one and only one address and each address should belong to one and only one customer so here we have a onetoone relationship between customers and addresses right now let's add a couple of fields here like Street which is going to a CH field with a max length of 255 characters and city with the same definition now as you probably know a database relationship has two ends a parent and a child the parent should exist before we can store the child right I've got a question for you in this relationship which class or which entity is the parent it's the customer because we say the customer has an address so the customer should exist before we can can create an address so here in the child class or the child entity we need to specify the parent so we add a new field called customer and set it to models. one:1 field now this field has a couple of required arguments the first one is the type of the parent model so here we type customer now the second argument is undelete and with this we specify the delete Behavior what should happen when we delete a customer so if we said undelete to models. Cascade when we delete a customer the associated address will also be deleted this is the Cascade Behavior alternatively if this field accepts null values we can use set null so when we delete the customer or the parent record the child record in this case the address is not going to get deleted it's going to stay in the database and the customer field or the customer column is going to get set to null in this case this field doesn't accept null value so it doesn't make sense to use set null alternatively we can use set default so this field will be set to its default value and one other option we have is protect and with this we can prevent the deletion so if there is a child associated with this parent we cannot delete that parent first we have to delete the child now which value we use really depends on the requirements there is no one siiz fits all in this case I believe we should use Cascade because if we delete a customer the associated address should also be deleted now there is one more argument we need to set here and that is primary key equals true if we don't set this Jango will create another field here called ID so every address is going to have an ID and that means we're going to end up with a one to many relationship between customers and addresses because we can have many addresses with the same customer but if we make this field the primary key we can only have one address for each customer because primary keys don't allow duplicate values right so this is how we can Implement a onetoone relationship between two models now you might be wondering if we should Define the reverse relationship in the customer class in other words do we have to go to the customer class and add a new field called address for the reverse relationship no we don't have to do that because Jango automatically creates this for us so we're done with this lesson next I'm going to show you how to implement a onet to many [Music] relationship now let's assume that a customer can have multiple addresses so we want to change this one toone relationship to one to many relationship how can we do this really easy first we need to change the type of the field to foreign key so we're telling D Jango that customer is a foreign key in this table okay next we need to remove primary key equals true because we want to have multiple addresses for the same customer so we want to allow duplicate values in this column right so remove this option this is how we can define a one to many relationship between two models really easy now it's your turn I want you to create a onet to many relationship between these entities so a collection can have multiple products a customer can have multiple orders an order can have multiple items and a card can have multiple items as well so spend a few minutes on this then come back see my solution all right let's look at my solution so I've defined a new class called collection with a single field called title pretty basic but note that I have defined this class before the product class so we can reference it over here so in the product class we have a new field called collection which is a foreign key and this is where we referencing The Collection class defined earlier now sometimes we cannot arrange our code in such a way that the parent class is further up in those cases we can pass their string just a little tip for you now for the delete Behavior I've used protect so if we accidentally delete a collection we don't end up deleting all the products in that collection okay what else do we have here here in the order class we have a new field called customer which is also a foreign key and for the delete behavior I'm using protect so if we accidentally delete a customer we don't end up deleting orders in fact we should never delete orders from our database because all these orders represent our sales so they should never be deleted okay now once again in this case I had to rearrange my code so the customer class is defined before the order class so we can reference it here now we have a new class called order item with four fields we have order which is a foreign key to order and once again we are using protect here so if you accidentally delete an order we don't end up deleting the order items so if an order has at least one item we will not be able to delete it okay then we have product which is also a foreign key and here we're using protect so if you accidentally delete a product we don't end up deleting the associated order items next we have quantity which I have said to positive small integer field this way we can prevent negative values from getting stored in this field and we also have unit price which is a decimal field now you might be wondering why have defined unit price here don't we have it in the product class yes we do but the price of products can change over time so we should always store the price of a product at the time it was ordered okay what else do we have here we have a new class called cart we could also call it shopping card here we have a single field create an ad which is a daytime field and I've said Auto now add to true so this field gets autop populated when we create a new cart and finally we have a new class called cart item with three Fields cart which is a foreign key to cart and here I've used Cascade so if we delete a cart we don't need it anymore we should delete all the items automatically then we have product which is a foreign key to product and here I've also used Cascade so if you can delete a product meaning if that product has never been ordered before then that product should be removed from all the existing shopping carts as well that's why I've used Cascade here and finally we have quantity which is again a positive small iner [Music] field all right let's talk about many to many relationships so I'm going to introduce a new class called promotion and Define a many to many relationship between promotions and products so a product can have different promotions and a promotion can apply to different products so let's define a new class called promotion which is a new model now here we're going to have Fields like description which is going to be a CH field with a max length of 255 characters we're also going to have discount which is going to be a float field we can also have start date end date and so on now we can Define the relationship in either of these classes and as I said earlier D Jango will automatically create the reverse relationship now in this particular case it makes more sense to define the relationship in the product class because we might have a product that we're showing to the user and at the same time we want to show all the promotions that apply to that product so I'm going to go to the product class and over here I'm going to define a new field called promotions so we use a plural name here because we might have multiple promotions now we're going to set this to models do many to many field and just like before we need to specify the name of the target model which is promotion now with this implementation Jango is going to create the reverse relationship in the promotion class so in this class we're going to have a field called Product underline set that returns all the products that a part particular promotion is applied to if you don't like this name you can always change it so in our product class where we Define our many to many field over here we can supply a keyword argument related name if we set this to products D Jango will use this name as the name of the field in the promotion class so instead of product set we're going to have product just remember if you change the default convention in Django it's best to change it consistently everywhere otherwise in some classes you're going to have a field like products and in some other classes you're going to have a field like product online set and this makes your code really ugly so in this implementation I'm not going to use related name I'm going to stick to the default convention okay so this is how we Define a manyo man relationship between two models [Music] earlier I told you that sometimes we can have multiple relationships between two models so here we have two relationships between collection and product now out of the two you have only implemented the one to many relationship now as part of implementing the other relationship we're going to face a situation called a circular dependency which is something we should avoid a circular dependency happens when two classes depend on each other at the same time so the product class is going to be dependent on the collection class and at the same time the collection class is going to be dependent on the product class so let me show you how to handle this situation so back in the code here in the product class we have this field called collection which is a foreign key to the collection class so here we have a dependency from the product class towards the collection class now to implement the other relationship we have to go to the collection class and add a new field here called featured underlined prod product which is going to be foreign key to the product class now here we're going to set UND delete to well if you delete a product and that product happens to be the featured product for a collection here we want to set this field to null so I'm going to set this to models. set null and that means we should make this field nullable so here we pass another keyword argument null equals true now look over here we have an error saying product is not defined we are seeing this error because the product class is defined after the collection class now this is where we have a circular dependency so in the product class we have a dependency to the collection class and that's why we Define The Collection class before the product class however because of the circular dependency now the collection class also needs to be dependent on the product class which is not possible to solve this problem we need to wrap this in quotes and pass a string here so this solves our problem however this introduces a new kind of problem if tomorrow we decide to rename this product class to something else this string is not going to get updated let me show you so we put the cursor here press F to to rename product to something else let's say product one now look this string is not updated so use this technique only if you have to okay now let's rename this back to product good save the changes now let's open up the terminal window we have an error saying reverse query name for Featured product clashes with field name collection what is going on here let me explain so in the collection class we have a field called featured product right now as you know jangle is going to automatically create the reverse relationship for us so that means in the product class we're going to have a field called collection which represents the other end of the relationship and this is exactly where the problem happens because in the product class we already have a field called collection so Jango cannot create the reverse relationship because of the name Clash so here we have two choices one solution is to set related name to something other than collection or if we don't care about the reverse relationship we can simply Type A plus sign here this tells D Jango not to create that reverse relationship now I save the changes look at the terminal the error is gone and our server has started at this address [Music] Perfect all right let's talk about generic relationships so I told you that we want to design the tags app such that we can reuse it in any projects anywhere we want to have the ability to tag items that's why we have two two models in this app tag which represents an actual tag and tagged item which represents a tag applied to a particular item which can be a product a video an article literally anything so let's see how we can Implement these models so back to vs code let's go to the tags app and open the models module here we're going to Define two classes the first one is tag and we're going to give it a field called label which is going to be a Char field with a max length of 255 nothing new so far now the second class is the one that is interesting tagged item Now using this class we can find out what tag is applied to what object now to determine the tag we simply add a fi here tag which is going to be a foreign key to the tag class now here we need to set UND delete to what well if we delete a tag we want to remove it from all the associated objects right so here we're going to Cascade again nothing new so far now the interesting part is identifying the object that this tag is applied to here's the poor way of implementing this if we add a field called Product then we need to set this to a foreign key to product now with this implementation we have to import the product class on the the top and that means the tags app is going to be dependent on the store app so look if we say from store. Models import product now the tags app is dependent on the store app we don't want to do this what if tomorrow we want to tag articles or videos these are completely different apps so the tags app should know nothing about these models so delete this line what we need here is a generic way to identify an object to do that we need two pieces of information the first one is the type of an object which can be let's say product video article whatever the second attribute we need is the idea of that object using these two pieces of information we can identify any objects in our application or in database terms we can identify any record in any tables because using the type we can find the table and using the ID we can find the record right so instead of using a concrete model like product we should use an abstract model called content type which comes with Jango so earlier we talked about the list of installed apps in the settings module let's go there real quick so over here we have an app called content types using content types we can create generic relationships between our models so content type is a model that represents the type of an object in our application now we need to import this on the top so from Django the contri which is short for contribution then we're going to go to content types app then we're going to go to the models module and import the content type class so this is a model just like any model that we have in our application but this model is specifically made for allowing generic relationships now back to the business so we're going to have a foreign key to content type and that means instead of product we should call this field content type now for undelete once again we're going to use Cascade because if that object type is removed we want to remove all the associated tags so models. Cascade now the second attribute we need here is the idea of the target object so we can call this field object underline ID and this has to be a positive fi because we're assuming that every table is going to have a primary key and all primary keys are positive integers now what if in a particular table our primary key is not an integer let's say it's a GID well this solution is not going to work so this is the limitation of the solution so now with these two pieces of information we can identify any object in our application now one last thing when quering data we might want to get the actual object that this tag is applied to like like the actual product to do that we're going to add another field here called content underline object and of course we could call it anything that we should set this to a particular type of field called generic foreign key now we need to import this on the top so I'm going to duplicate this line and change models to fields and content type to generic foreign key Now using this field content object we can read the actual object that a particular tag is applied to so let's quickly recap to define a generic relationship there are three fields we need to Define content type object ID and content object now A little exercise for you I want you to create an app called likes for tracking the objects that a user likes so in this app we're going to have a model called liked item and using an instance of this model we can tell what user likes what object so here we need a field called user which is going to be a foreign key to the user class defined in this module Jango cont trip. o. models so o is another app that is automatically installed in every Jango project and using this app we can authenticate and authorize users so go ahead and spend a couple minutes on this then come back see my solution all right here's my solution we have a new app called likes and in this app we have a new model called liked item now here we have four fields we have user which is a foreign key to the user class defined in Django cont trip. o. models now here for UND delete I've used Cascade so if a user is deleted you want all the objects that the user has liked to be deleted as well okay then we have three Fields exactly like before no changes so we have content type for identifying the type of an object that the user likes we have object ID for refereshing that particular object and content object for reading an actual object so that was pretty simple let's move on to the next lesson welcome back to another section of the ultimate Django course in this section we'll use Jango migrations to generate our database schema based off of the models we built in the previous section so we'll talk about making migrations running them reversing them in case make mistakes we'll also talk about populating our database so by the end of the section we'll have a production grade database that we can query in the next section so let's jump in and get [Music] started Jango supports many database Management Systems the most basic one that is set up by default is sqlite which is a very basic lightweight database engine you should use it only for development or for low traffic websites nothing serious for any serious projects you should use postgress MySQL Mario DB or Oracle these database engines are officially supported by Jango but there are also thirdparty libraries for other database engines like Microsoft SQL Server now out of all these options postgress and MySQL are the two most common database backends used in the Jango community in this section we'll start off by having a quick look at SQL light and then shortly after we'll switch to mySQL for the rest of the course now don't worry if you have never worked with mySQL we're not going to use any fancy MySQL features all you have to do is install MySQL now if you don't want to use MySQL and prefer a different database engine like postgress that's totally fine with me but I'm not going to cover connecting the project to postgress you need to research it on your own so next we're going to talk about creating migrations [Music] all right let's talk about migrations in D Jango we use migrations to create or update our database tables based off of the models we have in our project so in Jango projects we're not going to manually create or modify our database tables we're going to let Jango take care of that let me show you how this works so open up a new terminal window and run python manage.py make migrations make sure to spell it properly all right let's see what's going on here D Jango looked at all the installed apps in our project and for each app it created a new migration file so here we have the migrations for the store app we have a new file at this location store SL migration SL here's the name of the file so every migration file has a sequence number like 1 2 3 4 and a descriptive name if you're on a Mac you can hold down the command or if you're on Windows you can hold down the control key and then click to open this file so let's have a quick look here as you can see this migration file is just a python module so here we have a class called migration with a bunch of operations so here's the first operation for creating a model called cart with two Fields ID which is a big auto field which translates to a big Auto incremented column in a database and as you can see this field is used as a primary key so earlier I told you that we don't have to explicitly Define a primary key for each model because jangu is going to do that for us okay now in the same model we have another field called created at which is a daytime field now similarly we have other operations for creating other models like collection customer and so on now at some point we're going to run these migrations against a database at that point Jango is going to translate this python code into SQL code and run it on top of our database we'll see that soon so here's what I want you to take away as you build new models or modify existing ones you run the make migrations command to generate a new migration let's go through this exercise a couple more times so let me show you a cool trick let's say we want to quickly jump to the product class we can hold down the command key on Mac or control key on Windows and press T this is the go to symbol command you can find it on the top Under The Go menu so here we have go to symbol in workspace and the shortcut is command and T on Mac so if you search for product we can find all symbols that contain the word product a symbol can be a class a function a variable and so on so let's jump to the product class and rename the price field to unit price so here we press f2 to rename this to unit underline price now save the changes back in the terminal window we run make migrations one more time that Jango is asking did you rename product. price to product. unit price yes with did so we type y good now we have a new migration in the store app with this sequence number and this description rename price product unit price if you don't like the description you can always change it so let's go to the Explorer panel here's the store app the mation spoiler now we can simply rename this to rename price to unit price just remember if you rename a file here make sure to update all references to that file in other migration files let me show you what I mean so if you open this migration file over here you can see this migration is dependent on this other migration in the store app so if tomorrow we decide to rename this file from initial to let's say first migration then we'll have to find all references to this file and update them as well okay so now we have any new migration and in this migration we have a different kind of operation instead of a create model operation we have a rename field operation so when we run this migration Jango will go to the product table and rename the price column to unit price okay now back to the terminal window we haven't made any more changes so if you run make migrations one more time D Jango says no changes detected now sometimes you see this message even though you have changed your models why does this happen this happens if you forget to add the app in the list of installed apps so one more time we're going to use our shortcut which is command and team to jump to the installed apps variable okay so over here we have all the apps we have created so far store Tags and likes if likes was missing here Jango wouldn't detect any changes in this app okay now let's go back to the product class and make a different kind of change you want to introduce a new field called slug now a lot of people don't know what a slug is let me show you so here on stack Overflow if you search for question in the address bar you can see the idea of the question and the actual question itself what you see here is called a slug but this slug can only contain letters numbers underscores and hyphens so any other character is going to be replaced or removed for example here we have a space between each word but in the UR L the spaces are replaced by hyphens now the whole point of adding a slug here is to make it easier for search engines to find our Conta so this is a search engine optimization technique now similarly we want to give each product a slug so search engines can easily find our product so we're going to set this to models. slug field save the changes back to the terminal let's run make migrations one more time now this time we see a different kind of message saying you're trying to add a non-nullable field slug to product without a default now here we have two options one option is to provide a oneof default value right now the other option is to quate and add a default in our model file let me show you both options so if we type two we can quit now back to our model we can set a default value let's say hyphen the other option is to make this nullable if you make this nullable Jango is not going to complain that this field needs a default value now let's remove this and create the migration one more time so back to the terminal make migrations all right this time I'm going to select the first option so we want to provide a one of default value now Jango is asking what is that default value so we're going to supply a string that contains a hyphen exactly like before all right so Jango created a new migration file with this sequence number let's open this file real quick now in this file we have a new operation for adding a field to an existing model or table so when we run this migration jangu is going to go to the product table and it's going to add a new field called Slug and it's going to populate it with a hyphen so the difference between this option and the previous option is that this default value is not in our model it's only in the migration file it will be used only once okay so this is about migrations now before we finish this lesson let's give this migration file a more descriptive name so because this is our last migration file we don't have any other migrations that are dependent on this file so we can safely rename this file to let's say add slug to product okay so now we have a bunch of migrations in our project next I'm going to show you how to run these migrations [Music] so now we have a bunch of migrations where each migration describes a set of changes so each migration is like a commit in a version control system like git right now we're going to run these migrations to generate our database schema so here in the terminal we run python manage.py migrate all right so Jango went through all the installed apps and executed all the pending migrations so as you can see we have a migration that comes from the content types app we have another migration that comes from the off app we have a bunch of migrations from the admin app and so on now where is our database well if you look at the Explorer panel over here you can see a file called db. sqlite 3 so this is our SQL light database which is a very lightweight database you should only use for development or very small websites now here in vs code I have an extension called sqlite which we can use for opening a sqlite database so if you don't have this extension go ahead and install it there are also other tools like there is a tool called DB browser for sqlite which you can get from SQ light browser. org it's a free but crappy application but it gets the job done we're going to use it only in this lesson because from the next lesson we're going to switch to mySQL okay so install this extension and then bring up the command pallet so on the top you can go to view menu and open the command pallet the shortcut is shift command and P on Mac or shift control p on windows so we open this up search for sqlite open database you can see our database in the list so let's select it good now let's open the Explorer panel and collapse our project we have a new note here called SQL light EXP Explorer now here you can see our database as well as all the tables we have in this database so we have a bunch of tables that belong to the O app these tables are used for authenticating and authorizing users we'll talk about them later in the course then we have three tables that are used by D Jango to do his job again we'll look at this soon we have one table that belongs to our likes app we have a bunch of tables that belong to the store app and as you can see all these tables are named using singular names so we have address cart cart item collection and so on if you don't like singular names you can always change them I'll show you how to do that later in this section we also have a couple of tables that belong to the tags app okay now let's open the migrations table so we right click on it and select show table this table keeps track of the migrations that have been applied to this database so the first migration comes from the content types app here's the name of the migration and here you can see the date and time this migration was applied So currently we have 22 migrations applied to this database and that means if we go back to the terminal and run the migrate command one more time nothing is going to happen because all the migrations we have in this project have been executed so using this table Jango can tell which migrations have been applied and which migrations haven't so this is how we can run our migrations now we have another command called SQL migrate and using this command we can see the actual SQL code that is sent to our database at runtime for example if you want to see the SQL code for the third migration in the store app here we type the name of our app and the sequence number of our migration file so this is the actual SQL statement that D Jango will send to our database and this will be dependent on the database backend we use So currently we're using sqlite later when we switch to mySQL or a different back end the SQL code that will be generated will be different okay now one last thing before I finish this lesson is it SQL or SQL well this language was originally called SQL which is short for Structured English query language but SQL was a trademark of an aircraft company so IBM didn't want to get into legal issues that's why it changed the language to SQL now some people prefer to call it SQL other people call itq SQL so don't hate me for calling it SQL that's just my paraphrase now what about MySQL isn't that my SQL well according to mySQL team they prefer their tool to be called MySQL but they don't mind it if you call it my SQL so I personally call this tool MySQL but I prefer to refer to the language as SQL and now a little exercise for you add the zip fi to the address class create a migration run it and then inspect the migrations table so you see the whole work flow in [Music] action sometimes you need more control over the database schema for example you may want to overwrite the name of a table or you may want to add an index to a couple of columns and so on let me show you how to do this so let's press command and T on Mac or control and T on Windows and jump to our customer class okay now in this class we're going to Define metadata so inside this class class after our Fields we're going to add an inner class called meta the name of this class is important so this is where we Define metadata about this model now here we have a bunch of options if you simply search for Jango model metadata on this page you can find all the available options here so we have DB underline table for specifying the table name we can also set the ordering that will be used by by default when cing objects we can also create indexes and so on so let's look at a couple of examples so back to our code here I'm going to set DB underline table to store underline customers so here I'm using a plural name now even though this is possible it's not something that I personally recommend because if you want to use plural names then you would have to set the table name for every model in your project I find it unnecessary the whole reason we use Jango is because it comes with a lot of conventions that we can follow to quickly build applications if you want to constantly override these conventions and customize things maybe Jango is not the right tool for you that's just my personal opinion so here we can set the table name we can also create indexes so we set indexes to an array of index objects to create an index object we can use models. index like here we set a keyword argument called fields we set it to an array of strings so we can add an index on last name and first name columns now if you're not familiar with indexes basically we use them to speed up our queries I cover them in detail in my SQL course in case you want to learn more so we have made a couple changes now it's time for what it's time for creating a migration so save the changes back to the terminal we run python manage.py make migrations great so Jango created a new migration file but it couldn't come up with a good name for this file because we have mixed two different types of operations here on the one hand we're creating an index on the other hand we renaming a table so it's best if you don't mix up different types of operations write a bit of code to solve a specific problem create a migration and then move on to the next problem okay so I'm going to leave this file as is now let's run this migration so python manage.py migrate good now let's open up our database one more time so here in the Explorer panel here's our database I'm going to refresh good now look at the name of our table now we have a plural name here but look this is not consistent with other tables that's why I personally think we should stick to the default convention injo so in the next lesson I'm going to show you how to undo the last migration [Music] let's imagine that the migration that we applied in the previous lesson was a mistake so how can we undo it well there are a couple of different ways to do this if you want to selectively undo what we did in the previous lesson we have to create a new migration for example if you want to keep the index but remove the new table name then we have to remove this line save the changes create a new migration and apply it that's the only way however if you want to undo every everything that we did in the previous lesson we can completely revert the last migration let me show you how to do this so let's look at the Explorer panel here in the store app look at the migrations folder this is the last migration that we want to undo migration number four so we want to downgrade the database to the previous migration which is migration number three so we open up a terminal window and type python manage.py migrate we want to migrate the store app to migration number three okay beautiful the last migration is unapplied perfect so now our database is back to the previous date let's verify it so here in SQL light Explorer let's refresh look the customers table is gone and now we have the customer table and also if you look at the migrations table look the last migration which was migration number four in the store app is gone so we properly downgraded our database but the changes are still in the code so if we go to the Explorer panel and look at the migrations folder in the store app look the new migration is still there so if you open up a terminal window and run python manage.py migrate then the last migration which is currently on applied will be applied so to properly revert the last migration we should delete this migration file as well as all the changes we made in our code so let's go to the customer class earlier we added this meta class over here if we keep this code but remove the migration file the next time we create migrations D Jango is going to create a new migration for applying this change to our database we don't want this to happen so the proper way to undo the last migration is delete this code as well as the associated migration file now this is where we use Version Control Systems like git undoing code using a version control system like git is a lot easier than manually removing code from different places so in this project I've been using git and after each lesson I made a commit so let's open up the terminal window and run get log d-1 line this shows the list of commits I've have made so far so here's my last commit customizing database schema and this is where I created method data for the customer model now here we have this head pointer pointing to this commit so to undo this commit we have to make the head point to the previous commit now if this is all new to you don't worry just follow along with me and if you're interested I have a comprehensive course about git on my website so let's press Q here now to reset the head we type G reset D- hard head till the one so we want to move the head pointer one step back so it points to the previous commit okay let's go with that great now all the changes we made in the previous lesson are gone let's verify it so here in the migrations folder we no longer have the force migration and also if we go to the customer class the metadata is gone great now here's a little exercise for you in the customer model rename the first name field to give a name create a migration played and then reverted all right from this lesson we're going to switch to mySQL if you don't like MySQL you can use someone else's SQL that's totally fine with me but let's see how we can install MySQL on your machine if you already have MySQL feel free to move on to the next lesson so open up your browser and head over to myql.com then go to downloads on this page down the bottom you see a link called MySQL Community download now over here we're going to download MySQL Community server now on this page you can select your operating system so I'm on a Mac and then we're going to download the latest version now on this page you don't have to sign up or login there is a link down the bottom so let's just start the download great so open this DMG file or setup wizard on windows so here we have a set set of wizard pretty simple but there is one thing that I want to highlight here let's click on continue and again agree and install now here it's asking for your computer's password this is the password that you use to login so let's type that in now on this page we can select a password for login into MySQL this is different from the password you use to log into your computer so we're going to select use strong password encryption click on next and then here we type the password for the root user of MySQL so I'm going to type a complex password here and then finish now once again it's asking for my computer's password so let's type that in all right the installation was completed successfully great if you have any problems if you get any errors the best way is just to Google bu the error because every computer is different unfortunately I cannot help you resolve the errors on your machine so now that we have MySQL next we're going to talk about GUI tools for connecting to [Music] mySQL all right now we need a tool to connect to mySQL and manage our database there are many different tools out there you can use MySQL workbench which is absolutely free and you can get it from myql.com personally I've used it a lot in the past it gets the job done but quite frankly it's not the best tool out there we also have table plus which is a great tool it's very lightweight and it supports many different database engines so it's not limited to mySQL and of course that comes with a price at the time of recording this video the license for table plus is $59 and by the way I'm not an affiliate for table Plus or any other products these are the tools that I've personally used and introduced in my courses and of course there are many other tools out there you can research and find your favorite tool we also have data grip which is my favorite tool I believe this is the best database tool in the market because it's built by jet Brands which is the same company that has built intell webstorm resharper and many other amazing tools and of course this is the most expensive product you can get a license for $89 for the first year but for the second and third years the price will reduce to $70 and $50 so every year you have to pay to use data grip having said that you can download a trial version and use it for free so if you want to follow along with me you can just download it you don't need to provide a credit card just download it and use it for 30 days so the first time you open it you're going to see this window you're going to evaluate it for free now you can optionally supply your email address and evaluate great so this is our tool we're going to create a new project we can call that stor front now over here you're going to click on the plus ass sign to create a new data source which is going to be MySQL so look there's so many data sources available here you can use Amazon red shift Apache Cassandra and so many other data sources so let's go with mySQL now on this dialog box you can give your connection a name I'm going to accept the default next we're going to specify the host which is Local Host the port by default is 3306 the user should be root and the password should be the password that you set when installing MySQL server so I'm going to type my password here now pay attention to this Arrow we have missing driver files so let's download them good now let's test the connection we get this error saying server returns invalid time zone so let's set the time zone over here let's set the time zone to UTC press Tab and test the connection one more time okay we successfully connected to mySQL server perfect let's click on okay now let's right click on Local Host and go to new query console now in this console window we can type SQL commands so for this course we're going to create a database called storefront we have to create the database first before we can connect with it using Django so even if you're not using data grip let's say if you're using MySQL workbench you need to create create a database called storefront or whatever you want to call it now to execute this we click on this icon good so we have a new database called storefront and we're going to use this in the next [Music] lesson all right the next step is to connect our D Jango project to mySQL and to do that we have to install a package called MySQL client so here in the ter let's run pip and install MySQL client make sure to spell it properly all right the installation was done now before recording this video I was practicing these steps and there I got a weird error when installing my SQL client and quite honestly it took me over an hour to troubleshoot the issue so if you encounter any errors don't give up keep going this is a natural part of software development you have to be patient and determined just Google the ex ER message and I promise you you're going to find something on stackoverflow.com you can also post your questions on our Forum at forum. cwi.cc was corrupt so before going further let's make sure you have installed MySQL properly open a new terminal window and run MySQL so we're going to connect to mySQL using the root user and a password that we're going to supply now so let's type our password all right if you see this that means you have installed MySQL properly if you get an error saying MySQL command not found that means either you didn't install MySQL properly or MySQL is not in your path so then depending on the operating system you're running you need to research how to add MySQL to your path all right so let's stop this by pressing contrl and D good now we installed MySQL client package which great the next step is to change our database settings so we're going to go to our settings module now let me show you a new shortcut under the Go menu look at this command go to symbol in editor the shortcut is shift command and o on Mac so if you press this we can see all the symbols in this file these symbols can be variables classes functions and so on so all these symbols you see here these are various settings in this module so if you type databases we can jump to the database settings straight away so look at our default database engine that is sqlite and here's the name of our sqlite file so the project directory followed by db. sqlite 3 now we're going to change this to mySQL and this is the reason why we installed MySQL client package if you don't install this you cannot change the engine to mySQL okay now we're going to change the name to the name name of our database this is the database that we created in the previous lesson next we're going to set the host to Local Host next we set the user to root and password to the password we used when setting up MySQL now this is purely for development so we're not going to use this in production in production we're not going to include our password as PL text in this file so later in the course where we talk about deployment I'll talk about a different strategy for our database settings for now don't worry about it so let's save the changes now let's go back to our terminal window where we're running our server you should not get any errors at this point so your server should be still up and running if you get any errors then you have to stop here and troubleshoot otherwise you should run the migrations so all the tables are created in our myql database so let's open a new terminal window and run python manage. I migrate okay all the migrations are applied to our database so if you go back to data grip and do a refresh look our storefront database has these tables perfect so hopefully you didn't encounter any issues if you did just be patient and determined don't give up I deal with these issues all the time even with more than 20 years of software development so our database is ready let's move on to the next lesson [Music] sometimes we need full control over generating or updating our database schema this is really easy with Jango all we have to do is create an empty migration and there we can write any arbitrary SQL code let me show you so here in the terminal we type python manage.py make migrations we're going to go in the store app and create an empty migration okay so now we have a new migration migration number four with this name of course we can change the name to something more meaningful now let's open this file in this file we have an empty migration so the operations array is empty now here we can use migrations do run SQL so this is a class that is defined in the migrations module that is imported on the top we can create an instance of this class and here in the Constructor we Supply two two SQL statements the first one is for upgrading our database the second one is for downgrading it so here we can use triple codes in Python to break down our SQL statements into multiple lines so for this demo I'm going to insert a new record into the collection table so store underline collection we want to set the title column and for the value I'm going to use collection one okay now us the using the same Technique we could also create a stor procedure a function a view and so on now as I said this first argument is for upgrading our database so as a best practice we should Supply a second argument even though it's optional because if you fail to do this then you won't be able to revert this migration okay so in the second statement we want to undo what we did earlier so we want to delete the collection with this name so we say delete from store underl collection where title equals collection one now let's save the changes back in the terminal we run python manage.py migrate okay the last migration is applied so let's go to data grip and look at our collection table so double click on this and here's our new collection beautiful now let's unapply the last migration to make sure sure our implementation is right so we want to downgrade the store app to migration number three so here in the terminal we say python manage.py migrate store to migration number three perfect now back to our database let's refresh the collection table our new collection is gone great [Music] all right the last thing we're going to do in this section is populating our database with some dummy data and for that we're going to use a great website called mau.com it's one of my favorite tools so let's say we want to populate our customers table over here we can specify our columns and their type so we have ID which is a number we have first name which is a first name column so this tool will generate a bunch of random first names for us okay similarly we have last name email now instead of gender we're going to use phone so I'm going to change the type of this column to phone now we can optionally specify the format for the phone I'm going to leave it as is next we need to add the birth date column and for that we're going to use a date column and I'm going to change the format to this format four digits for the year followed by two digits for the month and the day now we should also add another field for the membership so if you recall in this column we can have B for bronze s for silver or G for gold so I'm going to change the type of this to regular expression and over here you can type any valid regular Expressions if you're not familiar with regular Expressions you can click on this and see some examples so what I'm going to type here is a pair of parentheses and inside the parenthesis I'm going to type B or and s or G so one of these characters will be used to generate the values for this column okay now over here we can specify the number of rows to generate I think a th000 is good for customers next we can specify the format which can be CSV Json tap delimited SQL and so on I'm going to select CSP for now and preview our data so this is what we're going to get we're going to get a thousand customers with these values now we can download the CSV right away or we can change the format to SQL and over here we specify the name of our table which is going to be store underline customer and then we can download our data so now we have a SQL file we can open this with data GP or MySQL workbench to populate our table so now I'm going to drag and drop this file onto data grab so we have a bunch of insert into statements now on the top make sure the current schema is storefront if it's not just select it over here then select all these rows and execute them all right so now we're done let's open a new query console for the storefront database and find the number of records at the customer table so we type select count of everything from store underline customer so as you can see over here we have a th records in this table beautiful so we have reached the end of this section now I'm going to stop recording and generate data for a bunch of tables we're going to work with in the next section so at the beginning of the next section I will give you a sequel file to populate your database with dummy data okay so that's it for now I hope you learned a lot and I will see you in the next section welcome back to another section of the ultimate Django course in this section you will learn how to query and manipulate data using Jango RM or object relational mapper we'll start off this section by quick overview of Jango RM and the problem it solves then we'll spend the rest of the section on various ways to query and manipulate data we'll cover filtering sorting grouping data and much much more so by the end of this section you'll be able to confidently pull out data or store it in a relational database so let's jump in and get [Music] started let's start off this section by a quick overview of object relational mappers and the problem they try to solve so you know that in relational databases data is stored as rows in tables so when pulling up data from a relational database we need to map these rows into objects in the past we used to do this by hand and this was pretty repetitive and time consuming so we would have to write a SQL query send it to the database read the result and map it to a bunch of objects so for each record you'll have to create a new object and set its attributes this is where an object relational mapper comes into the picture an object relational mapper as the name implies Maps objects to relational records and that frees us from writing a lot of repetitive code so using an object relational mapper we don't have to write SQL code to query or manipulate data we can code in an objectoriented programming language like python the URL will then translate our python code into cql code at runtime so does it mean we never need to write SQL no when dealing with complex problems ORS can produce efficient SQL queries so that's when we need to jump in and write optimize SQL queries by hand but overall orms help us reduce complexity in our code make it more understandable and get more done in less time a good example of that is Jango migrations using these migrations we generated our database tables almost instantly we didn't have to write any SQL code or use a tool like data grip to create our tables add relationships indexes and so on Jango migrations took care of all of that for us so migrations are part of D Jango RM also all the model classes we have created so far inherit from the model class in Django this model class is also part of D Jango RM so as you will see in this section all our model classes inherit the functionality to query or manipulate data from the base model class now once in a while you see someone like our popular John Smith who hates orm and prefers to write every bit of Code by hand because he believes orms are slow what JN is missing here is that he doesn't understand that the more code he writes the more bugs he or someone else has to fix in the future there is an old saying that says the best code is no codee writing and maintaining all that extra code costs time and money someone is paying for it your employer or your client if you were that person you wouldn't want someone else wasting your money writing code that was unnecessary right throughout my career I've seen so many projects over engineered by people like John that never made it into production in my opinion a good software engineer is one who delivers working software in time building the best most optimized solution that will never make it to production is not something to be proud of so use the right tool for the job as I said ORS don't perform well when dealing with complex queries but that doesn't mean we should never use orms we can use them in a lot of cases perhaps for the most part remember the old saying premature optimization is the root of all evils so don't optimize your code unless you have proof that it's slow so that's it for the Chango RM let's move on to the next lesson [Music] all right before we get started let's make sure that we're on the same page I want to make sure that we're both using the exact same code and database so what you see on your machine will be exactly the same as what I'm going to show you in the videos so please follow everything I'm going to show you in this lesson so at the beginning of the course in the first section I give you a zip file that contains all the resources for this course so here we have a folder called code that contains the code for each section now we're going to go to the fifth section and open the starter code so here we have the storefront project let's drag and drop it into vs code okay we get a message saying no python interpreter is selected don't worry about this so let's close this now let's go to the settings module and here in the section for our database settings change the password of MySQL otherwise you're going to get a connection error so use the password for the root user next we open a terminal window and here we're going to run pep and install so this is going to create a new virtual environment and install all of our dependencies there okay great now let's open up data grip or any tool you use for managing your database here we have the storefront database I'm going to delete this database and recreate it from scratch so delete good now we're going to right click on Local Host and open a new query console and here we're going to type create database store Front make sure to spell it properly because this is the name that we use in our project okay so now we have a new database let's verify it great so this database is currently empty the next step is to run all of our migrations to create our tables so back to our project here in the terminal we run python manage.py migrate now we get an error saying invalid syntax because in this window our virtual environment is not activated so back to our project let's activate our virtual environment good now we're going to run python manage.py migrate okay all of our migrations are applied so back to data grip let's refresh all of our tables are created beautiful but these tables are currently empty so the next step is to populate them with data but before doing so I want to close all the sessions I have open in data grip so down the bottom over here we have the services tab I'm going to right click on Local Host and close all sessions now I'm going to right click on storefront and open a new query console now back in the resources folder we have this data folder and here we have a seed file that will populate five of our tables collection product customer order and order item so let's drag and drop this into this window good now on the top we have to select the schema so I'm going to select storefront good now make sure that all these statements are selected So currently all of them are selected if not just press command and a on Mac or control and a on Windows and finally we're going to execute them all in one go good so now five of our tables are populated with data let's look at the customer table all right so here we have 1,000 customers beautiful and now the final step is to start our server so python manage.py run server great so now that we're on the same page let's move on to the next lesson [Music] all right the first thing you need to understand about D Jango RM is the concept of managers and query sets so let's press command and T on Mac or control and T on Windows and jump to our say hello function so we're going to go back to our playground and write all the code here now for this section we don't really need the calculate function so I'm going to delete it and I'm going to delete this line as well now on the top from store. Models we're going to import the product class now every model in Jango has an attribute called objects and this returns a manager object a manager is an interface to the database it's like a remote control with a bunch of buttons that we can use to talk to our database so here we have a bunch of methods for querying or updating data for example we have all for pulling out all the objects in the products table we also have get for getting a single object we have filter for filtering data and so on now most of these methods like the all method return a query set so when we call this method we don't get a list of products we get a query set object a query set is an object that encapsulates a query so at some point Jango is going to evaluate this query set and this is when Jango will generate the right SQL statement to send into our database but when will this happen well under a few scenarios one scenario is when we iterate over a query set so if you write code like for product in query set at this moment Jango will evaluate this query set and get the result from the database so for this demo let's just print the product on the terminal I'll save the changes back in the browser here on the Hello page let's refresh okay now let's open Django debug toolbar so look at the SQL tab over here you can see the actual SQL statements that Jango sent to our database so here we have three queries the first two are just used by Jango to do his job the third query is our select statement to get all the products from the products table so let's expand this this is the exact query that Jango has sent to our database so select ID title Slug and other fields from product table now over here we can click on the select button to see the actual result that is returned from the database so this is very useful when debugging applications now back to our code so one scenario where a query set is evaluated is when we iterate over it another scenario is when we convert it to a list so if we call the list function and give it this query set this query set will be evaluated another scenario is when we access an individual element like the first element or when we slice this so if we use the slice operator and pick the first five elements then the query set will be evaluated so because of this we say query sets are lazy which means they're evaluated at a later point now you might be wondering why query sets are lazy why doesn't Django simply call the database the moment we call the all method well the reason for this this is that we can use Query set methods to build complex queries so over here we can call query set filter to filter the result and this will return a new query set so once again the query is not going to get evaluated at this point so we get a new query set and then right away we can call the filter method to apply a second filter now similarly we can call the order by method to sort the result so by chaining all these methods we'll build a complex query and at some point when we iterate over that query or converted to a list that query will be evaluated now imagine if query sets were not lazy the moment we call the all method the query would be evaluated and this would result in thousands or even millions of objects returned from the database but what if you were only interested in a subset of these products then calling the filter method would filter the objects in memory so would get thousands or millions of objects will store them in memory and throw most of them out so to recap every model has an attribute called objects which returns a manager which is an interface to the database now the manager has a bunch of methods for querying an updating data most of these methods like the all method return a query set now in contrast we have some other methods that return result immediately for example we have the count method which Returns the number of Records in the product table now why don't we get a query set here well because this method returns a number so it doesn't really make sense to do something extra with that number we're not going to apply a filter to it we're not going to sort the result or build a complex query around it so this was the basics of managers and query sets as we go through the Section you will learn more about these query sets next we're going to talk about retrieving objects in detail [Music] all right in this lesson we're going to talk about a few different methods for retrieving objects the first method is the all method that we briefly talked about in the previous lesson this method returns a query set and when this query set gets evaluated we get all the objects in a given table like the product table now sometimes we want to get a single object like the product with the ID one to do that we use the get method and here we pass a lookup parameter like ID equals 1 that we could also use PK that's a special argument so when we use PK D Jango will automatically translate this to the name of the primary key field so our primary key field might be ID it might be code whatever we don't have to remember this is the benefit of using the PK argument okay now unlike the all method the get method returns an actual object not a query set the reason for this is because once we get an object it doesn't really make sense to do anything extra with it we're not going to sort the result we're not going to apply additional filters and so on so here we get a product and that means we should rename this variable to product so always pay great attention to the name of your variables and functions I cannot emphasize this enough because this is one of the main issues I see in a lot of people's code they have a function like get airplane so you see that function and you think you're going to get an airplane but when debugging the application you realize that this function actually returns an orange and that orange ends up getting stored in an object called book don't do this so always pay great attention to the name of your variables okay so let's save this and see what we get back to the browser refresh let's look at the SQL tab so here's our select statement so we're selecting all these columns from the product table and here we have a we Clause to select the product with the ID one now Jango also adds a limit Clause a limit of 21 I'm not entirely sure why they use 21 here to me it looks like a magic number but this is something you can find in Jango source code so for now don't worry about it this limit doesn't really make a difference for us now one thing you need to know about the get method is that if it cannot find this object it will throw an exception so if we set PK to zero look we get an exception of type does not exist so to handle this we have to wrap our code inside a TR catch block so back to the code first we're going to import the type of the exception on the top so from Django core. exceptions we're going to import object does not exist now not that I put all my Jango import statements next to each other so my code is cleaner and more organized compare this with this so we importing something from Django then something from another app then we're going back to Django again this is a little bit ugly so I prefer to put all Jango import statements next to each other now we need to wrap this line inside a tri catch block don't tell me that you don't know what the tri catch block is because I covered it in detail in my python course so here we type try then we type accept followed by the type of exception which is object does not exist also note that you don't have to type the full name of the class so here I'm typing obj d n e and with that we can easily look up this class so we can use abbreviations okay Enter now in a real scenario here we want to show an error to the user but for now don't worry about it so I just want to pass okay now back to the browser refresh this time we didn't get an exception great now this TR catch block looks a little bit ugly we don't want to repeat this pattern over and over in our code so let me show you a better way first I'm going to delete the track catch block good now instead of the get method we can use the filter method now this method returns a query set so right away we can call the first method of the query set now if the query set is empty the first method returns none so in this case product is going to be none we're not going to get an exception check this out so save and refresh great now sometimes we want to check the existence of an object so over here right after the filter method instead of the first method we can call another method called exists so first we apply a filter and then we check to see if there is an object in our query set with this criteria so in this case we're not going to get a product object we get a Boolean value so we should rename this variable to something like exists okay so these are various ways to retrieve objects now in the next lesson we're going to talk about filtering in detail [Music] all right let's talk about filtering data so let's say we want to find all the products that are $22 so here we pass a keyword argument and say unit price equals 20 pretty straightforward now what if you want to find all the products that are more expensive than $20 we cannot use our logical operators here look we have an error because this expression this piece of code is a Boolean expression and returns a Boolean value which can be be true or false but when calling the filter method we need to pass a keyword argument so we need to pass a keyword followed by a value right so to solve this problem after the field name we type two underscores followed by a lookup type so in Jango we have GT which is short for greater than we also have greater than or equal to we have less than less than or equal to so for this demo I'm going to change this to GT equals 20 now we're passing a keyword argument to this method but the name of our keyword is kind of special right save the changes now to find all these lookup types we can search for query set API and on this page look over here where is it it's right here filled lookups so we have various lookup types for numbers strings and dates in this lesson we're going to cover a lot of them and I'm going to leave the rest to you so back to our code another useful Lookout type is range and with this we can find the products whose price is in a given range so over here we cannot pass a single value we need to pass two values a minimum and a maximum so we need to pass a topple with two values let's say 20 and 30 now out of curiosity let's render these products in our template and see what we get so here's the context the object that we're passing to our template in this object in this this dictionary I want to add another key value pair called result we could also call it product that's better and set it to query set so we're passing the query set here now it would be better to convert this to a list so the name of the key reflects the type of the value once again we don't want to get an airplane and store it in a book right so save the changes now let's go to hello.html and after our if block we're going to render an unordered list which represents a list of bullet points so tab inside the unordered list we're going to add a for Loop so we add a pair of braces with a perent and here we say for product in product we don't need a colon here just the expression okay now in our for loop we're going to type a list item for rendering a bullet point and over here we add two braces to render product. type finally we need to close our for Loop so once again braces with Ampersand and here we type end four now back to the browser here are the products whose price is between 20 to $30 great now we can also filter across relationships so let's remove this argument let's say we want to find all the products in collection number one so here we type collection followed by two UND scores so we navigate the relationship and over here here we can type the name of any of the attributes or fields of the collection class so we can say ID equals 1 we can also use our lookup types so we can add two underscores followed by a lookup type like greater than or range and then we can set this to a topple of let's say three values so with this we get all the product in any of these collections okay so these were the lookup types for dealing with numbers now let's look at an example involving a string so I'm going to remove this argument so let's say we want to find the products that contain coffee in their title so over here we can type two underscores and use the contains lookup type we set this to coffee and with this we don't get anything because this lookup type is case sensitive so to perform a case insensitive search we have to use I contains now take a look so here are are all the products that have coffee in their title now we also have starts with ends with as well as their case insensitive variation okay now for dates we have a bunch of lookup types so let's say we want to find all the products that were updated in 2021 so last update double uncore here we can use year and set it to 2021 now take a look so this is what we get so we can extract individual comp components in a date like year month minute second and so on we can also compare this with a date value not something we use that often and the last lookup type I'm going to cover here is checking for null so to get all the products without a description we can say description Dore is null equals true we don't get anything because all of our products have a description okay now it's your turn I've attached a PDF below this video in that PDF you're going to find a bunch of exercises and their Solutions so make sure to do this exercises before moving on to the next lesson where we talk about complex [Music] filtering all right let's see how we can apply multiple filters so let's say we want to find all the products with inventory less than 10 and unit price less than 20 there are a couple of different ways to implement this way one way is to pass multiple keyword arguments here so we can say inventory less than 10 and here we pass a second keyword argument and say unit price less than 20 so let's go back to the browser refresh here are the products we get let's look at our SQL query so here's our select statement as you can see in the work class we have two conditions combined using the and operator okay now there is another way to write the same query instead of passing multiple keyword arguments we can chain the call to filter method so I'm going to remove the second keyword argument so here we have the filter method the filter method returns a query set now we can get that query set and apply a second filter on it so here we can say unit price less than 20 now here we get a new query set which we store and this object and the moment we call the list function this query set will get evaluated so if we go back to the browser and refresh we get the same result as before so let's take a look at our query so exactly like before where we have two conditions combined using the and operator now how can we combine these conditions using the or operator well to do that we have to use Q objects back to our code first we need to import the Q class from Django so from django.db Models import Q so Q is short for query and using this class we can represent a query expression or a piece of code that produces a value okay so using this Q class we can encapsulate a keyword argument so let me remove all this code and start from scratch so we want to combine these conditions using the or operator so here here we say filter now instead of passing a keyword argument here we're going to pass a q object so we create a q object and right here we pass a keyword argument so we say inventory less than 10 so each Q object encapsulates a keyword argument or a query expression now we can combine this Q object with another q object using the bitwise operators so if we use the bitwise or operator this will translate to a log iCal or in a SQL query so here we pass a second Q object and at the second condition unit underline price less than 20 now let's save the changes so here's what we have implemented back to the browser refresh let's look at our query there you go so two conditions combined using the or operator beautiful now back to our code here we can also use the end operator but this syntax is a little bit too verose if you want to combine multiple conditions using the and operator we don't really need Q objects we can simply pass multiple keyword arguments to the filter method just like before like here we can also negate a q object so this will translate to the not operator in SQL so when we execute this we'll get all the products whose inventory is less than 10 and their unit price is not less than 20 okay so this is how we can build complex lookups using Q objects next we're going to talk about referencing Fields using F [Music] objects sometimes when filtering data we need to reference a particular field for example let's say we want to find all the products where their inventory equals their unit price now I know this doesn't really make sense in terms of a business rule but let's just imagine that we want to compare two f so here in the filter method if we say inventory equals unit price we get an error because unit price is not a valid value for this keyword argument where is unit price defined we don't know right now if we convert this to a string that's not going to work either because the inventory field is a number and we cannot compare a number with a string so to solve this problem we need to use an F object so first on the top from the same models module we're going to import the F class now using this class we can reference a particular field that's why it's called f so over here we're going to create an F object and in the Constructor we're going to pass the name of a field okay so let's run this query and see what we get refresh obviously we don't have any products that satisfy this criteria but let's look at our SQL query so over here look at the work Clause we are finding products whose inventory equals their unit price now using F objects we can also reference a field in a related table for example here we can say collection _ ID and with this we'll compare the inventory of a product with the idea of its collection okay so this is how we can reference Fields using F objects pretty simple next we're going to talk about sorting data [Music] all right let's talk about sorting data so here we have this order by method that I briefly mentioned before using this method we can sort the result by one or more fields for example here we can get all the products and sort them by their title in ascending order take a look so save and refresh there you go so all the products are now sorted in alphabetical order beautiful now let's look at the SQL tab so here's our query now with this implementation we have an order by clause for sorting the products by their title in ascending order if you want to change the sort direction we simply add a negative sign here that we can also sort by multiple fields for example we can sort by unit price in ascending order and then by title in descending order so with this implementation we're we're going to sort our products from the cheapest to most expensive ones and if you have multiple products with the exact same price within that group our products are going to be sorted by their title in descending order okay now the order by Method returns a query sell object and one of the methods of query sets is reverse so if we call the reverse method here this will reverse the direction of the sort so with this implementation we're going to sort the products by unit price in descending order and then by title in ascending order now we can also call the order by Method after filtering data because the filter method returns a query set object and orderby is one of the methods of query set objects so here on query set API reference over here you can see all the methods of query set objects so we have filter exclude order by and so on so as an example we can filter all our products to get products in collection one and then sort them by their unit price pretty straightforward now sometimes we want to sort the result and pick only the first object so let's remove the filter method here we're simply sorting our products by their unit price and then we're going to pick the first product so with this implementation we're not going to get a query set because we're accessing an individual element so up to this point when we call the order by Method we get a query set object but the moment we access an individual element in this query set the query set gets evaluated and then we get an actual object so we should rename this variable to product and of course we need to make a change here because we're not going to convert this to a list so instead of products we're going to pass product to our context and of course we need to change our template played to accommodate this but let's not worry about that in this video what I want to show you instead is a convenience method called earliest so another way to rewrite the same query is like this instead of order by we can call the earliest method to sort the result by unit price and get the first object so with the second implementation we're not going to access an individual element because the earliest method returns an object in contrast order bu returns a query set now similarly we have another method called latest which sorts the products by unit price in descending order and then it will return the first object okay so this is all about sorting data next we're going to talk about limiting [Music] results so our product table has a thousand products now quite often we don't want to show all these products to the user in one list we want we want to show pages of products so let's say our page size is five and we want to show the products on the first page to do that we use Python's array slicing syntax so if you type colon 5 here this is going to return the first five objects in this array so more accurately we're going to get objects at these indexes 0 1 2 3 and four so excluding five okay now let's go back to the browser and refresh so here are the first five objects or first five products now let's look at the SQL tab so now in our query we have the limit clause for getting the first five products now to get the products on the second page we can start from five and finish before 10 so this is going to return the product objects at these indexes 5 6 7 8 and N now refresh with this implementation our query is going to have an additional Clause so we have limit five followed by offset five for skipping five [Music] records so you have seen that when we query objects by default all of their fields are read from the database but what if your only interest set in a subset of these fields for example look at our product table our product table has a bunch of fields or columns some of these columns like the description column contains a lot of text what if we don't care about the values in this column what if we only want to return the ID and the title of each product to the user this is where we use the values method so we call the values method and specify the fields we want to query let's say ID and title now refresh we get the same result as before but look at our query with this implementation we're only reading the ID and the title of each product okay now we can also read related fields for example we can go to the collection and read the title field so using the double underscore notation we can access the related field now let me show you something interesting so back to the browser refresh let's look at our query one more time with this implementation now we have an inner join between the product and the collection tables because we reading a related field so this is how we can use the values method now one thing you need to know about this method is that with this method instead of getting a bunch of product instances we get a bunch of dictionary objects let me show you what I mean so let's go to our template instead of rendering product. title let's just render the product object itself so save and refresh see what's happening so each object in the result is a dictionary it's not a product instance so in this dictionary we have three key value pairs we have ID title and collection Dore title now we have another method called values list and with this method we get a bunch of toppos instead of dictionaries so take a look refresh now each object is a topple of three values so here we have the ID followed by the title of the product and the title of the collection now here's your exercise I want you to write a query to select products that have been ordered and sort them by their title now let me give you a hint before we get started so in our database we have this product table that contains all the products in our system but not all products have been ordered so to find the products that have been ordered you need to go to the order item table here we have a column called product ID you need to select all these values all these product IDs and use them as an argument when filtering products so spend a couple minutes on this then come back see my solution all right the solution as we said we should start with the order item table so first we go on the top and import the order item class now we go to order item the object now here we need to select all the product IDs from this table so this is where we use the values or values list method it doesn't really matter so I'm going to go with values because it's shorter so we go to values next we go to the product field and select the ID field now we can also use a single uncore because Jango will automatically create this field for us at runtime so even though we didn't declare a field called product ID on the order item class look we only have product right but angle will automatically create a field called Product underline ID at runtime and essentially this is our foreign key field okay so back to our query we select product idas and store the result in query Set Let's test our implementation up to this point so here in the browser this is what we get a bunch of dictionaries and as you can see we have a lot of duplicates now before I show you how to resolve duplicates let's look at our query so we have a simple query for selecting product ID from the order item table beautiful now to get rid of duplicates here we can use the distinct method so values returns a query set and distinct is another method of query set objects with this let's go back to the browser and refresh we no longer have duplicates beautiful now the last step we want to go to the product table and select all products with these IDs very simple so we're going to say product objects filter ID double uncore in so here I'm using the in lookup type to find all products whose ID is in a given list and we're going to set this to this expression over here where we select product IDs from order item table so cut move it here and we're going to set the query set right here so this is the end result let's see what we get in the browser so refresh we get a bunch of product objects so product with ID 1 four five and so on now let's go to our template and render the title of each product so instead of rendering the product we're going to render product. title and there you go so here's the list of products now the last thing we need to do is sort the list so after we filter our products we're going to call the order by method to sort the products by their title now take a look here's the final result these are the products that have been [Music] ordered so in the last lesson you learned how we can optimize our queries by specifying the fields we want to query now we have another technique called deferring in fields so we have a method called only and with this method we can specify the fields we want to read from the database let's say ID and title now you might be wondering how this method is different from the values method well with the only method we'll get instances of the product class whereas with the values method we'll get dictionary objects okay now let's save the changes back in the browser refresh so we get the same result as before let's look at our SQL tab so here's our query pretty simple we're selecting the ID and title from the product table great so this is how the only method works now you got to be careful with this method if you don't know what you're doing you will end up with a lot of queries sent to the database under the hood let me show you what I mean so let's go to our template and after the title of each product render its price so we had a dollar sign here followed by two braces and here we render product. unit underline price let save back in the browser refresh look what's happening our application is freezing so it's going to take several seconds until we see the result all right here's the result now let's look at our SQL tab how many queries do we have here 1,002 let's see what's going on here so here's our main query where we read the ID and title from the product table now after the main query for each product you have a separate query to read its price so look at this query here you're reading the ID and unit price from the product table where ID equals 1 we have a similar query for every other product in this list so because we have a th products in this list we have a th000 extra queries for reading the price of all these products this is what I was talking about so you have to be careful when using the only method if you don't know what you're doing you'll end up with a lot of extra unnecessary queries now we don't have this problem with the values method because with the values method we get dictionary objects and these dictionary objects don't have this Behavior so if you access a field that doesn't exist in a dictionary that dictionary is not going to issue a query to the database okay now we have another method which is the opposite of the only method and that is called defer with this method we can defer the loading of certain fields to later so let's say our product table has a bunch of columns you're interested in all of them except the description field so we can defer this to later but once again you have to be careful so if somewhere else you have let's say a for Loop and in that Loop you're iterating over the products and rendering the description of each product once again you're going to end up with all those extra queries [Music] sometimes we need to preload a bunch of objects together for example here we're loading all the products now let's go to our template and render the collection of each product next to its title so here we add a hyphen followed by two braces to render product. collection. tile now save back in the browser refresh look we have the same problem as before our application is hanging because Jango is sending a thousand extra queries to the database to read the collection of all these products because when we ask for products D Jango is only going to quate the product table it's not going to query the related tables unless we specifically instructed to do so so here we want to pre-load the products with our collection to do that before we call the all method we call Select related and here we specify the field we want to preload so that field is collection then we call the all method now back to the browser refresh our products loaded instantly now let's look at our SQL tab so here's our query see what's going on here we're selecting all these fields from the product table followed by these three fields from The Collection table and and here we have a join between product and collection so when we use the select related method Jango creates a join between our tables now we can also expand relationships so let's say collection has another field that we want to preload as part of this query so we add two underscores here and then type the name of that other field okay so this is Select related now we have another method called prefetch related so we use select related when the other end of the relationship has one instance like in this case a product has one collection right but we use prefetch related when the other end of the relationship has many objects what is an example of that the promotions of a product so let's go to the product class real quick look each product has one collection but it can have many promotions so to preload the promotions we use the prefetch method so back to our playground I'm going to replace this with prefetch related and the field we want to preload is promotions now before we go back to the browser I'm going to go back to the template and remove the collection of these products otherwise we're going to end up with all those extra queries so save now refresh all right let's look at our SQL tab so now we have two queries here's the first query to read all these columns from the product table now after that we have another query to read the promotions of these products so we reading three columns from the promotion table and we have a join between promotion and product so essentially we have two result sets the first set includes the products the second set includes promotions Jango reads these sets and then populates are objects in memory now we can also combine these two methods so let's say we want to load all the products with their promotions and collection so after the call to preface related we can call Select related to load the collection of each product so both these methods return a query set and that's why we can chain all these methods to build a complex quer okay now the order of these methods doesn't really matter so we can put select related first or less it doesn't really make a difference so now let's save the changes and add the collection back in our template so product. collection. tile now let's test the result great so we see the collection of all these products now in our SQL tab we have two queries the first query is to read all the products and and their collection so here we have a join between product and collection and the second query is to read the promotions of all these products all right here's your exercise I want you to write a query to get the last five orders with their customer and items including the product reference in each order item so pause the video spend a couple minutes on this then come back sa my solution all right here's the solution you want to get a list of orders so we should start with the order class then we go to objects now we want to preload these orders with their customer so this is where we call Select related to preload the customer field now we don't want to show all the orders we want to show the last five orders so first we need to sort them by place that in descending order so the latest orders come first and then we use array slicing syntax to pick the top five orders okay now let's test our implementation up to this point so we store the result in query set and then to keep our code clean we should change the name of this key from products to orders next we go to our template and rename products to orders and product to order now here we can render the idea of each product followed by let's say the first name of the customer so two pairs of braces to render order. customer. first name save now here we can see the last five orders and their customer beautiful let's look at our SQL tab to make sure we don't have any extra queries so we have a single query to read the orders and their customer so we're selecting all these columns from the order table followed by all these columns from the customer table and here we have a join between order and customer tables great so let's move on to the next step now we should preload the items of these orders so here we call prefetch related because each order can have many items now what is the name of the field we're going to query well let's have a quick look at our order class so each order has three Fields place at payment status and customer we don't have a field called items but look at the order item class here we have order which is a foreign key to order so Jango is going to create the reverse relationship for us now what is the name of that relationship that is order item underline set this is the convention that Jango uses to create the reverse relationship if you don't like this name you can set it using the related name argument so over here we can set related name to items so with this implementation the order class is going to have a field called items now I don't want to set this because we're going to end up with inconsistency in our code and I don't want to change the name for every relationship so for the purpose of this exercise let's go with jango's convention so back to our playground we want to prefetch order item underline set so the name of the target class in lowercase followed by an underscore and set okay let's see what we get after this point so refresh our page loaded instantly let's look at the SQL tab we have one extra query to load these order items so we're loading order items for orders in this list so everything is fine so far now the last step is to load the product referenced in each order item so over here where we are prefetching the item we can span the relationship by adding two underscores and then we type the name of the Target Field which is product save now refresh let's look at our query one more time now we have one extra query to read the products referenced in these order items so we reading all the columns from the product table where the idea of the product is in this list and this list is the list of order items we have queried so far so this is how I want you to write code write a little bit of Code test your code make sure everything works before doing a big step with this technique we can prevent a lot of crazy issues down the [Music] road sometimes you want to compute summaries like Max or average price of our products this is where we use the aggregate method so we call product. Objects do Aggregate and here we pass an aggregate object so first on the top we import an aggregate class so from django.db models. aggregate we import one of these classes so we have count we have Max Min average and sum so let's say we want to count our products here we create a count object and specify the field we want to use for counting if we use ID we can count the total number of products because every product has an ID but if we use a different column let's say description and assume that description can be null this will count the number of products that have a description okay so the proper way to count the total number of Records is to use the ID or the primary key field now the aggregate method doesn't return a query set because once we calculate a summary value it doesn't really make sense to do anything extra with it we're not going to add filters or sort data and so on so here we get a dictionary let's call that result and add that to our context object over here so I'm going to add a new key called result and set it to result okay now we go to our template and I cleaned up the code from the previous lesson so we don't have a for Loop for rendering the list of orders so right after our hello word message we can render the result object now let's see what we get refresh so we get a dictionary with one key value pair look at the name of the key it's idore count because we use the ID column for counting objects and as you can see we have a th000 products in this table now we can easily change the name of this key so back to our code over here we can pass a keyword argument we can say count equals this now take a look so the key is us name pretty simple now we can also calculate multiple summaries so in addition to the total number of products we can also calculate the minimum price of our product so we can pass another keyword argument say Min price and set it to Min of unit underlying price so here's what we have we have two keyword arguments count and Min price let's see what we get in the browser so refresh there you go M price is a decimal object with this value now one last thing before we finish this lesson since aggregate is one of the methods of query sets we can apply it wherever we have a query set so we can filter our products and pull out the products in a given collection let's say collection number one and then calculate these summaries over that data set all right so that's all about aggregating objects now I've attached a PDF below this video where you can find a bunch of exercises and their Solutions make sure to do these exercises before moving on to the next [Music] lesson sometimes we want to add additional attributes to our objects while quing them this is where we use the annotate method so we go to customer. objects and call the annotate method now let's say while cing customers we want to give each customer a new field called is new and we want to set it to true so let's get the result and store it in a query set now in our context object I'm going to add a new key value pair called result and set it to list of query set now in our template we are not doing anything in this lesson so let's just focus on the code here now here in the browser refresh we get this error saying query set. annotate received nonone expression what this error is telling us is that we cannot pass a Boolean value over here we need to pass an expression object so in Jango we have this expression class which is the base class for all types of Expressions derivatives of this class are value for representing simple values like a number a Boolean a string we have F which you have seen before using the F class we can reference F field in the same or another table right so an F object is essentially an expression object we also have funk for calling database functions so all these database engines have a bunch of functions for manipulating data to call those functions we use a funk object I'm going to show you that in a second we also have aggregate which is the base class for all aggregate classes so those aggregate classes you learn about like count sum Max and M all these classes derive from the aggregate class okay so let's go through a few examples so back to our code we cannot pass a Boolean value here we need to pass an expression object the simplest expression object is a value object so on the top from Jango db. models we're going to import the value class and now we're going to wrap this value inside a value object so we pass value of true okay now save take a look no more errors let's look at our query so I'm going to execute this query so in the list of customers now we have a new column called is new which is populated by one which is the numeric equivalent of a Boolean true so when Jango read this data it's going to give each customer a new field called is new and it's going to set it to True let's look at another example this time we want to give our customers a new field called new ID and for this demo we want to set this to the same value as the ID field so we need to reference another field in this model to do that first we need to import the f-class from django.db do models and then over here we can reference the ID field now let's run our query one more time so take a look now we have a new column called new ID which is populated with the same value as the primary key now we can also perform computations here so for example we can add one to the ID to generate the new ID now take a look so now the new ID is the original id+ [Music] one all right now let's see how we can call a database function so from the same module we're going to import the font class now we're going to give our customers a new field called full name and this is where we're going to call the concat function of a database engine so pretty much all database engines have this function for concatenating Strings so here we're going to create a funk object and give it a bunch of arguments so we want to specify two Fields here first name and last name how can we reference Fields using F objects so F of first name and F of last name name next we need to give this a keyword argument that specifies the target function so we set function to concat okay now if we run a query first name and last name are going to be concatenated but we also need to add a space in between so we cannot pass a white space here we need to pass an expression object so we need to wrap this inside a value object okay now let's run our query and see what we get so refresh and here's our query take a look so in our query we are selecting all these columns from the product table but we also have a new computed colum using the concat function of MySQL so we're concatenating first name with a space and last name and here in this table we have the full name of each customer great now there is also a shorthand to achieve the same result so back to our codee first we're going to import the concat class from Django so from django.db Models functions we're going to import the concat class and then we're going to use that class instead of a fun class so let me duplicate this query so you can compare them side by side in the second implementation we are not going to create a funk object we're going to create a concat object now here to specify our Fields so first name and last name now note that over here I'm not wrapping this Fields inside an F object so that is the benefit of using the concat class but to add a white space we need to wrap it inside a value object because otherwise Jango thinks this is a column in our table so let's wrap this inside a value object good now unlike the first method we don't have to specify the target function because that is reflected in the class itself so the code is shorter and gives us the exact same result now if you're curious about D Jango database functions just Google Django database functions on this page you can see various functions in different categories for example we have a bunch of functions for working with dates we have mathematical functions we have functions for manipulating text and so on these functions are common across all database engines but different database engines have their own unique functions so to call those functions you have to go back and use a funk [Music] object now let's say we want to see the number of orders each customer has placed so we're going to annotate our customers with a new field called orders count and here we're going to use the count class now look vs code offers to automatically import this class for us so we just press enter and it's imported on the top now let me show you a shortcut we can also import the count class from the models module and with this we can avoid an extra import statement now what is the difference between these two classes nothing the models module simply Imports the count class from the Aggregates module and then re-exports it okay so let's delete this line good so we create a count object now what field should we use to count the number of orders well let's go to our customer class so our customer has these fields but we don't have a field called orders so let's look at the order class here we have customer which is a foreign key right and you know that with this implementation Jango is going to create the reverse relationship for us so here in the customer class we're going to have a field called order under underline set so the singular name of the target class followed by underline set and this is all in lowercase now for some reason that is known to Jango developers we cannot use this name to count the number of orders for each customer let me show you what I mean so back to our playground if we type order underline set here we get an exception look cannot resolve keyword order set into field our choices are address birth date email first name ID last name membership order and phone so the name of the field that we should use for counting is order why honestly I don't know so back to our code let's change this to order and rerun our query great now let's look at our query so now we are selecting all these fields from the customer table and we're also counting the number of orders now look we have a left join between customers and orders because not every customer has an order now if you're not familiar with left joints you really need to look at my SQL course I cover this in detail there and finally we have a group by clause for grouping the number of orders for each customer so if you run this query we can see the number of orders for each customer so let's quickly recap what you have learned so far we talked about the expression class which is the base class for all types of Expressions derivatives of this class are value for representing simple values like a Boolean a number a string we have f for referencing Fields funk for calling database functions aggregate which is the base class for all aggregate classes like count sum and so on now in this lesson we're going to talk about another derivative of the expression class CL called expression wrapper we use this class when building complex Expressions so here's an example let's say we're going to annotate our products and give them a new field called discounted price so here we're going to get the unit price and multiply it by let's say 0.8 now if we run this query we're going to get an exception so take it look so we get this error saying expression contains mix types because we have mixed a decimal field which is our unit price field with a float field which is our 08 number now the area is saying that we must set the output field so to solve this problem first we need to import the expression wrapper class from the same module from the models module now we should wrap this expression inside an expression wrapper object and that's where we specify the type of the output field so so to keep our code clean I would prefer not to wrap this expression right here I would prefer to create an expression wrapper object over here then we move this right here and as the second argument to the Constructor of this class we specify the output field so we need to decide what is the type of the output field for monetary values we should always use a decimal field because float Fields have a rounding issue and are not very accurate so back to our code we set the output field to a decimal field object so make sure to create an object we're not simply passing the name of the class we're creating an object okay now we can store the result in a separate object like discounted price and then use that over here now let's run our query okay no more error so let's see what is sent to the database there you go we have a new computed column which takes the unit price and multiplies it by8 so this is how we can use expression wrapper objects now once again there is a PDF below this video where you can find a bunch of exercises and their Solutions so spend a few minutes on those and then come back see the next lesson [Music] all right let's talk about querying generic relationships so earlier in the course we created the tags app with two models we have tag and tagged item now if you remember we decided to use the content type framework to decouple this app from the store app so this app knows absolutely nothing about the store app it doesn't know we have a model called Product so with this decoupling we can reuse this app in any kind of project tomorrow we can use it to tag articles block posts videos and so on but now let's see how we can find the tags for a given product so let's go to our database and look at this table Jango content type in this table we can see all the models we have in our application so in the admin app we have a model called log entry we didn't create this this is built into the admin app that comes with every Jango project similarly in the off app we have three models group permission and user in the likes app we have a model called liked item and in the store app we have all these models that we have defined so far okay so this is the content type table now let's look at the tagged item table in the tags app so here we have a few columns object ID content type ID and tag ID so to find the tags for a given product first we have to find the content type ID of the product model so in this table currently in my database we have the product model and the content type ID for this model is 11 so once we find this then we can go to this table and write a query to filter all records where content type ID equals 11 and object ID equals the ID of the product whose tags you want to find out that is the big picture now let's implement this in code so back to our playground first we have to import a few classes from Jango contri content types. models we're going to import the content type model this is the model that represents the content type table that you just saw then from store. Models we're going to import the product class and finally from the tags. models module we're going to import the tagged item class now first we need to find the content type ID for the product model so here we say content type doobs so because content type is a model it has the objects attribute just like all the models we have created so far now here we have a method called get for model this is a special method that is only available in this manager remember I told you that the objects attribute returns a manager object which is a gateway to the database so content type manager has a special method called get for model so we call this method and give it our product class now we get a content type instance now more accurately this object represents this Row in our content type table so this is how we can find the content type ID for the product model now you might be wondering why we're not just using the number 11 because we cannot rely on these numbers in your database in your development database the content type ID for product might be 11 but in your production database it might be something else that's why first we have to find the content type ID for the product model now that we have this we can use it to filter tagged item so we say tagged item. objects filter you're going to give it two filters first is content type which we set to our content type object and then we set object ID to the idea of the product whose tags you want to query let's say product number one this should be calculated dynamically for example depending on the product that the user is looking at we're going to get the product ID from the URL and pass it here but for now let's not worry about that part so this will return a bunch of tagged item objects now back to our database look at our tagged item table in this table we have a field called tag ID which is a foreign key to the tag table so the actual tag is not stored here it's stored in this other table so we need to pre- load this field otherwise we'll end up with a lot of extra queries to the database so back to our code here we're going to call Select related to preload the tag field now let me show you a better way to format this code it's getting a little bit ugly so we can put this on a new line now we get an error because python interpretor doesn't know that this line is the continuation of the first line to solve this problem we add a backs slash here and now the error is gone so I would like to indent this line and then one more time we put filter on a new line and add a back slash here and then format our code like this I think this is nicer especially when you're building a complex query by chaining a bunch of method cost here so this returns a query set let's get it and now we can add a new key value pair in our context object so we can call that result or we can call it tags and set it to list of our query set list of query set now let's run our query and see what happens so refresh good no errors so we have two queries the first query is for finding the content type ID for our product model and the second query is for reading the tags for a given product like currently we don't have any data in these tables but if you're curious you can just populate these tables and render the the tags on the page so this is how we can get the tags for a given product now in the next lesson I'm going to show you how to encapsulate this logic inside a custom manager so our code is cleaner and easier to work [Music] with so our tags app is decoupled from the store app but writing code like this is not ideal every time you want to find the tags for a given object first we have to find the content type then we have to go to the tag item model we have to preload the tag field and apply a filter there must be a better way so wouldn't that be nicer if you had a method like tagged item. objects. G tags for product one obviously calling this method is much nicer and cleaner than writing all this code so let me show you how to implement this method to do this we have to build a custom manager for the tagged item model so we want to replace the default manager that is returned from the objects attribute we want to replace that with a custom manager so let's go to this class before this class we have to create a custom manager so class tagged item manager this class should inherit from the manager class in the models module so this class is the base class for all managers now here we're going to implement that custom method so get tags four now the first parameter should be self so this becomes a method of this class we also need two more parameters object type and object ID now let's go to our playground and grab all this code and move it to our new method okay let's fix the indentation good now we're going to replace product with object type and one with object ID as simple as that now finally we're going to return this query set so we can return it right away so we're done with this now we need to use this manager in the tagged item model so here's the tagged item class I'm going to add a new attribute here called objects we're going to set it to an instance of the tag item manager class as simple as that now we can go back to our playground and use this new method to get the tags for a given object like a [Music] product all right let's talk about the caching mechanism built into query sets so let's call product. objects. all and store the result in a variable called query set now you know that when we convert this query set to a list Jango is going to evaluate this query set and that's when it's going to go to the database to get the result now this is an expensive operation because reading data from the desk is always slower than reading it from the memory so when Jango evaluates this query and gets the data from the database it's going to store it somewhere in memory called the query set cache so the second time we convert this query set to a list Jango is not going to evaluate this query again it's not going to go to the database it's going to read the result from the query set cach let me show you so back to the browser refresh now let's look at our queries look we have a single query for reading the products so the second time we convert this query set to a list D Jango is going to read the result from the query set cache now the same thing happens if we access an individual element from this query set again Jango is going to read this object from the query set cache now one thing you need to know about caching is that caching happens only if we evaluate the entire query set first for example over here first we're evaluating the entire query set and then accessing an individual element in contrast if you accessed an individual element first and then converted our query set to a list you would end up with two queries to the database take a look so save refresh and look here we have two queries with the first query you're reading the first product in this table and with the second query you're reading all products so keep this in mind even though caching is a great optimization technique if you don't structure your code properly caching is going to come back and bite you so this is all about caching next we're going to talk about creating [Music] objects so far we've been only quering data now let's see how we can insert a record in the database so let's create a collection object and set his title to let's say video games now every collection has a featured product which is optional so we don't have to set it but let me show you how to set this field and create a relationship there are basically two ways to set this field we can set this to a product object like the product with ID one here we could also use PK and with this we don't have to remember the name of the primary key field so it can be ID code or whatever now the second way to set this field is like this we can set collection. featured product ID to one so we can either use a product object or use the value of the primary key field now either way this product should exist before we can create this collection in other words we cannot create this collection and this product at the same time this is how relational databases work the parent record should exist before we can create the child record right so assuming that we have a product with this ID now I'm going to remove the last line and set the feature product to a product object okay now there's another way to initialize this collection instead of setting these fields individually here we can set them using keyword arguments when creating a collection object so here we can set title to video games now there are a couple of problems with this approach one problem is that if you noticed here we didn't get intellisense so as it was typing title look we are not seeing the name of this field we're just seeing the name of other classes imported in this module so that's the first problem in contrast when we use the dot operator look here we can see that the fields in this class okay the second problem with using keyword arguments is that these keyword arguments don't get updated if you rename these fields let me show you what I mean so let's go to the collection class and for name the title field to name now back to our playground see what happened the title field is updated here but not over here so the keyword arguments don't get updated that's why I personally don't like this approach even though sometimes it can make your code shorter so let's set the fields individually here now to insert this collection our database all we have to do is call the save method so every collection has this method method for saving data now in this case because we haven't set the ID of this collection D Jango will treat this as an insert operation so it's going to create this collection okay now there is another way to write this code there's a shorthand so instead of writing these four lines we can call collection. objects. create and here we have to set the fields using keyword arguments so we set name to whatever and featured product look again we don't have intelligence so we can set feature product ID to one so the create method is available in the manager object and what happens inside this method is exactly what we have on the top so this method is going to create a collection object it's going to initialize this object based on these keyword arguments and then it's going to call the save method to insert this collection in the database and of course at the end it's going to return the actual ual collection object so either way here we can read the idea of this new collection that's going to be available here as well so the second approach appears shorter but again here we have the problem with our keyword arguments so if you rename this Fields our code is not going to get updated so I always prefer to use the traditional approach and before we finish this lesson let's go back to our collection class and rename this field back to title good so let's make sure everything works up to this point save back to the browser refresh now let's look at our query so we have an insert into statement for inserting a new collection with these [Music] values all right let's talk about updating objects so here we have this collection now to update it all we have to do is set its ID or primary key so in my database this new collection that we created it's ID is 11 so I'm going to set PK to 11 and by the way even though I'm using a keyword argument here this is not going to be an issue in the future because if tomorrow we decide to rename the ID field to something else our code is not going to break PK will always work okay so here we have an existing collection now let's set its title to games and featured product To None save refresh good let's look at our query so here we have an update statement for setting the title and featured product ID perfect now let me show you something tricky let's say we only want to update the featured product for this collection so we don't want to set the title save refresh and look at our query one more time now something crazy is happening here can you tell look at this line Jango is setting the title of this collection to an empty string and this causes data loss so as part of updating this field we end up losing the title for this collection but why does this happen here's the reason this collection object that we have in memory by default is title is set to an empty string so even if we don't explicitly update this field Jango is going to include it in our SQL statement and this is where Jango is different from some of the other RM you might have worked with some other orms out there have this feature called change tracking so the SQL statement that is generated here will be based on the fields that are updated so to properly update an object in Jango applications first we have to read it from the database so we have all the values in memory then we can update it so over here instead of creating a collection object first we have to get it from the database so get PK equals 11 good now we have a collection with all the values so we can update certain Fields I am might worry that reading this object first may cause a performance penalty but speaking from experience I'm telling you this is not an issue in most cases so don't try to prematurely optimize your code always profile first see if you really have a performance problem in this part of code before optimizing it okay so once again reading this object first before updating it is not an issue in most cases but let's say in your application you really have a performance problem in this part of your application so let me show you how we can avoid this extra read in the previous lesson we talked about a convenience method called create so collection. objects. create now on this manager we have a similar method called update for updating objects and with this method we can avoid reading this collection first before updating it so we can update it directly in the database so we call this method and pass one or more keyword arguments so here we can set featured product to n and that means here we have that problem with keyword arguments that I told you about so with this new method we can avoid reading an object first but at the cost of making our code a little bit fragile okay now this update method will update this field for all objects in our query set so if we use it like this it's going to update the featured product for all collections in the collection table but here you want to Target a particular collection so before calling the update method first we have to filter to get the collection with the id1 and then we can update its featured product so let me comment out this VI lines and run our code one more time refresh good so take a look with this new implementation our update statement is only setting the featured product okay all right that's it for this lesson next we're going to talk about deleting objects [Music] all right let's talk about deleting objects again we have two options here we can delete a single object or multiple objects in a query set so if you have a collection we can delete that collection by calling collection. delete pretty straightforward now to delete multiple objects first we need to get a query set for example we can say collection. object. filter let's let say we want to delete all collections whose ID is greater than five so here we say ID greater than five this returns a query set now on that query set we can call the delete method to delete all these objects in one go so these are two ways to delete objects in Jango now it's your turn download the PDF below this video and spend a few minutes on the exercises when you're done come back see the next lesson [Music] sometimes we want to make multiple changes to our database in an atomic way meaning all changes should be saved together or if one of the changes fails then all changes should be rolled back a typical example is saving an order with his items so let's create an order object here we should set the customer or the customer ID field and then save the order before we can save its items this is how relational databases work we should always create the parent record first before we can create create child records okay now after this we can create an order item here we should set a few field first we should set the order to the order that we just created then we should set the product or product ID we should also set the quantity and unit price with all this now we can save this order item now imagine while saving this order item something crazy happens we get an exception what's going to happen our database is going to be in an inconsistent state so we'll have an order without an item we don't want this to happen so this is where we use a transaction so we're going to wrap both these operations inside a transaction and either both of these will be committed together or if one of these operations fails then both changes are going to get rolled back so on the top from django.db package we're going to import the transaction module now in this module we have a function called Atomic which we can use as a decorator or a context manager so we can apply it as a decorator to this view function and this will essentially wrap this entire view function inside the transaction so all the code that is here will be run inside a transaction okay now sometimes you want to have more control over what parts of your view function need to be inside a transaction in those cases you can use this as a context manager so I'm going to remove move this decorator from here let's say we want to wrap these lines inside a transaction but let's say we have some other code here that is not going to be part of a transaction so we're going to leave this out and then wrap the rest of the code inside a width block so we say width transaction. Atomic this returns a context manager now we need to indent this code good now let's test this so I'm going to run the code refresh good so now in our database let's open a new query console and say select everything from store underly order and order by ID in descending order so here's our new order order 101 in this case both the order and its item were saved successfully but to demonstrate an exception let's go back to our code and set product ID toga1 so we're going to get an exception here because we don't have a product with this ID now back to the browser refresh so here's the Integrity error that we just got now let's look at our database so since we have wrapped both these operations inside a transaction now we should not have a new order because we couldn't save its item take a look so I'm going to rerun this query see there is no new order here so this is how transactions work [Music] all right we covered a lot about Jango RM the last thing we're going to cover in this section is executing raw SQL queries so sometimes implementing certain queries using D Jango RM can get overly complex you might end up with crazy annotations or filters in those cases you can always write your own query by hand and execute it directly using Jango RM let me show you so we're going to call product. objects. RA so every manager has this raw method for executing raw SQL queries so we call this and give it a query like select everything from store underline product so Jango is going to execute this query then it's going to map the column names to Field of product objects and return a bunch of products well more accurately it's going to return a raw query set so we're going to get a query set but this query set is different from the other query sets you have seen so so far so here we don't have the filter method we don't have annotate because these methods don't really make sense here okay so for this demo I'm going to add a new key in this context object called result and set it to list of query set now back to the browser refresh so here is our query great now a few things I need to highlight here in this case there is really no point writing this query because Jango can perfectly generate this for us so use this approach only when dealing with complex queries if you end up with complex annotations and filters and realize writing the same query using raw SQL is easier and cleaner then go for this approach or if the query that Jango generates doesn't perform well then again this is another case for using this approach okay now here we can also specify column names so instead of selecting all columns we can select title and Jango is going to load only these two Fields so the other fields are going to be deferred okay now sometimes we want to execute queries that don't map to our model objects in those cases we can access the database directly and bypass the model layer so instead of using the raw method we're going to use a different approach first on the top from Jango DB we're going to import the connection module in this module we have a function cursor for creating a cursor object so we get a cursor now this cursor has an execute method and here we can pass any SQL statements no limitations so we can have a select we can have insert update and delete now after executing our query we should always close the cursor to release the allocated resources so the proper way to use a cursor is to wrap it inside a tri final block so inside a finally block we close the cursor so this way if something goes wrong we don't end up with an open cursor but you know that Tri finally blocks are a little bit verbos so it's much easier to use a cursor using a width statement so let's delete these lines and say withd connection. cursor this returns a cursor object so using the as keyword we give it an identifier like cursor and now we can use this cursor inside the width block without having to explicitly close it so the cursor is always going to get closed even if there is an exception okay so this is how we can execute raw SQL queries Now One Last Thing Before we finish this lesson we also have another method here for executing stored procedures so we can call a store procedure like get customers and give it a bunch of parameters one two a whatever this is much better and cleaner than writing your SQL queries in the middle of your python code so you encap your SQL queries inside a stor procedure and then call that in Python now that really goes outside the scope of this course but I covered it in detail in my SQL course so we're done with this section in the next section we're going to talk about the admin interface welcome back to another section of the ultimate Django course in this section which is the last section of the first part of this series we're going to talk about setting up the admin interface for managing our data we talk about various ways to customize the admin interface how to add computed columns load related objects add searching and filtering Implement custom actions add data validations and more so by the end of this section we'll have a full-fledged admin interface for managing our data I'm super excited about this section I hope you too so let's jump in and get started [Music] all right the first thing we're going to do in this section is setting up the admin app so every Jango project comes with an admin interface which we can access at this address slash admin so here we have our login screen now to create a new user we have to open a terminal window and run python manage.py create super user okay now it's asking for username I'm going to use admin next we need to add the email address so programming with MOS atgmailcom and for password I'm going to use 123123 and repeat now it's complaining that the password is too short and it's not secure but for this lesson I'm not going to worry about this I'm going to bypass the validation by pressing y okay great now we have an admin user so let's log in now we get this error complaining about the session app because the admin app is dependent on the session app app and earlier in the course we removed this app by accident so we need to add it back in the list of installed apps so back to our project let's open up the settings module here in the list of installed apps we're going to add Jango cont trip. sessions and the order doesn't really matter so save now we need to run the migrate command to generate the tables for this app so back to the terminal python manage.py migr great now back to our database let's refresh take a look we have a new table here called Jango session and this table is used for temporarily storing some user data So currently it's empty because we haven't logged in the admin panel but once we log in we're going to see a new record in this table so back to the browser let's refresh good so this is our admin interface where we can manage our group group and users So currently we have a single user in this database let me zoom out a little bit so we can see things more clearly so we have this admin user with this email we have a bunch of filters on the right side we're going to talk about them soon we also have the list of groups which is currently empty so these users and groups are stored in the tables of the off app so back to our database look the off app has a bunch of tables for managing groups permissions and users so let's have a quick look at the user table here we have one record that is for the admin user the password is stored in encrypted format and here we can see the last login date and time we can see that this user is a super user which means it has all the permissions here's the username we don't have the first name and last name we can set that in the admin interface later we can see the email and here we can see is Staff which means this is an admin user for this website now if you forget your password you can always reset it in the terminal so back to the terminal we run python manage.py change password admin here we can enter a new password but I'm going to leave it out so contrl and C to exit okay now back to the browser let's go to the homepage of our admin panel so here on the top we can see D Jango Administration let's see how we can change this to something more meaningful now back to our project let's open the storefront folder and go to the URLs module now in this module all the URLs of the admin app are hooked up at this URL so any URL that starts with admin is going to be routed to the admin app okay now because the admin module is imported here on the top this is a good place to apply a bit of customization for the admin app so we can say admin Dot site do site underl header we can set it to store Front admin now save and refresh so we change the header on the top great we can also change the label here for example we can set admin. site. index title to let's say admin now save and refresh so the title is changed as well so now that our admin panel is ready next we're going to register our models so we can manage them here [Music] all right now let's see how we can register our models so we can manage them in the admin site so back to our project let's go to the store app now every Django app has this module called admin and this is where we write all the code for customizing the administration panel for that app so the first thing we need to do is registering our models for the admin site so the admin module is imported on the top here we're going to say admin. site. register let's say we want to register the collection model so on the top from the current folder we're going to import the models module and then here we can pass models. collection so back to the admin panel refresh now look we have the store app and currently only one of our models is registered in this app so we can look at the list of collections we can add a new collection or change one of the existing ones so let's look at our collection now what you see here is the default representation of a model object so we're going to change this and instead we want to show the title of each collection so back to our project let's go to the collection class now here's a question for you how can we change the string representation of an object in Python we overwrite the magic stir method so every python object has this magic method that is called when that object is converted to a string so here we type def Dore stir double uncore and press enter so this code is automatically created now what you see here is type annotation I talked about this earlier in the course this is basically saying that this method returns a string object now inside this method we have the default implementation which returns a string like this now we're going to change the default implementation and instead we're going to return self. tile now same take a look beautiful so now we can see all the collections the first collection doesn't have a name and this happened in the previous section when we were updating data so there we made a mistake and ended up storing an empty string for the collection title so let's select this and delete it yes I'm sure good now there is a problem here our collections are not sorted so let me show you how to sort them back to our collection collection class here we're going to define a metal class for specifying the default ordering of collection objects so we create a new class called meta we talked about this ear in the course and here we said ordering to a list of fields so here we want to sort the collections by their title so we add that here good now take a look beautiful all collections are sorted alphabetically now as your exercise I want you to repeat the exact same steps and register the product model so we can manage our products in the admin panel all right here's my solution so here in the admin module I registered the product model and here in the product class I overwrote the St method to return the title of each product and I also implemented this metal class for ordering the products by their title so now in the admin site we can see the list of products and as you can see our products are sorted alphabetically great so next I'm going to show you how to customize the list [Music] page now let's see how we can customize the list page so I'm going to show you how to add new columns here how to make them editable how to change the number of items and so on so back to our admin module first we need to create a new class called Product admin we could call it anything but by convention we use the name of our model model like product followed by the word admin now with this class we can specify how we want to view or edit our products so this class should inherit from admin model admin now in this class we can set a bunch of attributes to customize the list page for example we can set list display to the list of fields we want to display like title and unit price okay now that we have this new class we need to pass it while registering the product model so we say product admin this is one way but there's also a shorter way we can use the register decorator on this class so we say admin. register and here we pass models. product so we saying that this class is the admin model for the product class and with this we don't need the last line anymore so that is shorter now back to the browser refresh so look we have a new column where we can see the price of each product beautiful now we can sort by this column as well now we have two sort columns first our products are sorted by unit price and then by title if you don't want to sort by title you can just click on this icon where we can see a cross good so now our products are sorted by unit price in ascending order we can also change the sort order beautiful now imagine if you wanted to code all of this by hand it would probably take you a couple weeks if not longer so let's do some more customization another attribute we can set is list editable and with this we can specify the fields that can be edited on the list page for example if we set this to unit price and refresh now we can edit the price of a bunch of products in one go for example we can change this to 90 and this one to 95 now down the bottom we have the save button so we saved two products in one go now back to the code we can also set list per page to let's say 10 and with this we're going to see 10 products on each page so save and refresh look now we have 10 products and we have this beautiful pagination on the bottom so customizing the list page is really simple now if you want to see the complete list of options you can set here just Google Django model admin on this page on the right side over here look model admin options here you can see the complete list of options you can customize as we go through the Section I'm going to show you many of these but we don't have time for all of these so I leave it up to you to read about the other options all right now it's your turn set up this page where we can view our customers so here we have three columns first name last name and membership we can change the membership of each customer right here very handy again imagine if you wanted to code all of this by hand that would take you a really long time right so build this page over here we have 10 items per page and the default sord order is first name followed by the last name so spend a couple minutes on this then come back to my solution all right here's what I've done I've created a new class called customer admin in this class I've set list display to first name last name and membership I've set list editable to membership ordering to first name followed by the last name and list per page to 10 very very easy next we're going to talk about adding computed [Music] columns all right let's see how we can add a computed column to the list of products so here I've added a new column called inventory status if the inventory of a product is less than 10 here we see low otherwise we see okay so let's see how we can implement this so back to our product admin class in the list of fields we want to display we don't want to add inventory because otherwise we would see a number in this list we don't want this we want to get this number and depending on its value we want to return a string so here in this class we're going to define a method called inventory status with two parameters self and product so we want to take a product and depending on its inventory you want to return an inventory status so we can say if product. inventory is less than 10 we're going to return low otherwise we're going to return okay now instead of inventory we're going to display inventory status take a look so this is what we get beautiful but this column is not sortable by default because D Jango doesn't know how to sort the content of this column so to implement sorting we need to apply the admin the display decorator to this method and here we specify the field that should be used for sorting the data in this column so we said ordering to inventory which is one of the fields of the product model so back to the browser refresh now we have sorting here we can sort in ascending or descending order [Music] beautiful all right let's talk about loading related objects so here in the list of products I want to add a new column to show the collection of each product so back to the product admin class here in the list of fields we want to show let's add the collection field now because collection is a related field jangle will show the string representation of a collection here so back to the collection class remember early in the section we overwrote the stir method of this class so when showing the products for each product D Jango will call this method to get the title of the collection of that product okay so back to the browser refresh here's the collection column beautiful now let's open up Django debug toolbar and look at our queries so look we have seven queries on this page now don't worry about all these queries just look at the last one so over here we're selecting all these columns from the product table followed by these columns from The Collection table and we have an inner joint between the product and collection tables beautiful now what if you don't want to show the string representation of a collection in other words what if you want to show a particular field in this model unfortunately here we cannot use the double underscore notation to reference a particular fi like the title field now you might say Marsh what is the point of this we could see the title of the collection just by typing collection so here we get the string representation of a collection but imagine we have a special field here we want to show on this page let me show you how to do this first I'm going to remove this extra underscore so I'm going to define a method by this name Define collection title with two parameters self and product because we're rendering a a bunch of products so we're going to get a product and return product. collection. tile now back to the browser refresh let's hide this so our collection column is here beautiful but let's look at our queries one more time now this time we have 17 queries so we have 10 extra queries because for each product Jango is sending an extra query to the database to read the collection of that product so in the previous section where we talked about query sets you learn that we have a method called select related for eager loading or pre-loading the related fields now here we have a special attribute for the same purpose that is called list select related we set this to the list of fields we want to eagar load in this case collection now back to the browser let's look at our queries now we're down to seven queries beautiful so this is how we can load related objects on the list page now as your exercise I want you to set up the order page where we can see our orders and their customers so spend a couple minutes on this then come back see my solution all right let me show you what I have done so I created the order admin class to show three columns ID Place ad and customer and also in the customer class I overwrote the St method so here we're returning an F string for for combining the first name with the last name I also implemented a metal class for setting the default ordering of our customers so now anywhere we have a list of customers our customers will be sorted by their first name followed by their last name with this now we have a new page called orders and over here we can see all the orders the date and time that were placed and their customer [Music] sometimes we need to overwrite the base query set used for rendering a list page for example here in the list of collections let's say we want to add a new column to show the number of products in each collection so back to our admin module this is how we registering The Collection model currently we're not specifying an admin model so here we need to create a new class called collection admin which should inherit from admin. model admin and we should decorate this class with admin. register now here we set list display to title and products count now our collections don't have a field called products count so we need to treat this like a computed field so we Define a new method called products count with two parameters self and collection and here we return collection. products count but again our collection op objects don't have a field by this name so this is where we need to overwrite the query set on this page and annotate our collections with the number of their products so every model admin has a method called get query set which we can overwrite so here we have a couple of Errors because the generated code includes type annotations and these classes are not imported on the top so here we have two choices if you're on a Mac you can press command and period or if you're on Windows you can press control and period to import this class on the top alternatively if you don't care about type annotations you can just remove this okay so this is the get query set method with the default implementation so we're going to the base class and calling the get query set now we don't want to return this query set immediately we want to annotate it with products count now here we're going to use the count object for counting the number of products so let's press press enter to automatically import this good as the argument we're going to pass product okay now back to the page refresh and here we can see the number of products in each collection beautiful but look this column is not sortable because Django doesn't know what field to use for sorting this column so to solve this problem we need to decorate this method with admin. display and here we said order in to the name of the field that should be used for sorting in this case products count now refresh and now we can sort our collections by the number of their products [Music] beautiful all right now let's see how we can add links here so when we click on these links we can see the products in each collection so back to the products count method instead of returning a number we should return a string containing an HTML link now to generate an HTML link we should import a utility function on the top so on the top from Jango that utils HTML we should import the format HTML function now let me show you a cool shortcut under the Go menu look at the shortcut for the back command is control and hyphen so if you press control and hyphen we jump back to where we were that's pretty handy so here we're going to call format HTML and give it a format string that this is where we need to type a bit of HTML code in HTML we can represent a link using the anchor element with two tags the opening and the closing tag now in between these tags we can type the link text in this case I want to show the number of product so here we type a pair of braces and we're going to replace the braces with the number of products so we're going to pass this expression as the second argument to the format HTML function okay now for the actual link we go to the opening tag and set the HTF attribute to a string like this for now let's just send our users to google.com Okay and then return this value Let's test our implementation up to this point so refresh we get these links beautiful let's click on a link we go to Google now let's see how we can send our users to the products page so here's a products page look at the URL that is admin SL store SL product we don't want to hardcode this URL in our code because this URL can potentially change in the future so we should ask Jango to give us the URL of this page and to do that we have to import another utility function so back to the code from Django the URLs we're going to import the reverse function now let's go back to our method here we're going to call the reverse function and give it a special argument we type admin colon now here we need to type the name of our app followed by the model followed by the page so what app are we working on it's the store app what is the Target Model it's the product model because we want to send the user to the product list page right now what is the target page it's called change list so this list of products is called change list okay now let's test our implementation up to this point so we call the reverse function get the URL and replace Google with it so here we type another P Braes and because this is the first placeholder as the second argument to this function we should pass the URL okay now back to the browser let's go to our Collections and click on one these links great we go to the list of products but there is no filter applied here to apply a filter we need to append a quer string to the URL so we type a question mark followed by collection double uncore ID and a value okay so we need to add this part dynamically so back to the code after the call to the reverse function we're going to add a question mark that indicates the beginning of a query string now because we're going to type a long string I would prefer to wrap this expression in parenthesis so we can break it down into multiple lines so look we have reverse on one line then on the next line we have plus question mark and then plus that this is where we need to generate the query string parameters and for that we're going to use another utility function so on the top from Jango utils HTML module we're going to import the URL en code function okay now back to everyware we're going to call this function and give it a dictionary because a query string can contain multiple key value pairs so that's why we use a dictionary here now the key we're going to add is collection Dore ID and the value is collection which is this collection that we get in this method so that is collection. ID now this returns a number we should convert to a string so we wrap it with a string function okay that's pretty much all we have to do so let's test our implementation back to the collections page let's look at the beauty collection now we only see the products in the beauty collection let's look at another collection like cleaning okay beautiful now here's your exercise go to the customer page and add a new column for viewing the orders of each [Music] customer all right let's see how we can add searching to the customer page so back to the customer admin class we're going to set search fields to the list of fields we want to use for searching like first name and last name now I prefer to sort these attributes because this makes our code more readable so I'm going to move list per page up and the rest looks good all right now back to the browser refresh we get this beautiful search box so if you search for cat we see anyone who has cat in their first or last name okay now what if you search for M look at the first customer adult Mr it doesn't make sense to see adult Mr here because when we search for M we expect to see people whose first or last name start with M so back to the code here we need to use one of our lookup types remember we talked about lookup types in the previous section so after our field we type two underscores followed by a lookup type like starts with and similarly over here okay now back to the browser refresh this time we don't see any customers because this search is case sensitive so if we change this to an uppercase M now our search works so to solve this problem we need to use I starts with i is short for insensitive okay and one more time here now refresh our search works if we change the uppercase M to a lowercase M our search still works beautiful so this is all about searching next we're going to talk about [Music] filtering all right let's see how we can Implement filtering on the the products page so let's say we want to filter our products by their collection and last update so back to the product admin class here we should set a new attribute called list filter to the list of fields we want to use for filtering so collection and last update now take a look good so I'm going to collapse the left panel great now look on the right side we have this beautiful filtering panel where we can select a collection and now we only see the products in that collection very powerful also down below we have filtering by last update so we have any date today past 7even days this month and this year so we got all these capabilities by writing only one line of code imagine if you wanted to code all of this by hand that would take you a long time right now we can also create our own custom filters so let's say we want to add a filter here to see only products with low inventory so back to the admin module here we should create a new class called inventory filter we could call it anything doesn't really matter but this class should extend admin. simple list filter now here we should set a couple of attributes one of them is title and this title will appear over here after buy so I'm going to set that to inventory and the second attribute is parameter name this parameter name will be used in the query string so when we selected this colle collection you can see in our query string we have a parameter called collection ID so here we can set parameter name to inventory or anything we want now there are two methods we need to implement here one of them is lookups and with this method we can specify what items should appear here so once again we have a couple errors because of type annotations if you don't care about them you can just remove them so I'm going to remove them so we have less code on the screen so we can see things clearly now here we're going to return a list of topples so each topple represents one of the filters here okay so here's our topple in each topple we should have two values the first value is the actual value we use for filtering this can be anything here I'm going to use less than 10 the second value is a human readable description so we can say low and low will appear over here okay so this is our first item we could add as many items as we want but I'm going to stick to one filter here so this is the first method the second method is query set and this is where we implement the filtering logic so once again I'm going to remove type annotations all right now in this method we're going to write some logic like this so if self. value this Returns the selected filter if this equals less than 10 which is the value that we defined over here so as a best practice we should store this in a variable where we can reference multiple times but I'm going to leave that for now so we don't get distracted so if the user has selected this filter then we're going to take this query set and call the filter method on it now look we don't have intelligence here because python doesn't know the type of this object so this is the benefit of using type annotations if it decorated this parameter with it type which is query set now look when we type dot we can see all methods of the query set class okay so here we're going to call the filter method and get products with inventory less than 10 and of course we should return the new query set so here's our custom filter now to use it we simply type the name of the class in this list so here we say inventory filter take a look so here's our new filter by inventory this is the title that we set in our class now if you select low we only see the products with low [Music] inventory all right let's talk about defining custom actions so every list page comes with a delete action for deleting multiple objects in one go but we can also extend this list and register our own custom actions for example let's say we want to define a custom action for clearing the inventory of a bunch of products in one go so we want to set their inventory to zero let me show you how to implement this so back to the product admin class here we're going to define a new method called clear inventory and of course we could call it anything but here we need three parameters self request which represents the current HTTP request and query set which contains the objects the user has selected now we should decorate this method with admin. action and set the description to the text we want to appear in the dropdown list so clear inventory now in this method we can do anything we want for updating objects so we can take this query set and call this update method and here we set inventory to zero so this will immediately update the database and then return the number of updated records so we can get that value and store it in a variable like updated count now to show a message to the user we call self. message user so every model admin contains this method for showing a message to the user so we call this method and give it two arguments the first argument is the request object that we get here the second argument is the message we want to show to the user so here I'm going to use an F string and say updated count products were successfully updated okay so we defined a custom action now we go to the top over here where we set the attributes of this class we set actions to the list of actions we want to show to the user in this case clear inventory so we pass the name of the method as a string okay now back to our page now look we have a new action here clear inventory so I'm going to select the first two products and clear their inventory go great so we get this beautiful message saying two products were successfully updated and as you can see the inventory of these products is now low great now here we can also show error messages so when calling the message user method we can specify the type of the message as the third argument so first we go to the top and from Django cont we import the messages module now we go back to where wew and pass a third argument here so I'm going to say messages dot now here we should have different type of messages so we have error we have debug info success and so on so I'm going to show an error message once again let's select a couple of products and clear their inventory okay this time we see an error message so this is how we can Define custom [Music] actions so we talked a lot about customizing the list page now let's see how we can customize the form for adding or updating models so let's add a new product we get this beautiful form that is automatically generated based on the definition of the product model again very very powerful without Django if you used a different framework for every model we would have to create a form like this from scratch and that would be a lot of work so let's see how we can customize this form so back to the product admin class here we can set fields to the list of fields we want to show to the user so if we set this to title and slug now we only see these two Fields but of course this doesn't make sense because our product has a bunch of other required fields that we need to fill out like the unit price and inventory so if we don't show them to the user we cannot create a new product okay now we have another attribute called exclude which is the opposite of fields so with this we can exclude certain Fields like promotions now take a look so the promotions field is no longer here we also have readon Fields read only Fields so if you make the title read only now when we refresh it appears down below and it's read only again it doesn't really make sense here but I want you to know that these options are available to you now let's remove this and refresh so let's talk about the slug field let's say we want to create a new product called brown shoes it would be nice if the slug field was autop populated like this right so let's see how we can implement this back T code here we can set pre-populated fields to a dictionary in this dictionary we can specify how each field in this form can get pre-populated so we can pre-populate this lock field with the title field so here we're passing a list which means we can add multiple Fields here and Jango will combine the value of these fields to prepopulate this slog field okay remove now take a look so refresh as we type brown shoes Jango uses a bit of JavaScript to pre-populate this field but note that if we type something here and then go back to update the title the slug field doesn't get changed so it only gets pre-populated if we haven't touched it okay now look at the collection field here we have a drop down list and this makes perfect sense because we have a limited number of collections but if you had hundreds or thousands of collections showing a drop down list would have a couple of issues for St starters it would be a terrible experience for the user because the user would see a drop down list with 100 items and also in terms of performance getting all these objects from the server and rendering them on the web page would have a bit of overhead so let me show you how to convert this to an autocomplete field so back to our code here we can set autocomplete fields to collection now before going back to the browser let's look at our terminal here we get an error saying collection ad must Define search Fields because it's referenced by product admin. autocomplete Fields the reason we see this error is because D Jango doesn't know how to search for collections so we need to set this attribute in the collection admin class so let's go to collection admin okay and here we set search fields to title because we want to search for our collections by their title now refresh take a look so here we have an autocomplete field so we only see 10 Collections and other collections are hidden so we can search for them by typing a search query here so every time we type a character Django is going to send a request to the server to get the collections whose titles match our search phras okay so these are a few ways to customize this form but again if you want to find all the options available to you just search for D Jango model admin on this page we talked about this earlier look at model admin options on this page you can find all possible ways to customize the lists and forms now here's your exercise look at the page for adding a new order on this form we have two Fields payment status and customer but our order class also has another field called placed at why do you think that field is not visible here pause the video and think about it for a few seconds here's the answer let's look at the order class so here's the definition of the place at field as we can see we have marked this field to get autop populated by Jango so if you remove this argument and refresh this page now we get two fields for setting the date and time we can select today's date and the current time or we can go to a calendar and select a particular date again very very powerful we're getting all these features with very little code so let's put this back over here and refresh all right so look at the customer field currently we have a drop-down list which is a very bad experience because this drop- down list is populated with a thousand customers so this is a great opportunity to use an autocomplete field so pause the video and convert this field to an autocomplete field [Music] let's talk about data validation so by default our forms include basic data validation Logic for example because we have defined all these fields as required meaning none of them are nullable if we try to save this form without supplying any values we get all these validation errors beautiful we don't have to write a single line of code to get this functionality right now let's go through a few validation scenarios and see how we can customize the logic here first I'm going to make the description field nullable so back to the product class let's make the description field nullable okay now we need to create a migration and apply to our database so python manage.py make migrations good and then migrate beautiful so let's go back to the browser and refresh this page one more time so look we still get this error saying this field is required even though we made the description field notable why is this happening well back to our description field this keyword argument only applies to our database so to make this field optional in the admin interface we should set another argument called blank to true now let's refresh okay this time we don't get a validation error for the description field great now what about unit price well here we cannot type any characters like ABC because the type of this field is decimal and this input field only accepts numbers so that's a great starting point but what if we set the price to Zer or negative 1 the validation error goes away look we don't get a validation error but this is not a valid value for the unit price so back to our models module on the top from Django core. validators we're going to import main value validator in this module we have a bunch of built-in validators if you want to see all these buil-in validators just Google Jango validators on this page you can see all these built-in validators so we have Rex validator for validating using regular Expressions we have email validator that is automatically applied to our email fields we also have URL validator that is applied to URL fields and so on now down below you can also see we have max value validator mean value max length mean length and so on so here we imported main value validator now back to everywhere here's the unit price field let's break this down into multiple lines so our code is cleaner now we set validators to a list of validator objects so here we're going to create a main value validator object and in the Constructor we're going to specify the minimum value let's say one now optionally we can also specify a message if you want to I'm going to stick to the default message so back to the browser let's refresh all right now we get this default message saying ensure this value is greater than or equal to one great now similarly we could apply the same validation logic to the inventory field but I'm going to leave it to you as an exercise the only thing I'm going to do here is making promotions optional because when adding a product I don't necessarily want to apply a promotion to it so by to the product class here's the promotions field so we should set blank to true now refresh the promotions field is no longer required [Music] great So currently we can create a new order but there is no way to manage the items for an order so let me show you how we can edit them right here so back to our code here's our order admin class before this class I'm going to create a new class called order item inline now this class should inherit from admin. either tabular inline or stacked inline we're going to talk about the differences in a minute so let's go with tabular inline now in this class we set the model to models. order item okay now here in order admin we should introduce this class as an inline so first I want to sort these attributes and over here we're going to set in lines to order item inline okay now take a look so below the order we have this beautiful table where we can manage the items for this order so our product is currently a drop- down list we want to convert this to an autocomplete field so back to our code this inline class we have over here indirectly inherits from model admin so all the attributes you have learned about so far also apply here so here we're going to set autocomplete fields to product now take a look so now we have an autocomplete field beautiful so we can select the product set is quantity as well as the unit price we can delete them now the reason you see three rows here is because these are three placeholders if you don't want to see these placeholders just set extra to zero now take a look so by default we don't have any rows here we can add any order item set it right here we can also set the minimum and maximum number of items for our order so over here we set minum to one and maximum to 10 now take a look so we should always specify one item otherwise we're going to get a validation error so this is a tabular in line what we have here is a table of rows and columns now in contrast we can replace this with stacked inline and now each item will be represented as a separate form so this is how we can edit children using [Music] inlines now let's talk about using generic relationships so here in our product form we want to add a new section down here for managing the tags so back to our code first we should go to the tags app and here in the admin module we should register our tag model so we can manage our tags in the admin interface so here we say admin. site. register now we need to import the tag class on the top so from the models module in the current folder we're going to import the tag class and then register it right here now refresh let's go to the homepage of the admin interface take a look we have the tags app and over here we can manage all of our tags now currently we cannot see the label of each tag so we need to overwrite the St method in the tag class and that's really easy so let's go to the tag class and overwrite the St method now here we're going to return self. label okay now refresh beautiful so we can manage our tags Now using inlines we can manage the tags in our product form so let's open up the admin module in the store app here's our product admin class before this class we should create an inline class for managing a tag so we create a class called tag inline now this class should inherit from a special class called generic tabular inline so on the top from Django cont trip content types. admin we should import generic we can either import generic stacked inline or generic tabular inline I'm going to go with generic tabular in line because that's going to give us a kind of more compact interface okay now let's go back to where we were so this class should inherit generic tabular inline so this is a tabular inline but we use this with our generic objects so in this class we should set model to tagged item okay now that we have this inline class we're going to go to our product admin and set inlines to tag inline and of course I prefer to sort these so let's move this right here good let's see what we get up to this point so back to the homepage now in the store app we add a new product okay so over here we have a form for adding tags now just like before we have a drop- down list which does doesn't really make sense for tags because we can have hundreds or thousands of tags so we're going to convert this to an autocomplete field which is pretty easy here the tag inline class we set autocomplete fields to tag now take a look all right we should have an error so here in the terminal Jango is complaining that model admin must Define search Fields because is referenced by tag in line. autocomplete Fields so once again Jango doesn't know how to search for tags so let's go back to the admin module in the tags app now here we need to create an admin class for our tag model so class tag admin should inherit from admin. modeladmin and in this class we set search fields to label now we should decorate this with admin. register good so refresh okay the error is gone now we have an autocomplete field for looking up tax beautiful so this is how we can use generic relationships in our forms but there is a problem in our implementation and we're going to talk about that in the next [Music] lesson all right the last thing we're going to talk about in this section is extending plugable apps so here in the admin module of the store app look on the first line we're importing the tagged item class so that means our store app has a dependency to the tax app so we cannot build and deploy it independently remember earlier in the course I told you that ideally our apps should be self-contained so we can easily plug them into new projects so here we need to decouple the store app from the tags app but how it's actually very easy so here are the tags and store apps you want to build and deploy them independently of each other so none of these apps should know anything about each other okay now in this project we're going to create a new app which we can call store custom and this is the customization of the store app which knows about both these apps this is very specific to our project so we're not going to deploy this app for others to reuse okay so here in the terminal let's run python manage.py start app store custom good now we have this new app and in this app in the app admin module we're going to combine features from the two plugable apps so from store. admin we're going to import product admin and from tags. model we're going to import the tag item class okay now why do we have an error here that should be models okay good so back to the admin module of the store app let's jump to the tag inline class so so this class should be moved to our new app because this is where we are referencing the tagged item class so cut it from here and paste it right here now I want to import this class on the top so from Jango contri content types. admin we're going to import generic tabular inline great no errors up to this point now we need to create a new product admin which extends the generic product admin that comes with our reusable app and in this new implementation we're going to reference the tag inline class so we create a new class called custom product admin which extends product admin this is the class that comes with our plugable app now over here we set inlines to tag inline as simple as that okay now that we have a new product admin we need to unregister the old one and register the new one so here we say admin. site. unregister product and then we're going to call admin. site. register product with this new custom product admin okay now the final step we need to register this app in the list of installed apps so command and te let's jump to installed apps good now so here's the generic implementation right after we're going to add store custom okay now let's see what happens so refresh looks like we have an error so back to the terminal we have an error saying tag inline is not defined so I forgot to remove this from the old product admin so let's jump to product admin in the store app and over here we're going to remove this line because we implemented this in our custom Store app so delay and that also means on the top we no longer need to import tag item so our store app has no dependency to the tags app and we also don't need to import this generic class so delete good and refresh take a look so here's the product form now we have replaced the admin interface for this app using our custom Store app so that means if we go back to the settings module and remove this new app we see the generic implementation of the product form without the tags so this is the interface we're going to build and deploy independently now anyone can create a new custom app to customize this interface now let's bring this app back beautiful [Music] we have reached the end of this course first and foremost I want to say thank you for allowing me to be your instructor and following along all the way through I hope you have learned a lot and I'm going to see you again in my future courses this course is the first of a series in the next part we'll talk about the advanced Jango Concepts such as building restful apis authentication and authorization logging caching sending emails deployment and more so if you're serious about learning D Jango and want to become a back developer don't miss the next part and if you enjoy this course please support me by telling others about my coding school Cod with.com I really appreciate your support and send you my best wishes once again thank you so much for your support and I hope to see you again in the next part [Music]
2025-07-07 02:24:24,842 - INFO - Transcript is successfully fetched by api.
2025-07-07 02:24:24,897 - INFO - Chunks has been successfully created.
2025-07-07 02:24:24,899 - INFO - Use pytorch device_name: cpu
2025-07-07 02:24:24,899 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-07-07 02:25:09,552 - INFO - chunks has been successfully stored in vector database.
2025-07-07 02:25:09,552 - INFO - {0: '93826be0-67fc-49f4-bbaf-7344cbf853ac', 1: '8ea5dbd6-b991-4f7e-b16f-cd1f77c14eaf', 2: '1ea56f8f-0565-4a8b-90e2-6caebb10f355', 3: '67169712-c66a-4741-ae90-e955391e3d31', 4: 'ba97eaa9-ec9f-427c-8e23-3f806cfae77c', 5: '7f7d7c1a-f19b-4a20-8945-63e9b9d7a56b', 6: 'e2f87d17-dcc7-4ccd-aadc-b60c70da18f0', 7: '375a35cb-59cd-4462-b4f2-68b488f94038', 8: 'd35e96bf-b00c-4dbc-bd76-5848c2075ca9', 9: '84b1aba1-47a6-4a15-a83b-74e74b6c0dfa', 10: '4de6afb3-b61c-4c4f-ba46-1be2967d0c7c', 11: 'f55ce60b-83ce-49a9-a37b-868643d0b5c9', 12: 'd81f95d7-0ff6-430d-8f7d-bb0e30f95daa', 13: '9e994a4f-4373-4ff3-8160-1a67345c140e', 14: '5a1b35a4-398c-472b-99b5-b771510f4794', 15: '2bccb437-2504-4b5b-a77a-3d3364e67e49', 16: '4fd94373-db25-42fb-a0f2-73355fb1159a', 17: '494a25df-0cbe-4eea-80f8-7e86dbf66dc8', 18: 'd360094c-29c9-457c-9928-cda9625d25ec', 19: 'b175079d-5859-4aca-8d7b-76a8ac024f6f', 20: '9b1a6210-f0b7-468d-b210-54d65434723f', 21: '43b47780-ae82-4249-9fc3-c5ad9398eedb', 22: 'fbcd3d86-0d56-4515-8925-3b716ddf58fa', 23: 'bb9b25d6-b4ac-4aa1-bb99-d4e0ab8bf12d', 24: 'c9d27d30-1c54-4b03-860b-726b4a9392f4', 25: '61e72380-62fd-4a2e-8b56-5f7b5c867567', 26: '6694f22e-ff22-402b-8dcc-bedfc2f3b63e', 27: 'b57d6a72-cae8-4dbd-a460-595524765aec', 28: 'e9e38019-dfd5-46fe-b3a8-53840b87b685', 29: 'ccbb4483-a2ec-4d58-8b41-c6c1cd1510ec', 30: '4518a7b0-758e-4ec9-bfd6-be6a5e3e92ba', 31: '4b600e08-66dc-4366-a51d-b921b52c5c94', 32: 'c2e17e80-64f8-4d38-96ca-1dc44476332c', 33: '086df22a-34a3-4d01-a806-676be0ea8e7e', 34: 'be92cfc2-4741-4bbd-b13c-e60ab08dccb3', 35: 'acd9d82b-edcf-4751-b380-198480001c33', 36: '73fd4c95-f138-4dac-82ee-616947f26980', 37: '7d3ef4b0-e496-4a67-b088-773f9af9ce03', 38: 'b964aed3-76cb-491d-bc02-cde83efeef1f', 39: 'b45c9e71-2465-47ba-9fb0-5cd410fea66e', 40: 'b2b66e5f-963b-4b59-9c77-247c86187558', 41: '89dcae23-3aa5-48db-9898-a37025e29c80', 42: 'dc63138c-e9c7-493b-95f6-d1d864904be9', 43: '0d4ee8a4-d72e-4d24-b649-7ba36e85bb4d', 44: 'd24ac603-7e2b-419a-8995-2751ce252f6d', 45: '73904501-98b4-4e45-bc5c-76d9d58189bd', 46: '2a714537-71c4-4aa4-8563-e0681b4d179d', 47: 'b1ee6c36-1566-4849-afa6-aa1688cdecc0', 48: '03ec48d9-c8f9-4e1b-b77e-9791c309b918', 49: 'b4258945-f9d5-4afd-8a16-c4250ab31f80', 50: '6ffa8933-88d3-43f0-908f-ddbeea201321', 51: '0475bf7c-1cb5-46a2-aeb1-782770ce70fe', 52: 'a1a98f7c-8162-45b5-b60f-dd2a51c8337d', 53: '012756f6-998c-4403-9679-babbaac5be8d', 54: '58f49237-d310-4854-9ee7-9d13c2fd9950', 55: '46a966bf-ced2-401b-9cb2-3f6211adae25', 56: '3662587f-cb0d-470f-a891-cdbf7b1f2e01', 57: '52add599-4bc7-4fe4-844b-6f8cd4005281', 58: '9158d432-6972-4ad5-a7ac-63938f7e21b9', 59: 'a0b1b8ed-ed43-4e0f-aab9-208232075c9c', 60: '01dc0e80-4d39-4b99-a90b-636bd3031fc9', 61: 'add3279b-d893-410d-bbb3-e388c1800695', 62: 'dcd9d1fc-4e43-47cc-a053-25bb01d6ad62', 63: '403323de-f11a-4d1e-93ef-6f70b02c2efa', 64: '4ae1898b-8d96-4fa6-849f-2938a032e724', 65: '31cddcf1-91e7-4abd-ac42-273535e4ccf2', 66: '52b2604a-6d55-432b-9a16-81b626b33bf3', 67: '6042a4bc-1d14-4847-b101-9436e5262585', 68: '733f9f9a-90ef-46bc-ac8b-476550d98a88', 69: '561503ee-ffe6-4c7b-a44b-0b31260e2c95', 70: '77c4cd00-d241-4de6-8cd9-3ebac19e465f', 71: '9714fab1-8831-47cd-9d0d-00b894c8c396', 72: '542e62fa-bd6e-4276-97ba-3e5f993a5d38', 73: '188b4967-5f16-4a34-99da-170d62c79e4b', 74: '9e535ffd-f0ca-4d75-9634-aab9e7c83630', 75: '6a0e4349-0f08-4cf9-b892-674df2de1b37', 76: '397f375e-3f56-4300-87f0-c78fba6170ae', 77: '8e735cd3-1958-4a6c-a282-8099fb6507ee', 78: '9807e047-c003-49b7-ab05-250ddb5655c7', 79: 'c346c32c-91a4-431b-8658-18917905cad4', 80: 'e091833b-8cff-407e-b5ec-ebd382b9f25b', 81: 'a57e6a21-46d2-49ed-93b6-6086b7781496', 82: '1a903a2a-63a3-491c-afce-ac6b34c4ed4f', 83: 'db087bd2-7b80-4709-913f-c44aa950908c', 84: '88b78059-b628-4a67-9d42-6bd99cde1198', 85: 'd0a0f2a5-da4e-4c4d-bf2e-d458977f1e33', 86: '183393ad-7f7a-4e6f-b377-86984f3f1814', 87: 'b56efd4c-47d8-48f1-bd11-b9b58cc01e99', 88: '44fa7651-b66d-46a2-b15a-610132a08680', 89: 'bbe2f123-f2c8-4936-a7a5-5879f2ab450d', 90: '208b59c6-cd54-43ef-b660-292ba38d4dcd', 91: '7ee1463f-76d8-4340-ab8d-36a49ed9ec71', 92: '93abfb62-39b4-4592-9662-6baf9c6bd970', 93: 'e011fb18-e1d5-4311-9f95-46b8145423aa', 94: 'e5b4e7a5-701b-46ff-b7f8-bff403dcd73f', 95: '0ac9710d-2f55-4b0e-90c1-e2bf11fb6390', 96: 'adf85253-bd85-4681-b362-9e465d70c7a5', 97: '57529f1a-daa4-4b97-88a5-f879634bbb2e', 98: 'f61551dd-e425-427a-a635-2bfe64378dcb', 99: 'd219cd28-231f-4c81-8c7c-8202fdc135f3', 100: '912ae5f3-cb71-4760-991d-3e214872df4e', 101: '7f763c9f-8141-4081-a090-6e568be75118', 102: '5ca53de0-49c4-4563-b02a-6556df596869', 103: '26af51a4-83dc-4b57-ba3b-2017756d2cfd', 104: 'cf132e50-e342-49fb-8d30-e1c2208b81e6', 105: 'f0545bd2-4acc-4503-94ce-6706cc9d86f5', 106: '8a88d81d-6398-4b45-a618-a921144ec0ab', 107: '839f7438-5c7d-4223-bc82-252890c5a2e3', 108: '0f6f116c-ca15-4fa6-aaee-503377ce8e59', 109: '2a8100d8-307d-4aa2-b5c4-00ba5623f3c5', 110: '21049848-ce37-478c-9269-e7c1c8363d3a', 111: '7dc1de19-69a8-4c47-a659-3988c33e691b', 112: 'e559e9a3-2b48-41d9-bdce-aa9a519683b0', 113: '9b9eaf58-afc7-4686-9e64-02f2349a0ca5', 114: 'af23b8d9-b805-4dab-aa24-c7a98fa4bdf6', 115: 'd03dc2eb-54a3-41d5-8c89-71659b1528df', 116: '193b62bb-677b-496d-9d48-deb7047069cf', 117: 'e1cb348e-9f42-44c5-a6e3-1236cbe0d6e7', 118: '527ac1b9-9bb9-4567-9423-a12397c52602', 119: '697734a9-9a2a-4203-bd05-339a224553e6', 120: 'e9363b31-bbe7-4bcb-9bec-4c7b920a8f5b', 121: 'b7a0bdfb-a06a-4c99-809e-f7fe7f266874', 122: 'f2cb5fde-4924-4a15-87ff-4c6e1a02acba', 123: 'ab8e385f-9dc3-4160-b2ab-2eda3da407fb', 124: '21f1a3c3-a1d0-43d0-b634-690556eb9356', 125: 'e6951c6d-081b-4ae3-979b-2cf537c7a3a7', 126: 'e02df683-3f55-4e22-b34f-d66287f91ab7', 127: '4fd5cb9c-38c1-4cb2-b547-b83e4534853f', 128: 'a6bfe5c4-abce-4793-b198-ad3fd2c0d37c', 129: '84fddbd1-13ac-4690-97c5-ff4170ff2e3a', 130: '8774666a-c72f-4dcf-9075-974915dc56c9', 131: '7ae75d65-0422-4796-8285-6fe3ccde5b47', 132: 'dd844161-7a8c-4b8b-b1f5-92ece2c33b91', 133: 'ddc5567f-50e7-4f00-8044-67fc640b31db', 134: 'b396d99d-fc89-4ecf-8a27-a930c4d18baa', 135: '2bd63085-920b-45a4-b13c-05ed8f9a754a', 136: '98806072-2b40-442d-a88b-fa5c367debcf', 137: '37a68f6c-7f23-463f-a762-a5d5ae4fc254', 138: 'c0359e74-881e-4fd8-a668-8efdb85a6830', 139: '00852c2c-18b9-4519-a667-e6efeb3d98b4', 140: 'eedc5e57-6d23-41fc-bb44-fcf1da48f0b2', 141: '858c560c-ed84-4791-a369-1423a6fda796', 142: 'c407c529-70a5-47be-9d80-8da7051403a8', 143: 'fb189033-3584-4c9d-a873-7f3126785253', 144: '379b119a-c702-4c65-81e5-d37788b59834', 145: 'fa5dc53c-e6cf-4cff-830d-7e1140602cad', 146: '454353e5-5494-47ea-bb2f-8f3cdf712d89', 147: 'd2183040-8030-4564-be8e-6f53a0f02c3b', 148: '5bb11b26-4e27-4403-8b42-b433370aff2b', 149: '884e13bb-8395-4191-aa67-4edd09d6e028', 150: 'c2bc5656-09ac-4560-b853-a0da1e527574', 151: '23525883-7eea-4ee8-9898-9b8ac53ba522', 152: '9f43972a-60b6-4703-9dff-f2200584a360', 153: '4d868fbb-817f-4655-b5ad-3ad04fae8606', 154: 'ae5d1363-0d99-4bbc-9ed7-c258b2eabc2d', 155: 'aea3dd9d-a7f5-4b38-baf7-0837b91dac27', 156: '903385a5-0851-4aa0-acce-0ad990ae09a7', 157: '470a4b39-e61a-4383-9dfc-1a35b1f405d8', 158: '87956496-9d4f-40e0-adbd-c3644836faca', 159: '06f2774c-e44e-44c0-bfcb-5b77c6137510', 160: 'a14bade8-8654-4aef-abd5-0da8950c4341', 161: '124aef2c-22ed-40f5-a1b8-b58157796910', 162: '1c030866-5e5a-402b-a24d-a7e700a83580', 163: '1e0fecbb-887c-4d6f-9763-5eabc89878d6', 164: 'c3f65fda-0cbf-4b7f-9e68-9a5437f92645', 165: '4fdeface-bc5c-455c-bb84-3298a86e3bc0', 166: '806c1034-caf9-4353-af00-7eb0bdbcd90e', 167: 'e8d73bff-232b-49c2-ba32-54ae77895bf2', 168: 'b93300ce-8e8f-4b0c-ae97-6c73df1b010d', 169: 'fc46d238-49e0-437c-930f-db2cffe1010e', 170: '843d3965-31e1-49d0-94dc-36718a84ffab', 171: '9c1f36c8-740d-4b53-9bbd-c634e9b7b243', 172: '402dc926-a2d3-40df-94d0-850131e4153f', 173: 'e5cfeb62-5938-44eb-a440-fbf8d6702e05', 174: '8beadecd-9552-4fb1-bf3a-beaf36e4b233', 175: '2af73b5c-b127-4ba3-8dd9-54f07f0331e4', 176: 'ec27062f-fa23-456a-92de-f67141cb2aaa', 177: '9af2ae14-f371-45e5-bbaf-024d5524e907', 178: '4e9d09f5-8ec6-475f-a012-7685c93b2a7a', 179: 'dca2aff4-07ca-4d11-ba9e-5a66d9965704', 180: 'c1214526-5f2e-4fcd-8659-670596d0e9eb', 181: 'c8ea92d5-6f16-4cf2-be69-fdaab53d3ae9', 182: '1689f261-3c50-49ee-875c-f15d76f62f9b', 183: 'f25408c9-8441-4f9f-9013-c7876ab27385', 184: '53e03315-754c-4a73-89ca-1f438436bd6f', 185: 'b0977711-83c5-4043-97e2-4ee5051b6c8e', 186: '619b8b42-bfc8-497c-8a35-ec9466becf5d', 187: '98091abc-48bd-48fe-a00e-bd4fae4bb60e', 188: 'fdea6d19-eee6-473a-9c98-c3cbbfc3f8c3', 189: 'd2752681-1ec4-438e-9989-1f1a4b91cea3', 190: 'f19114ee-fbf6-4c30-a9fa-afc1a4c3d208', 191: '0e995a81-5733-4828-aa54-c17527a17c28', 192: 'a6d19805-96b8-4f46-8182-2ae369cc78e1', 193: 'f6bf98a3-4331-4724-b5eb-053b3fd8d0aa', 194: '473252b7-2095-4055-9842-b589567696a0', 195: '68b66641-9666-46c6-bea5-f598117422e6', 196: '62553398-4daf-4871-88d6-257fd57e6419', 197: '44f45c0d-7e13-4de3-ba99-464bad6129b4', 198: 'a308e9d5-4719-4694-ae7b-d00b00c0b924', 199: '1afbfb59-e7d7-43f6-aa60-efeda5636095', 200: '7c6f5c6f-ae37-4b45-a427-e74b64a5deb6', 201: 'fcedf569-b7cb-49fb-a75e-2de598cecd78', 202: '1c21c2fb-1c44-4bfe-a019-632f43308b00', 203: 'e9cadc68-7771-4c65-a45c-b9c09c0e0188', 204: '299861e7-a61b-4528-a52f-ba22227c3c9a', 205: '377fa5c9-db6f-4414-a68a-db163476ba2a', 206: 'a0d48faf-47d9-45fc-8ce2-3f9839f79888', 207: '52583c57-1ba7-4f77-98a5-ce5f646d0b9c', 208: 'f48627ca-3ad1-47df-9a91-c5eb7036befb', 209: '0100a31a-605c-4b43-bdba-26b19431f9ac', 210: 'f707296d-b7de-4407-9220-9d01ae6005a2', 211: 'f92bdeeb-433e-43f0-a4af-b50203ffa3b5', 212: '9e42217f-3c88-41d9-ba6e-3c4f4684e8c3', 213: '14c2987c-4617-42a6-a254-5010bbbb3bc6', 214: '35d49992-8c1a-4fef-90e0-e40cb339ca79', 215: '03b6e5cd-e0ce-44a3-94db-00c77ac665c5', 216: '60ce3b85-d310-45e3-b4ad-890d977388c2', 217: 'f4648a6c-96fa-4bf5-ab1d-16e98e2a4d5e', 218: 'cf3b4f02-8a9e-49a1-8509-77a13b3e35dd', 219: 'bd616d7a-29c4-4104-9b8c-0b3da7c32aed', 220: 'c757b14c-e2c6-4260-a7c3-f2f85915d327', 221: 'd51912db-eeb6-41f3-8a73-eb7a7b3fef1f', 222: 'fc7ecfc6-e9ea-4ef5-96bf-9594b69d3b9b', 223: 'dffd269e-5939-4eca-8c91-b9f7e1f62bed', 224: '04a39019-270b-4861-b384-f4cc26a4ae69', 225: '5361d76a-9102-4114-ab7d-5104d3e29f0b', 226: '395fce6f-cdfc-4cee-9ff3-592f3f17c463', 227: 'cc86d5e7-fc3f-429b-ae31-570b45f3dcf9', 228: '813404bc-aa9b-4cd0-b71f-7ed65f525f04', 229: '16944431-c9b3-4ca4-bc22-42e0c1a3f931', 230: 'ae723e2e-1170-4c6a-9650-6f265815aa5f', 231: '32083d38-57c1-451a-aa39-9261eee6377f', 232: 'ed65d18a-c398-437c-9ea6-4f3638d487bb', 233: '04610fe8-eaec-4d71-8aa6-1af7208b88e4', 234: 'b578b0bf-0d4d-4e6d-8099-2f2f22918943', 235: '2986140a-ba41-4870-8a86-719cd9263e11', 236: '88bfca01-cc02-4899-87b4-9d8243220758', 237: '699f4e84-feb9-4391-8ed6-84dbd7440c63', 238: '2cdd8dba-b2f7-44e6-9c8d-f7c731320ce9', 239: '75f6abc8-ab02-4708-8502-b5c8f6597d49', 240: '4c00f908-d4df-4211-9407-0298068bddbe', 241: 'ef9129e0-82fe-4586-8fd1-fdf02940e38a', 242: 'da0288b5-df97-4b03-910f-f982bd350c82', 243: '53d68817-4ad4-4c43-aa10-7e4d575d84b4', 244: '324654e6-bfbb-4255-8495-b580a501172b', 245: 'baba9408-8d6f-4b0b-9766-b9d8246f6556', 246: '00cb06f2-d185-4a41-81dc-69887ad9a0c6', 247: 'fa0e5181-e639-4f8a-8c62-cc16d271f944', 248: '792d1d7e-ce35-4d94-9e7b-1bca23a547f4', 249: '2540e1da-cc83-403c-9298-2452cc53ab50', 250: 'a78871d8-f5ac-40c6-a4cd-035ed7249ece', 251: 'ce5dedad-2a57-40af-9db4-3ae025af64e7', 252: '1ec6ea76-3901-417c-81bb-e50a2d0fdc50', 253: 'c9c8955d-1200-4784-9b78-6da054a00f03', 254: 'cda00722-8376-416b-aea1-6c4e69918d99', 255: '0dacf4e2-d064-42c6-b5cf-852f390f9bf5', 256: '2b92e2dd-d61c-4ebd-a733-a05cd796fa4f', 257: '14e7f14c-d155-4116-bab1-72bb98720a55', 258: 'f120e25f-f65e-4b13-b530-1fe934d40e64', 259: '73b4565f-359a-49fd-81fb-6599e745e5da', 260: '415e5e72-4f7f-499b-869f-754d3db4054f', 261: '9af8f5f8-f72b-4d38-8fc7-f33d353e0ac4', 262: '6afed915-6838-46c2-9e56-f44b3041681f', 263: '0087c232-93fa-4aa5-b425-dc5ccae18849', 264: 'c837da03-265e-4e19-ae2c-0c9b038f2950', 265: 'dc86d625-4700-4286-813f-7224b4ae34ba', 266: 'ea13f97b-7ec7-4458-82af-dcd09af41b06', 267: 'd5b3c3ac-1062-4e62-8928-ec5ea9c929c2', 268: 'dc3600e3-ddf9-4919-af66-7dd6947fa6c7', 269: '3b66e015-0fc2-447e-9759-17b8c33241b9', 270: 'e2f358eb-657c-4f9d-ad1c-cb2b9008dab0', 271: 'ff7b505f-29d8-47cb-bbf0-a70278b6f96a', 272: '522a9824-4a8e-4b81-9268-89e92e047051', 273: 'f2ac6d7e-b658-4681-bd4f-c43d8ac69612', 274: 'adfc32fe-2d2c-4ff9-9777-a9ccea1471b8', 275: 'e773d195-c6a9-42f5-80d4-97d405ce35f1', 276: '45fbd2f1-3228-4229-a545-a3375b9fd6ad', 277: '2402fdd6-1460-4bcc-800b-2e122b305851', 278: '006a9108-cfb0-44f5-a667-fc2fd6f20b09', 279: '234be2c6-a59f-4047-ac36-823e8ec467bb', 280: '07e00e43-f51d-4ca0-a499-be8ee2b7d1f2', 281: 'c4d39a90-14de-4c4c-aa2a-caf0502a217f', 282: '39dcb2ab-c74b-4884-9621-54b6435b0dc3', 283: '7719618d-25e9-42b3-9b0f-87c5583b8a83', 284: '678a3e3b-75f0-47b5-a63d-fa712ec6d2f7', 285: 'cd53b2ba-3d8f-431f-b5ea-852b1e230de2', 286: '35f79fa6-a2a0-43bd-9a27-b39445083487', 287: 'aab5ec6d-565a-4a4e-a275-ca84df22b999', 288: '1ff27bfe-1229-4f26-b834-82bc3d732987', 289: 'b80d25bd-59e9-4560-8e1a-0dedbac3ea45', 290: '0ff051cb-6350-4731-bb74-af8f8e0e4582', 291: '939be8ac-43eb-446d-a2f7-8083a5bc3460', 292: '7258cf00-93b7-4ae0-a55a-626d87c04181', 293: '6e9f211e-8704-4f45-b48d-295806d652d8', 294: 'b5723618-9d74-4cb7-8905-bef9613a2cb2', 295: '1612940c-7e6b-42cd-a2f5-894130f4aa65', 296: '9fe3f11e-6c4e-47d8-b272-649871b2d573', 297: '2c479561-23b0-4fad-814c-7ecbe26e9245', 298: '32448fe2-91e1-4b79-80f7-22372404fd91', 299: 'b7e4334e-468b-44e4-a8cf-de2f785d2613', 300: '46f5875c-77fc-40b7-b822-ea441d66cc19', 301: '94ec56cf-2ae1-4afb-9fc4-bceaa43a6235', 302: 'ce336cd5-b9c4-4164-bc0e-2185d3af1695', 303: '3df91b7e-c3b3-41d7-a66b-8214915e575c', 304: 'cf47b446-3888-4226-8118-04ac1f147f62', 305: 'ebda412a-815d-42a2-b5cc-1781d1e4e1ab', 306: '74b42c68-3a0c-46b2-b7f8-c68c495e5496', 307: 'aaf40402-eb5b-40c7-9468-d7a592ea1d68', 308: '8501b517-edb4-4953-8782-3c89b86f5db6', 309: '12a3bb11-9bf6-4703-9311-cc26754293d6', 310: 'b7453f26-db49-4fa7-88c7-21e25bdbc16a', 311: '1cf3fa0a-fa2e-4d7f-80d1-655cd7017639', 312: 'a274dddd-7f7c-41a5-9162-6a32ec91a9c6', 313: '24a60a26-da61-468c-bc01-f5acb1e9527a', 314: 'd8a2d279-2bfa-4066-a4c1-4794fa6904a5', 315: 'bb231727-8dfe-477e-b8c5-f34ba80d732b', 316: 'd86146b9-683d-4736-9ae6-95ad6aaa1062', 317: 'ceb07a19-396e-463a-8dab-4e55eece0e0e', 318: 'f587b64a-198b-4d0c-bf83-44551e9693ab', 319: 'f66da7e0-fcea-4f20-b1ee-f69637845ea7', 320: 'bdab8307-c815-4600-8eec-58c74a188add', 321: '0883a44c-3d38-4bab-9da3-3470e781d862', 322: '32bd3770-8ec6-4722-9d7c-7d5655718ebf', 323: '254298d4-15bb-419a-a037-8c9e86b8fde6', 324: '0639023f-bd86-4972-9b7d-9e8f9a2a30c5', 325: 'a089d8ee-3c0d-4bff-a462-28729cb33001', 326: '9f55efc2-5d48-4d43-889c-9e7b4537810d', 327: '9ca1173a-8ad9-4809-82f9-a1d2cd4dc6a2', 328: '676a38de-c51a-405c-84d1-0f6fea376562', 329: 'f035efad-fde3-48f3-a599-16fa32ec5dee', 330: '5c294aa1-94ee-4049-aa4b-e707b2f126fc', 331: '9c5ad027-e72a-465b-acb3-7eb576f118c4', 332: '42a1dc1b-b3d4-4fed-87c6-ca74ad64b003', 333: 'be088cc8-a635-4044-ace1-d0b7198fd349', 334: 'fe1caf8b-a089-4075-8152-697253f5e794', 335: 'f3d2361c-7762-47a2-9e5e-b5267d6a1a18', 336: 'd860cc5e-8f69-4b09-83b2-e648592e27ff', 337: '8e3ccde8-f9b1-45b4-94eb-52afa6676f95', 338: '3cfc10eb-b67e-4578-b27f-5ba85d0d6bac', 339: 'eed9f489-97a4-46e2-b35a-b05954d280d9', 340: 'b7a66369-72a5-4eca-9b25-665dfa08bcf9', 341: 'b43072bc-8254-4787-9828-f11cf1dd72a6', 342: '9c5ee3f0-9a53-45ea-a224-f76c886f0589', 343: '0da23801-b3f7-44e2-9486-948a6cd55ab4', 344: '9b25e233-d084-41a0-a51e-ca79f10f8941', 345: '7f15521f-82bf-4200-9cec-8e68b6b6768f', 346: '5cb81121-6805-4260-bb35-de674d7bfb07', 347: 'a84af53f-8218-4754-b48b-ae2fa46a0089', 348: '2d408489-deca-4fa7-8017-10e18527ac69', 349: 'ecdd9bb5-abc1-4088-93c7-f965ffbf3d5d', 350: 'd5caf0e4-34bf-4c0c-9a11-4315ff012531', 351: 'c5843afd-9cde-4e25-a3c9-20180ba35bbb', 352: '9949dd0e-bc3d-4cd9-a6bd-f1ecd629a549', 353: 'dff4a90c-b03d-40a9-a2cf-6605152bc823', 354: '258237c1-ba64-45f1-a469-fc748e3c7ec9', 355: '991ebeb2-1633-4ce8-8dea-e4932fb50a19', 356: '5392427e-baf9-4bcd-a7ab-63cdacd72c74', 357: 'ca591216-9cfc-4509-94fa-56b665a13d84', 358: '6f16fd78-f0ad-4afa-ac7f-a9eb068d39e8', 359: '4af0c41e-55cf-40c6-a6c8-c018d738b607', 360: '18d5525e-193a-4af2-91ad-9baa58645fee', 361: 'ef9860ca-4389-4bdd-8e36-77b144409437', 362: 'ac0d2970-4259-4f33-9cae-69588e597cc4', 363: '381eddfe-4110-4ed4-a799-987bfdb52d62', 364: 'e730b80f-ec27-4a5f-8cd5-2aaaf5308ce4', 365: '039a876a-1258-4652-a0d7-5f7df7c7348f', 366: '42551edb-76bf-4276-a90b-aca5a6f87746', 367: '42b91542-0be6-4c44-bc2d-4c22809cd026', 368: '01a714e7-94d1-48d6-bcc2-ab622484d725', 369: '6103527c-05ba-4ab6-bc4f-f2a3b82c9444', 370: '5b038767-2638-42e6-ae98-afe2b003f334', 371: 'ccef5302-af63-4554-bd86-6d3d6edb65d1', 372: '8005981a-1562-4a61-af23-402535a2f013', 373: 'c24618f0-ce9a-4af5-831c-a08e7dcadfa9', 374: 'e06bee5e-1cb5-4160-93b8-dc0cc544ef15', 375: 'e111baa3-c284-4664-8a69-e5aa6f6a3b3c', 376: 'a236683f-5b9b-449f-b613-975b01d1962c', 377: 'cd29cf6a-5ca7-400d-828d-7375f5e95c5c', 378: '7cc7e65a-6168-427d-91d8-a6d8d1d0a127', 379: '0d5416af-326a-4731-8caa-856656d6b0d1', 380: '050b1d5e-4b02-4195-86ef-a45f0a6565e9', 381: 'b4f6deba-5d30-40e9-a0c1-4b37b540e2c2', 382: '93b1c2f2-ceb0-41d3-93f1-b512c606b417', 383: '119b6ad9-5170-469c-9e0e-273b30263b54', 384: '37bafc98-0842-439a-93a5-fa526f63e4f6', 385: '3fff807c-fc4c-48af-ad74-4f6f8241cd11', 386: '5f92caf9-059b-4599-bb0a-05c197d8e7c1', 387: '3e850db1-7c07-4061-bce2-bfec6c202a7a', 388: '512d1b7a-5369-4589-8279-43551d50c2d0', 389: 'd0bbeffd-85ad-4994-bfd9-75e8e1ce4582', 390: 'a0a22853-7141-4a4b-bbad-95f15c489fbe', 391: 'dbfc98a4-ec0c-4330-9825-4f09f13128b1', 392: '090c4e24-5e95-4768-8bcc-b0b00592ce6f', 393: '1306a8cb-d25f-40b4-b882-bb501bca89e1', 394: '83db2840-2eee-4b64-87cb-d93ee0c4e54f', 395: 'b592ba4f-c3ce-4078-b221-6b72af0e8efe', 396: '93ffa59d-1f36-4f90-be4b-3e96c412d335', 397: '847f7d24-af90-448b-bf9b-954a2435f380', 398: '04c34d2f-85d0-402c-899f-0c4051851bb8', 399: '9678af3e-0e63-4276-9d35-d6cfb99b531d', 400: 'f47b63d2-ac01-4bae-add0-04325475d8e6', 401: '2a29389c-99b0-4fb3-bf86-d2e70e042cfa', 402: '19a7f0f1-f7d8-4f6d-90e1-b951b1a2bc8a', 403: 'a6482c73-9b45-4d88-9866-d015a3dec70d', 404: 'c0a28341-00cf-4023-acce-38c9394dc994', 405: 'e98eca7d-d955-447e-b863-1cdf5484be60', 406: '58f7588c-4613-463e-8201-c3c154c712d8', 407: 'f2e8bad7-a0a5-46c9-96bb-dbac160beb3f', 408: '66fb848d-421b-4d3c-a71e-fe7045445ad9', 409: 'd540583a-bfd2-468b-aafe-ea0b4523c9a8', 410: '236a56e9-8627-4f3a-9d7d-57ec5fb8a5b7', 411: '9b733475-c96e-4837-95ac-ae699cf21392', 412: 'f4572ce2-71a0-425a-bad2-f616f7739d52', 413: 'aabcc56e-ff80-40e4-95f3-b02fe5317873', 414: 'e3bdbf96-4254-47ac-8d15-a07893df1e2d', 415: 'c99e054d-4692-4ff7-8d60-afeff60b1e76', 416: '8e010291-d21c-4168-ba68-9759419a7d54', 417: 'fe3df6e9-24dc-420a-9794-a645e437e74c', 418: 'dc313f79-8df4-4678-aac6-c41a1a6188de', 419: '5abc6e35-ae84-4486-99eb-63cd1245298f', 420: 'd6ba04db-5747-4f13-816b-8e2046b96134', 421: '522b5be8-8bd4-43cc-8d97-b70f94280c47', 422: '3f832765-b21c-44ee-a66b-2d805ea44827', 423: '3bae3683-9fe5-488c-8346-b62868b78a9a', 424: 'fa78a017-bbe2-48f6-a54f-fba7af38dbc8', 425: 'a3f0f36f-4d5c-4510-97d7-c707bfc44702', 426: '164fcdea-8f42-4e39-a08c-963ed310a77b', 427: '0340cc54-4830-4e26-b340-ea1e234fc0f4', 428: 'e3d706c4-a370-4ed6-998e-a4e9a0f0f432', 429: '03f5efff-623d-4de8-be4d-a8ef531f8acd', 430: 'ff49cf9e-aff6-4c28-9df8-dcb301f08094', 431: '3f08613f-a37a-4adc-926a-73a2bf72b059', 432: '113ed085-2f15-4aa4-9459-4fa86577c137', 433: '4014e882-c104-467d-9d71-2bb0418699ac', 434: 'c87612b1-5fbd-45ea-a1ee-07f79adf85a6', 435: '5b8b6643-9505-49a1-8d9b-6c82ea012316', 436: '333c6207-afce-4237-b65e-93e980329d23', 437: '233d1bd1-8d50-44be-8da6-52ed966abe13', 438: '12e319ce-12c7-4e51-a990-587377d8d61c', 439: '438e19eb-6c7c-4983-a391-0e6f366a2b8c', 440: '250837ea-190c-44c9-b776-3c4184fb9fd4', 441: '3f992224-145f-478f-afb5-5fd2a748937f', 442: '02254506-469f-47d6-ac61-a842ae497094', 443: 'b266c0f9-14e3-4167-b3f4-c54df6388619', 444: '6fb55835-66a6-4b61-ba3a-199a44b0a625', 445: '8894ed8a-f95b-4842-8e5c-54cb11b6c3d1', 446: '56a44acc-c415-4362-9e03-638567b85062', 447: '73d18b9f-7720-4ad3-a806-d7c7dbe9435d', 448: 'ddc608d4-b67e-41dd-a2ef-2695bb7d32cd', 449: 'ef03fef1-f4bb-4b66-b066-552bb95034b0', 450: 'acf7a5f1-5453-488e-bc01-446258d6a1e0', 451: 'f3990c41-3906-4d82-9a3a-1199fa045537', 452: '16d8cb2e-599d-4bc3-8bbb-d0eac1c85484', 453: '2d72038b-7244-4438-8dc4-84ac0fcfe98a', 454: '94a05dc2-6992-43ac-9d64-f69822a383b0', 455: 'a0d8433d-1685-4630-8f62-67912401ca05', 456: '59db8cb8-bd98-4cdf-8e07-9535b1c99be0', 457: '58813cf0-21f5-480c-874e-cb060de7d6a3', 458: '364abc54-5778-4bf2-9f94-9a31cef97031', 459: 'e6165ed7-36f2-45e5-a89f-f386402e5b01', 460: '33496468-f1ab-4bf3-87f5-d7e66807170d', 461: '76cbcb97-153f-4c2f-96b9-6c474e9e3fed', 462: '68c6886f-b279-4d12-b15c-be57bfd54821', 463: '0a94a4e1-41ea-4eac-ab25-ead2e51e1172', 464: '00ea62b9-1dc3-4b84-b28e-0949bbd3c216', 465: '2208d1b5-2cef-4cba-96f8-adfdeb6afb14', 466: '3ad1ced1-7979-4234-b715-76ff5d15b484', 467: 'fd174474-f0a7-45c0-9e4e-437375af98e6', 468: 'ff71b6dc-9cec-4be8-9b9e-0244651359a1', 469: '6f87b38e-1a84-4d58-88e3-478cba1c8454', 470: '62a28c67-b429-48a0-9656-de56bd5ddbd7', 471: '9efa6c56-1d87-41a8-bf15-4bada4a40dee', 472: 'df1572d3-b909-4d77-a4dc-a770ade6cea9', 473: '66784337-bd35-41a0-9e6f-68b944706c0c', 474: 'f29239e7-125a-4f79-8344-af297132668c', 475: '510b6016-68d3-41be-8681-67d97a69c2b5', 476: '8684d773-bdbb-4df8-a4c6-d812a1eb89e8', 477: '70a5ad8c-e23c-407b-8042-3ca99b80646b', 478: '6fa2ecf0-157f-4ad0-a060-22cc85a45f67', 479: 'f03aaecc-96fe-4a0a-9111-0ed7d8f5acdf', 480: '1c911afb-d4c3-4304-8496-302da4ead14b', 481: 'fce777e8-8997-4394-a262-ba5e92c664be', 482: '4f6bdb0d-be75-408d-a347-69ed85736200', 483: 'b813b167-69f1-483b-a1cc-92a15fea2307', 484: 'acab609d-591d-4ee0-9ec1-40941e5639f5', 485: 'd34c7548-8aaa-40d9-bb93-02f979bf3f3e', 486: '1d155e8b-d675-4522-9aa9-6a29e3890ee0', 487: '5406b69c-3c5f-4ee7-a65c-5a6196d9faf8', 488: '6bb7daf9-0343-496c-a361-0885b82b6aee', 489: 'a6b29de7-8cb3-4278-8863-4740cc68c149', 490: '7776794e-e261-4753-b149-3299fcd6491d', 491: 'fd8f8897-f079-4ec4-b57c-082b2f51c9dc', 492: '7386ee46-1f50-42f2-bc64-eaaa1d371b39', 493: '5f253a50-d7e1-4735-b9a2-dcee0919a142', 494: '1aac07b8-cc6d-428d-8144-564e373d2b3b', 495: '9a649dd7-3042-487f-9023-fb712ec7c496', 496: '364c2f57-c65c-47f5-bf8b-01708ef02ec7', 497: '70e6cb4a-3074-474b-9ca0-782c7d5530b3', 498: 'be7dc399-374f-431f-840d-3711ffb47cc6', 499: '8713a3d5-7c64-401c-9b99-6846bd1c9711', 500: 'a84ef9e1-8a8d-4399-a7ea-b045a74af158', 501: 'db74210b-f995-481e-88d8-2260ec80d701', 502: '7c4aca4c-b044-43fb-9793-1c6b454af840', 503: '3f14008c-9672-4c17-91cf-ca19043c6384', 504: '9781d1c2-b28a-4ec1-87e3-330a6437e583', 505: '17e658da-0792-4169-acf7-45f0488ea6ad', 506: 'd725efc5-1c9c-472a-9c42-a33606cb3158', 507: '9b6a97f3-b061-4663-87c1-b61277815633', 508: 'a6e326cd-ac0c-40cc-b4b4-e2168e76c2c7', 509: '23c0f486-1514-4800-b21a-903297e56c4b', 510: '58f4d9ae-c520-4d36-a8c4-bf1e88be1419', 511: '96b235a6-f63e-4f7c-aaf6-dd256e0d24ab', 512: '8ef43e7e-b047-4ea8-8f7c-2859ac6ed7f2', 513: 'e03c2af9-e3de-48d3-aadc-fa2712fd0897', 514: '7bf8ebf4-8c2c-4348-a5a9-052ec976534e', 515: 'b535437a-4b85-4f57-b61c-774a1c0b3a2b', 516: 'b43d53c2-9875-4a11-8229-ba86d0cda528', 517: '90aba114-f172-4e05-b300-269cd311c66c', 518: 'ab4a4699-cc45-4c67-8573-4516d5b3ee3b', 519: 'b261c5b1-51d5-4a29-8c0b-988e42b878f5', 520: 'f0de4f0e-01e6-4181-bf3e-2f4dfb4f108a', 521: '1f674b6f-88b8-4054-b60a-2af4cc57085e', 522: '45d1e74c-187f-4ead-b012-746e713b4555', 523: '34c83e20-79cd-40a2-907d-d20ce057a1e9', 524: '8fc37bdf-65f3-4772-b3be-58a48c14b7b0', 525: 'ca7bdeda-b627-48d5-8a16-5f871d54d675', 526: '770a43a6-aa20-4388-a3d3-7ec1480242a7', 527: '225d18d9-0ce6-4232-a10e-8175dd2aac24', 528: '7cf36c8e-7753-4758-8014-ff772b4e1631', 529: '8f3e80ce-373b-4fd2-a050-e99c1036b7ff', 530: '318c64f5-2a16-4dc4-bbd5-e50f245ea569', 531: '65ea69be-89cd-4bf7-b41a-99bd55a79bb2', 532: 'a3fc1551-ee7b-4ec8-a2db-a41bb2613dac', 533: '16631334-b3ea-4f01-963b-c716d7713330', 534: '6f5ef6ea-3f95-46d9-a496-d3b1ebafb7e0', 535: 'dcd0a2f4-e477-4429-a7ba-8cbf4653bcca', 536: 'cb4eecae-c593-411f-a3a2-620900194829', 537: 'd963abc7-97dc-4374-84ef-cdecfaaacff1', 538: 'afcc8cca-056d-4a74-a2a9-27e765b1520d', 539: '09c83c46-6b27-4920-83ba-722a59b595ab', 540: '229ab6ce-05b3-4a3d-a182-a57d275173a7', 541: '69cf87e2-4b0d-4473-a702-702fe914c4c6', 542: '6f807278-a47e-48be-ae91-313c46b86856', 543: '6c3e1dd8-55c9-4341-bdd8-6b5f462d87b6', 544: 'd21a9754-8a64-447b-b0d6-16d616e82772', 545: '05378ad0-02ce-4dfb-a4bc-0da76cb256d7', 546: '32a65f3c-062b-4ea3-97d9-82353e23815b', 547: '18463a30-ff9b-46d9-ab3d-102c09c2901c', 548: 'fd964c5e-f017-430a-8d9c-b98edd200678', 549: '5eff7c2b-54fd-4619-949b-5f9a25b30074', 550: 'f040ae15-7061-4354-bdf0-2dd8db6d435e', 551: 'd3d55d82-d2e0-4c73-920b-07322c72f2e6', 552: 'a2542377-2158-43b4-94a9-186fb3de5350', 553: '16a4f04f-5f4e-4739-b1ec-47e0eb048671', 554: '297aa49e-f55c-4bf7-945f-14173dcabe96', 555: 'c29128fe-eb20-4bc8-8a96-273a7076cc79', 556: '754e575e-2ac5-40a9-ba7e-0e1548d5f77d', 557: 'faca8fa5-b7ad-4aee-a987-90c8191e6e96', 558: 'd153bacb-a4ee-4e78-a0e3-62ba5aaa4fd0', 559: 'd0438d45-ae31-453f-a6e5-62b0094bec35', 560: 'abf6e049-225f-488d-84ed-97520f5ef6ce', 561: '2e7cd6af-6670-44f2-9a48-e3b13f126445', 562: '7076de41-ba9d-4aeb-995d-f4f54f51201f', 563: '95c5e09c-20bd-46fd-882e-76473e2e60c2', 564: 'aa4340c2-7b05-402f-9095-c0dec8e6e8c1', 565: 'e0421b8e-3d2a-4385-9c86-abfaaff1160b', 566: '258b3d8d-5a3a-479d-9c1f-f57f7845f252', 567: 'c4ee786e-eaab-4009-afe3-a3579ccc04ed', 568: '0839fc6d-9269-411a-93c0-4eea254567a8', 569: '1f88c69c-9516-40bd-861d-4361a3c6d3f1', 570: 'b1bd082d-c358-47e0-b8f2-f676d47ce792', 571: '559b28bc-e9f8-4a6f-a805-4d3e7800747c', 572: '2f47d573-acc4-4c83-8ec1-4992d6dd6ce4', 573: 'ee47c681-1518-4c3c-b804-f5be3ce3a9d0', 574: 'fd5c44b2-cecb-4ab6-bcbb-8b2e7259a7f9', 575: 'c2929d82-f3a8-45d0-b6b8-28dcdb72d503', 576: '6258754d-2288-49f4-a70a-6a6b9e78cbd5', 577: '1b5eb895-ed84-4a0a-8b5e-d15561e6a4ce', 578: '12511982-31f7-47de-8df4-a0b823254b5d', 579: 'e394e8f3-9f46-4372-a450-f8e8f0479246', 580: '572806cb-748c-4787-89c3-e8f57a340be4', 581: 'd298b3ea-4d51-4ed6-9c46-f4364ba071d2', 582: 'c8e20c97-dc14-4406-b2f5-a9055569221c', 583: 'bb81a655-ef95-4e4f-b9a9-ee5a9ef53707', 584: '71b0fd60-dff7-460e-8162-70e4560d2af8', 585: '85bf8c1d-5146-4926-83a8-369c98102c55', 586: 'dcbf3f91-63ee-4448-bc07-6d5b69442b68', 587: 'fd1c114d-45a9-47e4-970c-b5e36b807683', 588: '17f6f79d-2d9f-49dc-a900-79e669798f2a', 589: 'aeaa35ba-6fcd-4fff-8112-84f19eba1c8f', 590: '07cdea3b-22fa-4114-886a-92b04b5471c0', 591: 'c552b4c4-a22c-4aee-b6f3-865284a8c482', 592: '8333f464-6c42-4a19-9a71-fa73ff407163', 593: 'eaca6edb-a9ea-4369-8106-b872a3ad839c', 594: 'fd43290f-c292-451c-b0c8-1b75ed12a711', 595: '010e1f77-4fca-43cb-9548-fee979c30427', 596: '8db515aa-2a2f-4cc4-8a0d-d8e682a3d2e6', 597: '6e179a86-d683-4c32-8527-79966bf21dc6', 598: '86e6dc71-79db-44db-b406-19509c6522fb', 599: 'e5e611e1-fb1e-4662-97bf-7e7a5f7e9baa', 600: '1461dfa6-303b-4b78-9379-a1461d69415f', 601: 'd03727db-8ea7-4853-90e0-921a16ad1227', 602: 'a23c34e1-9cdb-4fdb-8aff-7be03e2616de', 603: '38b8792f-34e8-4f16-bae3-3ddc27e35f59', 604: '6eb826b7-ff85-45c8-86e9-8f63bba81d08', 605: 'a0abc48d-58ea-4a12-8560-716cb8e53321', 606: '799638d2-6b54-4ffa-867f-b2997cef4489'}
2025-07-07 02:25:09,553 - INFO - length of chunks: 607
2025-07-07 02:25:09,554 - INFO - Retriever is working good.
2025-07-07 02:25:10,072 - INFO - chunks has been successfully stored in vector database.
2025-07-07 02:25:10,072 - INFO - {0: '3b6c8de2-64a4-4f57-b31e-3aea728ca3c6', 1: 'e40786e9-5d9e-45a9-94b7-a529d1ca9b0f', 2: '11a97125-8564-414b-9dce-0eff53619680', 3: 'f427e11b-834b-4b1d-9370-384a3faa6c44', 4: '04590e6c-2104-4daa-b843-d10b1d2ee03a', 5: 'ebdf4a39-e772-4839-a87b-09952a21d0b1', 6: '06a5aedb-2aee-4224-9b48-8e9b78d6c16c', 7: 'bebf35d4-2b39-46e5-bd1b-3d134a81a833', 8: 'c466b4ed-0f65-4856-8613-807616e582b9', 9: 'f8bc8ad7-1907-4447-b0ca-aba539b5cf44', 10: '56ae56a7-b8aa-4fcc-86cd-39390c1832db', 11: '3fb6fce3-2b2c-41c2-ac42-f114d7d6f07f', 12: 'b85a5a7f-7ada-4f12-a37e-1801f3da688f', 13: '1572e41f-5438-46ba-9cb6-839f7c8d0fad', 14: 'db077e5a-5f67-4a19-bf8b-07c439e632c5', 15: '2f44e901-49d2-4600-914a-0918f12eb695', 16: 'c0738d65-d109-4deb-bf60-57204099a0ba', 17: '55d77db2-888d-43a2-bf09-5ccff197d0a8', 18: '914dd465-d061-4000-af7d-954d52e4cd4f', 19: '9ce9532d-ef2b-489f-b975-f814181f8a33', 20: '38bf5c1a-13e8-4446-912e-d92faf6ba2a0', 21: '07e4df42-8393-4a40-8d54-fc6e295e392a', 22: 'af642d15-7b75-4f0a-a69a-54a67089d78e', 23: '306a39df-e8d6-4355-8d64-a0ce5ef6a134', 24: '3b586138-b5bb-4486-8547-74e41b10be04', 25: '1d081f3b-e739-4545-bd48-7cf47aa728ba', 26: '7d5bfc14-48f4-4476-9778-70edd699ae6f', 27: '7864cce2-84c7-44bd-a115-edc9141fab2c', 28: 'b503bdb9-2a0e-4a85-9ec7-cae2849fc66d', 29: '870cb8f0-f058-4bd1-bc02-5199a64acf9b', 30: '92d6a8a7-0f54-477a-b06d-c55c21c6caea', 31: '3ea5b8ec-0344-446a-aaf1-bf34ab4eded5', 32: '4aa214c4-ed4f-49e8-9d4d-8a85d730a31b', 33: 'e812d2c6-8a66-406c-b249-fe38526bf5c1', 34: '88dc1077-c42d-4b89-8340-9d9ec2564a02', 35: '7a0447d5-599f-4478-930a-da1065a825b5', 36: '79cfe24b-0084-465c-8d28-817f4ad3fd76', 37: '2922eebf-bd52-41d3-a58b-4eee3d0fdd62', 38: 'db42db97-283e-4e78-9573-14183e508d37', 39: '2290439c-3b16-4001-a4b5-2c25ebb0b511', 40: '71e1e457-a8dd-4c56-bf80-45a334536845', 41: '974c4a88-3720-4f64-8ca0-230beb8fcb6a', 42: 'aca86e95-e37c-4eae-8544-18b64f64f442', 43: 'e581f93d-861f-4884-b323-b20c85dcc8bd', 44: '1c31cf26-c844-46b9-9d7a-8191b38d555e', 45: '4bbcc362-f335-4af5-9534-b585adaf1778', 46: '7fac28bc-0840-4ef0-a947-f601db0f0194', 47: '2d68b3d4-6ff8-48cc-a120-518f129f81d5', 48: '79b6e12b-0510-4a09-a484-6490d23e7086', 49: '9dd51ab6-c652-4a84-aeae-ad5156de9ea9', 50: '78a2d796-9c3f-413d-9883-18bdd3b75d07', 51: '02da78b3-969c-4fa7-a599-f02c27c8a51a', 52: '4e68cd15-afc7-47ad-b53b-f9429f82610b', 53: '9465852f-2313-4db0-b0e6-501d9fae87d4', 54: '6f27aa78-6785-4d09-9050-cb5298de8d98', 55: 'ca3d9a11-0362-4ecf-a430-fc7f4caba32d', 56: 'bc6e05cb-d75a-4d51-abf5-0d294ce98030', 57: 'bfd941b7-fb0d-4c4c-bdde-9cf373264f01', 58: 'ab308de5-2340-4c8c-b4b7-32e5930789b2', 59: 'ff5462dd-d775-4e87-ba92-643593b9ff6b', 60: '6b981b96-b8fd-486e-93ae-0eb0f37b957c', 61: '384213c5-ccad-4490-a84a-e162da531139', 62: 'a9895bcf-aee2-46d1-8b7f-bcef24fd63f1', 63: 'a9727e56-16aa-49fc-914f-0f7d084a3fcb', 64: '33f64cfa-cde2-45b2-91e8-02bff069c5e1', 65: 'c25e9489-897f-4e19-9f84-52745ba6657b', 66: '8d23f53d-8884-4ed4-938c-5a9236bb9139', 67: '378083fa-fbfb-43b0-bd3c-4ce7ffef7266', 68: '3f7d1bb9-edc6-40d4-94d1-94a45e643858', 69: 'cc91a183-4a50-4ca7-b856-ef13a4dbde80', 70: '920b171b-7308-4b3b-b747-e8dcaded9bb9', 71: '824f3057-1265-4fb3-89b3-3f467bc7af74', 72: '6e5caf54-36f7-4684-89b2-13f21f473ef0', 73: '896b09f4-d286-4cae-b979-ddc3accbb254', 74: 'ab54b3d1-61b3-454f-92e9-0b728d5b11e2', 75: '760a3853-269a-44c0-a3d9-45409244472f', 76: '7db71c96-d908-4b9d-bbd9-bb1ca84b3805', 77: '8f5817a8-6103-4eb8-92d1-c2e74499be8b', 78: 'ca17e3cb-483b-4a8f-ae21-9666140b0198', 79: 'c380fee2-f4d2-43b1-9dc1-f9f40b6080ca', 80: '72bf079d-a03a-4027-bdeb-e968373bfb68', 81: '4dbf23ff-0585-4dec-a5a5-292109077088', 82: 'ece8f450-b36e-4a17-9f92-7213c3e6521f', 83: 'c448fff9-6593-41b6-8ba3-254a64885512', 84: 'ae6ae91c-bf72-46ca-b322-c8fc200c39fc', 85: '1870b074-5fd2-4ad2-bc07-fc85b2c0cd69', 86: '0ee69d93-db3e-41bd-bab8-f85c87f6993f', 87: '0480ce8a-181e-4d65-9064-baa19658e087', 88: '2f4c0384-82d4-4960-b96d-d74d18af6424', 89: '18ba6f05-ce4f-45a8-9a9f-55d0f1ef8269', 90: 'f02d6535-c0ff-46f1-8d91-d878f2c4bdb7', 91: '364da140-e37b-42b5-a2a7-3ccfec6e3814', 92: '82ead76d-dc30-449a-b3b5-12d2ac62a1c4', 93: 'e6b27a48-bc1f-4995-807e-9aa26d81be2c', 94: 'd8383ea9-5002-4eee-b3bf-6b3e4825b8de', 95: '1e1e147b-2ae1-4b22-8cac-167a86a990da', 96: 'bd841be2-8c01-4ec5-9aeb-57ababadc8aa', 97: '25249f83-8eb2-489c-9c26-d1ee74c3d268', 98: '8c34b11b-4a0c-4098-9ae4-48f3245fae21', 99: 'c19ee26f-f2f6-4aa3-8c46-c360812302b9', 100: '27b83a31-5a05-4af1-85c8-88cfa553cbc3', 101: '154700b9-8f18-42d8-b29b-8f1cd1465883', 102: '8f11cd83-1521-479e-9741-48f5e14bdd9d', 103: '6d1bd9c0-b3d6-479c-856f-36e8389a07b8', 104: 'e1e7f2d1-d7e9-4806-8a25-989fbe7ed10f', 105: 'cf85969d-d579-4ebd-a5f4-7679a99f56c2', 106: '6ae5d34e-4fd9-4448-80b9-77a02fa3873d', 107: 'f27d83c2-06b8-4bde-a7be-e7ba8391940e', 108: '7346a491-365a-4a8f-b55b-74f399edf483', 109: '34c768de-649e-4f95-ba5c-decd4d74bab7', 110: 'b29462ae-b297-4651-a9e9-eecaa9d6cbb3', 111: '4ff76137-5e65-493b-859f-fcf48e98cf70', 112: '9c7935bd-baa5-4560-b51c-d1e7430736b7', 113: '5a162022-6e74-4446-895e-18ee72339724', 114: '2ccc6fc1-e32d-4ca8-ab94-8402f689c84a', 115: 'da3d3f4a-6c7c-46ec-9b33-b55ba3ba2d48', 116: '5c077a71-2461-431b-8641-84f382fc44e1', 117: 'de22e4ef-fab2-4739-8ff6-adcdb29fef55', 118: '8c2c16a3-1180-4bd7-80f6-69229171176b', 119: '27463c21-44a6-41eb-b863-d894d069e8ea', 120: '84f17261-f8db-43e7-bb1e-20ab28a42987', 121: 'e11f081d-4d33-445a-aa9b-b76e918ccee0', 122: 'b8b4f488-6fc1-4716-96d4-6fd41104d279', 123: '7ed0171d-8a14-40fa-bd88-4705b83fa4cb', 124: '8eedb54e-1083-493f-9440-9c3f24f8c12a', 125: '9dc78fc0-51f7-4321-a6e2-9f0cba2d5338', 126: 'e1fa2a98-bb4a-49f2-b8f4-b938145d9780', 127: '46526000-2b6e-42cd-a4f3-46f47e90e70d', 128: 'a9985431-239a-4ae6-87c3-0b70abfe7056', 129: '644671c5-f969-4e5f-9188-9c3254482009', 130: '84a4742e-72bd-4812-b201-1178eed182a3', 131: '7793469d-fa06-4e59-8b59-bc747a789f23', 132: '0e43971e-bd1e-4442-a97b-34566f95cd31', 133: '5437249d-8753-4031-91c0-fc898104f85c', 134: '3cc06857-0022-4451-b3e3-8addfde3f83f', 135: '6c73f886-68d4-44b9-bd20-288c918961b3', 136: 'f3f79c7e-2655-4e16-9e9f-a560ee777866', 137: '36ec6af6-cce0-4216-84e5-104cf98aac6d', 138: 'a26c7561-77c0-4b6e-9bdb-97ed2a91fec2', 139: '00d15b12-0c25-4f90-bbbb-5abf8316bb98', 140: 'fab02ee9-ab06-4bff-a442-f8a63539a7ba', 141: 'd7c3017d-3432-45cc-a9ac-76aa5bbb91da', 142: 'e266975c-e738-4814-b078-b30b18046957', 143: '6f7686e6-220d-45b7-9de4-c6421fefb9c3', 144: '50a3f244-4cb0-4d02-8e24-13d4bf7a963c', 145: '15f5d91f-6f62-4325-83e3-048dfab680b7', 146: '165f9e9f-32f1-4c70-a1b2-48d1629ff5e8', 147: 'c42f37c1-a618-46cd-a3fb-b8354b1dcd65', 148: '77ed19fb-ec3e-4891-9690-1d16cc0ed0f9', 149: '13e9b396-4a0e-4227-ab85-a22d5f2dc20e', 150: 'd3232ff2-cf78-4ea8-910a-5f69d5f46755', 151: '6e25caab-0084-435f-919c-c6cb14d2c3de', 152: 'dcc61439-6c27-4482-92b8-c31ca888fb43', 153: 'bf9a5cb9-91bf-40ef-a9c4-9b4d0a5a40b0', 154: 'f71e0b71-1cff-4046-8d91-0a8971d2c191', 155: 'b7fe6f90-c772-46dc-89ad-484f1defdba3', 156: '0b0b3b08-ada1-413c-8079-cde80a84e760', 157: '591da8a3-0788-4cee-a37a-bdff27692b43', 158: '74fbe24d-97c7-40e2-9051-1531053dd197', 159: '7d9831c6-6f21-428b-bfb1-f6d65d522626', 160: 'd041c952-d56c-4d12-8ad8-a121c02557a0', 161: 'd53f9ce4-13d4-4eea-b65b-9a7383d43324', 162: '73b3daa8-5114-4dd2-a079-5d2cdcca629f', 163: '52342097-da8e-406a-a7cc-326a6aa53fcd', 164: 'ff95575c-465c-42a0-91d5-748f74285677', 165: 'a7a8a6b1-70fa-418b-8deb-882b159cb6ba', 166: '1c1cc3f2-d821-45f0-a19c-a18d71eea1af', 167: 'dfb48a57-63db-4d1f-b72c-208814a59228', 168: '4b2eae44-d7c8-4026-8b9e-8870b8f129a1', 169: 'fff67307-32f0-487a-b98f-9b82dd4d8b73', 170: '49622c1c-6656-403b-9e69-a4da50dcba2a', 171: '140de5a9-f03e-40f9-a423-c3610186a6c6', 172: 'e3ee3968-fc30-490c-8a84-176ce4a4cd61', 173: '78374b2c-5882-4c04-9152-097ec0df1c60', 174: '2f27b9fa-08b5-46c2-9f88-689e6ad5341b', 175: '2cbdedfa-9bdc-4277-9031-846ae46c1d5e', 176: '894942cb-2b2c-48fe-9758-74683cd200f8', 177: 'd77b1e7b-9938-4344-8160-80e26bf11230', 178: 'aa09a5ee-7220-4d07-9d16-95047dfc4d40', 179: 'eaed50b5-5b1d-4882-92a6-ba20a34bedee', 180: '5a3beadf-20ae-4458-929b-9b815a82a5c9', 181: 'e172c852-603a-476d-8b62-f2308b7a39c1', 182: 'a67d5e63-d2e6-4306-997a-053aea05af2c', 183: '7f7d82d7-c435-4786-9bdb-c1896c874476', 184: '952bf720-dba5-43c4-9c61-e2e4b6996fa7', 185: '67aa3b17-a987-4ef5-9501-c4d350b77de1', 186: 'be618da8-e5d2-4a14-829a-a3322ca15466', 187: '15025f94-be5b-4ba8-8246-6a0f7427bb8f', 188: 'b9ee10c3-6b17-42d2-a2b7-7f27bc464169', 189: '0039241c-e6c1-4ba9-b1dd-1e03bacc3dbc', 190: 'dfa47ac1-7c35-4c71-a5a1-fe8a0a14bff7', 191: 'd5d24c3d-d35b-4a92-b778-af1ef5893a14', 192: '471a7011-2b16-44b2-8936-ba2eab0c9e9b', 193: '7ad74b79-d97f-4a4a-91cf-653bcbeddc9b', 194: 'c2cd2f6a-3c4a-4ea5-880a-fbcaaa4f5908', 195: '6a7b56d9-18d2-4136-a855-9eeb7356b0be', 196: 'ca01c8b0-4f53-4689-a9a8-cfefedde4f8c', 197: '5a181152-0278-4bc0-b5be-d322b0770527', 198: '7efaa950-f2ad-4650-a83b-5dbb32393ed0', 199: '1cb51fe6-f642-4260-96d1-7205e38e4047', 200: 'c5e20e9a-f867-4759-b756-b0612065e82c', 201: 'a732fd34-83a1-4c33-8496-7f3b79abcf7f', 202: 'e7acd80d-a70e-47c4-a981-dd62842b9e56', 203: '9af9df3c-a93f-471b-af28-cb621bd8a3c8', 204: '6319b9e1-0438-419e-9e15-67fa0d99277f', 205: '7d7a1314-154c-48f1-86e3-9f1666603a04', 206: '0b225bd4-fe34-48fc-8f48-ce0bbe38d872', 207: '8a507f83-f1cd-40cb-ac8d-c0b32fb4859c', 208: '3d6e5e5c-cea2-49a1-a0de-27fd58a83dde', 209: '5daf1c8a-5ea2-4dc7-a3c1-1d37428e1d14', 210: '1fd232db-a3c9-4baa-b743-87139566c005', 211: '8624385e-242f-4e72-9928-c4174cb9501d', 212: '44ccad7f-01fb-4d61-999d-663ccdf60cdb', 213: '8a95e2c7-7f40-49c8-9c18-a1c09a560af5', 214: 'c0708fd7-b7d9-415e-a8b4-849fbedf1609', 215: '5836d9eb-bd85-4154-8909-b5fa8a12133f', 216: '3d5daa66-eb3c-456e-8cc6-94f895429663', 217: 'c6600e6a-6704-48eb-8e2a-42051b5ea68f', 218: '1b636d09-9127-4670-9dcd-c3ee7c6d5144', 219: '5c33f4cf-a5ff-46bd-9d7a-33e122481066', 220: 'c3b7412a-aec0-4c00-bc16-8c5268be9199', 221: 'bb4f6e97-0980-49d2-911d-d98d0ee7346d', 222: 'fd859978-29dc-45d3-b1ae-44180530634e', 223: '369d2bb9-c72e-497e-a597-8567d2de57cd', 224: '8efb39c7-1465-4f43-81a2-c7be2c43a334', 225: '14c23f43-43f5-4329-8a84-06fcf4761265', 226: 'f906c973-6c61-45c1-973c-ac07a6aaa0ea', 227: '31ac414f-6ab6-4376-85ea-dbdb43071de2', 228: '8addfeb0-21d0-47a8-affa-e0c8ff1a34e5', 229: '734bc0c3-6fba-444b-b770-afd75837b8cb', 230: 'c41fcdd2-e542-48ca-83ba-ea5405dcb673', 231: 'e7870ded-0949-4cb6-b7f8-244264d9a61a', 232: 'e8933657-1f4e-4714-85cc-4a74777a9e7e', 233: 'e990601f-e0ac-44ea-a03d-adb36ad5126d', 234: 'cea02c69-bc88-401b-b08c-3bf564b55820', 235: 'abc24dec-b78c-4b8a-bc40-c3e2b8eb04f6', 236: 'd08a0757-2d66-41fd-9462-ad4559c46eaf', 237: '0d414e70-7727-4a8a-a521-4318d53a80b1', 238: '54b4a4f2-d02e-48b3-8a70-27815d6bd33a', 239: 'eddf4fd7-277a-44aa-8460-38e6674f73e8', 240: '472d86fa-7882-4cc0-86d7-356ea0b89ad5', 241: '1f434000-f157-4b0c-bd08-dafbdd8fa855', 242: '722d6cd7-6356-4d07-933c-031920b63faa', 243: '5d81659b-68af-4f7c-9871-0af41f5df855', 244: '23673183-949d-48c1-b28d-471e14d41c31', 245: '671fe08a-b956-46bb-8ec6-64f83fc016b4', 246: '653fddc0-b2c4-4766-b933-5755835efb2a', 247: '8adb3d48-efbe-42e7-8f3f-3d5b16ac31c1', 248: '2fdd8ac0-4f5d-4a47-9294-b9e95f8e38f1', 249: 'cb04035d-27e6-4661-9294-c931a99bbb29', 250: '450c677a-b3c0-4fd4-a217-cd6403107a88', 251: 'fe39ab6f-73bf-4662-bfb9-b11156eb61ec', 252: 'bb13e08a-d53c-4eb4-8460-42dec73ef180', 253: '9d59db0f-03bf-4693-8fda-62900ce6c176', 254: '3c15570b-8ee1-47b1-b84d-f866e7ba54d5', 255: '1c081acf-6ae1-44ec-bfc7-c1b15a7346ec', 256: 'ad66f694-e626-4a65-ac64-6671bb978fc2', 257: 'ed9af528-620e-4755-9810-9f46ed43c6b0', 258: 'ac95b7b3-c428-49f3-a1ff-02a1c4baa3f4', 259: '5400441d-3869-4474-9ac6-465f5c726a22', 260: '66e90d68-dcd8-41e0-a7ea-34373f631f8f', 261: '90395560-9857-4f76-a8f9-c1be5e1539f0', 262: '494c37d4-9b19-4198-a863-032498c6dac2', 263: 'd084c5a2-e416-44ce-b318-329bb972991d', 264: '194919cc-82e9-40d0-86cd-607fcb74722b', 265: '0b935f84-a899-4dac-80d2-d9c6c25accc0', 266: 'fbfc02e7-80fa-4fa8-b764-e01c01c57e95', 267: '01fc8669-ef8f-490a-8f5d-37f7b4660937', 268: '316d6db3-ca73-4563-84d2-1091b568aa75', 269: '7ac574e9-a85d-4c44-bb02-10ab88f2fed3', 270: '92709e14-1d24-4bf7-a6b3-ca4146de9c91', 271: 'd1d907ca-7133-420a-a597-42bf01cf6a0f', 272: '5c9ef400-fad5-4401-ae16-e84970548d1e', 273: '81b1cfc9-5e8f-4e36-996d-6e71dab33e2e', 274: '1fc6fae6-8dd1-455b-9fab-6fdef5ae5981', 275: '5ca1d458-620f-414b-b138-f59b8e3d849f', 276: '20b15df3-77d2-4cf0-bc4b-ea188a6e8e01', 277: '891d6c81-0d99-4ef3-bb8d-4f1aae164b30', 278: '182fdf7c-dc01-435c-9e7a-d6b90523d2ff', 279: 'f896224c-3f1c-4f6e-93d4-10ddff517ead', 280: '325b9499-bfd1-4964-86a6-6364d6c3bd23', 281: '0f3cbaa1-ceb3-4765-aeb6-fa22b0409206', 282: '955cc089-f428-4048-a955-1d4d4344ed82', 283: '7a071127-3ca5-4d2e-9828-be09d6f460a5', 284: '0da0ce0a-3acc-47dd-9359-5da7b7acee3a', 285: 'eceec2cc-40a0-4828-ac46-a8abdf54286e', 286: 'f76638d2-0744-4854-b1a5-74239f8f71d6', 287: 'ca0c715b-d835-4fa4-825e-e6409985d5d0', 288: '808a55ec-20ca-41b4-833d-cfde5dacfcc8', 289: 'aa9b64de-3321-4767-8a97-4d13a9b72482', 290: 'f25b1bbb-ab9a-488f-bd71-c41291383ef8', 291: 'f489008f-8040-4d71-a895-33b27753e1aa', 292: '219eaf78-bd07-47d1-bf84-cba5767fa423', 293: '2ffb9200-a4be-4f8d-911f-5ab53e2c04e0', 294: '5087b212-24cd-411b-a76f-40d96448dd31', 295: 'bc0b5f6f-ffe1-4f1a-b390-d8a2dea2b2d6', 296: 'b3f740de-07b5-4dd9-8581-30b38fb5755e', 297: 'c4e74dce-c316-4c8c-bc47-06c2edac09fc', 298: '2bc65b40-13d7-4b7e-994b-f85f34563b34', 299: '11490e57-1302-4f24-94f5-fc507fca893a', 300: '2b53dcf0-ac54-48a8-9468-378a804fb68b', 301: '02ab1377-4a6b-484d-8fa1-de602bae8add', 302: 'c45577d8-bdbe-49fe-8cce-261595f4caea', 303: 'd6390488-29f2-4d54-b7b6-1b41173f7986', 304: '7b166a3f-38c2-466a-a707-80bc4dd0cb65', 305: '3b2281ad-f69a-493a-a2b6-97e843980d55', 306: 'f667489e-e008-4678-aaf8-f457b70160f7', 307: 'b3946a97-3925-446e-a807-22c624586bc2', 308: '10078b39-2182-428c-adb5-020907e26c56', 309: '09d027a8-d392-4db9-b135-5ca8b24bf4ea', 310: 'ab5f094f-166d-4fc7-a951-2656b1231559', 311: 'bfe89036-3d2d-4538-91fc-b120e3a70860', 312: 'e680bd1a-08c5-4be7-af3a-5be5ada58cfa', 313: '8869f7ab-d2ff-4f87-bc7e-6b4b55c17cac', 314: 'e45abcc0-031a-475d-b622-7a82b29d0c1a', 315: '43e09c25-e3a9-494d-8a77-c7e333671367', 316: 'bdfdffe3-1ee7-44db-b31a-c155b43b26b7', 317: 'fd56d3da-fdf3-45ae-959d-8166079dd800', 318: 'c3cedd70-2a53-4f1a-a86d-fbeb19470361', 319: '5f92f44c-b3ad-4c25-a578-1fabe4748228', 320: '0c6d0dfe-0843-4721-b44a-fdfcb3a69035', 321: '87084c83-b3e4-4699-b23a-2bbee7781f9c', 322: 'f9dbf762-fab1-4945-9bd0-8431a12f8197', 323: 'ba56c311-0939-42cf-bae6-d02520d4eab9', 324: '694709fc-657d-4791-9315-7a4e52647ec4', 325: 'beed6da0-f262-43be-a58b-4d4439b5a301', 326: '900e6f63-dbd8-4a3e-a198-796748b0a24f', 327: 'ed79133a-9df2-4708-98c4-38cd53bcc996', 328: 'ea9985a2-e440-4db9-ab80-4c1b2e658a8c', 329: '3e055add-fee7-471e-83b5-d3c3dc119ab1', 330: '85bde486-aa2d-472b-a107-a8462b395d22', 331: 'c824d18a-2ad6-41d2-89ba-71b8ee908dc5', 332: '275f5135-572e-4bc5-b2cb-59df4876f45b', 333: '7165718a-ea77-4cb7-b46d-b87d303a2c09', 334: '825d75e2-161b-4b35-a830-901453bd8901', 335: 'be64155e-0b51-491a-9aed-350ea7f3301c', 336: '2b530317-7922-4e15-9ff8-0bd0610c7d82', 337: 'dbe7a8ad-d119-4fb2-b2ff-2e4e45f13250', 338: 'e5926d73-96dc-4e89-8426-2578683db16f', 339: '4ce762e0-4fd1-40a1-9adc-763c9539df96', 340: '0f1bc525-8af6-4db4-aff5-9a7e55be8bb5', 341: 'b5f2ab93-2395-4eb3-978f-cb0f081fe35f', 342: 'bbb7b55e-3bfc-4926-b6a3-5b230d16df67', 343: 'f83af651-599f-4cf6-82aa-ee454262ef20', 344: 'e64446da-457b-4bc9-8564-ff62faee416e', 345: 'c208e4d8-821f-4313-a5ef-877582a07eb4', 346: '2239d9fe-5bb8-45d4-a311-82d3b0063c63', 347: '3c2ee43e-fb5d-4011-8702-7f6918bdb226', 348: 'c0a3d067-c7ec-4241-8ae2-20271170d9dc', 349: '603cd249-db30-4498-b082-94f0744032e1', 350: '6f2fce0b-84fd-478e-b41b-a03284f7e8a2', 351: '1f285472-3a19-4a40-8967-c03828086c35', 352: 'd86a12ad-b3ab-4410-9ec8-72a2187fc187', 353: '2b338dab-128f-4893-9659-e0ef444ec2d4', 354: 'ef426dd4-e328-48e3-a3f2-21f86ab82e62', 355: '64b0be65-7646-42bd-b9e8-e422091203a4', 356: '6c4f2a4e-4896-4009-896f-e68f82fef471', 357: 'c91abdb8-aff5-4493-89fd-52a21d6e0e7b', 358: '03b19753-a655-425d-b3f0-537111c61fb7', 359: '5b3ff256-3aff-4f6c-8e1a-fb15fb1b7d2c', 360: '163387cb-c7b6-4aa6-b330-bbd9d7090d00', 361: 'da6905ff-0bf1-4754-94a3-0ce5f185d14a', 362: 'd0e01395-2858-4e42-b9e4-d5dc51e4f6af', 363: 'f20e206b-a8b3-4c0a-bc64-adda58dcfca0', 364: 'c81c9959-7dec-4225-a06c-25e7fa76d405', 365: 'beab4bb2-a04d-4212-ae69-0dfbaa58b07c', 366: '38ffdbc8-9b2a-4079-af75-c445db32acb8', 367: 'b022952c-ded3-429b-8528-6b87eaac940c', 368: 'a1d85293-a163-4efd-9c04-351d21dc6051', 369: '59a6f749-5255-41f3-b167-970d1de5f975', 370: '0961825a-c74b-4ec3-a63b-e112824d4eb5', 371: 'b907f7f8-68c6-4a28-b30c-2c0074f796e6', 372: '8a23c62a-c2b3-4f5d-9255-dc20c79673f7', 373: '834f92a8-41ad-4a0f-b870-2779d9e2212e', 374: '10f34180-953e-420e-aee8-5b0729c27a60', 375: 'cf90684c-a14b-4deb-8bb8-680a02fea8f5', 376: '11117a71-e937-4be9-afe9-422d257b8998', 377: '91d8ecfe-3910-45d3-9674-1ba3fb634eb3', 378: '4e5260e7-55f7-4bc8-af85-87006d0a0d43', 379: '9f1582ea-457c-4aaf-9036-3a9ff186dfdc', 380: '5f061db8-6d8b-410f-8a06-90728b072e8a', 381: '3cd4a16e-afa7-4b2e-a3d3-2d2f969cd7b1', 382: '68f9a3b1-967c-4ad9-8467-dea76eec3283', 383: '73cfc014-0c01-444a-a751-fa1a1fc0467b', 384: 'cec9a554-fde8-4221-bf9d-edafc3570c9a', 385: 'e87fbc75-a7e3-497b-a436-df35a80f76de', 386: '5b9a5047-075c-4c90-87ba-80bb8a88ae40', 387: '7a78c251-7e7c-4ba7-82ac-a569ec5a2cd7', 388: '35737c8b-4df5-4cb3-bec6-bd7b388b7275', 389: '2e58e70c-8901-42ae-b1d8-b581cf7766f5', 390: '545e9268-be30-41ba-8bbb-f4ff21e12393', 391: 'b48b2d64-0078-4787-9d99-3ddc0ae66726', 392: '7a4057df-e90c-44ae-91fd-0e1cba87e42b', 393: '0fcf0a52-28b8-4619-8b8a-fe527f173bb3', 394: '74875408-a4ae-47cd-a310-92cadeb23975', 395: 'e151eda7-1bae-46d2-8565-0c74292fda4b', 396: 'b9e2ef81-48c0-4516-9194-5d87378c39e0', 397: '826e3eb9-3a28-4567-94e4-7f239aa2dfa7', 398: '7c261c28-39d3-4bdb-b7a3-c031a4877e07', 399: '7fef0f5f-3302-4d24-b451-5acd1928cf3f', 400: 'e356dab2-dc49-4c23-93c8-a4db4eddd70f', 401: '8107fafb-a79d-4cd5-8fe4-d7190e995af9', 402: '2e1a092e-2362-4e47-b241-afc9692a2df7', 403: '5e934ac3-8872-4c7c-9913-3f12afbca9ca', 404: 'be22fbe7-97e5-422b-95c7-d02f9e8a000c', 405: '61f47e04-4573-4c2d-a6cc-d3d16bc03bf8', 406: '4f86c817-d93b-4d77-ae13-1866984bfe5d', 407: '379724b7-2442-4787-8ff3-fd82fba8a39b', 408: '0301d275-51f5-4a74-a557-20c08aff553a', 409: '846baef2-e556-4f2c-b02b-dec69fb91337', 410: '8afe5a7a-7397-4033-9443-896f6671d57b', 411: '73202129-caa0-4ab4-b2d1-6325cff82a5f', 412: '2233577f-265e-4a69-a3e6-34f40b368901', 413: '3011284d-3c98-4ac4-a68b-c228ef3c84b6', 414: '0307cbdb-5247-42ae-a819-7d5973191a54', 415: '3f265bab-8355-4c09-85ee-ce7ea5e6473b', 416: '8bb7bbbd-2a80-4d95-9830-17be84a70abb', 417: '85c111b8-f4c3-4375-ac76-1f71d5b3f2f3', 418: 'b949e4ae-c5c3-45f3-a558-56623a8174d7', 419: '0a83eecc-ca91-48dc-9e18-c85e0807b57a', 420: 'e5ba3493-ff7f-426a-ba55-0cf937cdc161', 421: 'a310844e-e659-4530-ab56-871c69ffc941', 422: '0811389b-e09d-41e8-bee1-42a4f11c2eba', 423: 'ebbc2e24-ecdf-4b70-9f95-20dfcd3b9689', 424: '81ad89e0-fa17-4102-8b3e-1a739105b19e', 425: 'e6d30614-d207-4827-9bdc-968901168f49', 426: '05033395-7646-4fd0-8cc9-3b856f5ca91f', 427: '512f8e8b-ffc1-4503-9a18-7d2adf905304', 428: '574a0a46-8e62-41c7-90dc-cb36f5a42ba6', 429: '3d704583-f8f3-481f-88f6-a6636c989c3f', 430: '472ec1a0-fa92-4f64-9e87-db6335f5a0b0', 431: '5a41ba13-8c5f-48f1-a40b-2d6f7b73ee2c', 432: 'f4c48c55-0e1a-44a9-a39d-3d8e3938d054', 433: '06b9f967-b1ec-495a-8db8-3bacd90c4af6', 434: '5ab71e02-5605-4498-b466-eb470740475d', 435: 'c7e1a7df-0cd7-4c26-bc9d-0a14d88557ab', 436: 'bb24f33f-161a-4de9-b09c-2a608e0007eb', 437: '9d3bc0fc-27fa-44aa-ae40-c274556a6025', 438: 'c72c1717-42fc-44de-8050-b397c2172f31', 439: 'eff1bc95-daba-4afa-8771-20a4e5ee7c5a', 440: '7e64d4f9-0eff-4985-b2fe-a3ff5a9031ab', 441: 'c4512c6a-36bf-4a82-a5a9-29b5ab13f1df', 442: 'bef169e4-021a-43a1-b78c-34a769ca6af7', 443: '329dbc10-00cc-476f-942b-b80b22108ca0', 444: '566402fa-e8d3-43e0-b879-a11c01ca8dcc', 445: 'fa57a324-6c70-4c38-b442-b562901a027c', 446: '2de202c8-6f08-4338-802c-29a49e71ac11', 447: '19c3d161-f7cf-447e-afea-a4ed05b707ac', 448: '402124dc-967e-4474-a706-3fbf49a2c260', 449: '96f9dad3-3737-46c7-a73d-e84795fc2f88', 450: '133d2c56-e74e-41d8-b3fc-0305f8159710', 451: 'b0bbb741-564e-4ed7-80df-cf9511311c7d', 452: 'ccfd4047-8d1d-4db0-baa0-05ae9a591a32', 453: '40a46907-68ee-47b8-8bda-4adb01a396f0', 454: '89bcfec2-2d77-4863-921a-b4f3059e25b0', 455: '3f9d08f1-4a4b-4bd5-94a0-66c29dbdc71f', 456: 'ff59c9ad-c2fc-4adc-a077-e63d641f4532', 457: 'e8ae50c6-5975-421d-a679-da2bcd6886c2', 458: '113aa2ef-9817-4070-8ac9-c2cf92d1a409', 459: '6cab9d1f-8c43-481b-aef9-7345d1bb30bc', 460: 'd9102412-2247-4684-995f-3082c04d7b40', 461: '36a64f25-7d4d-4b04-98e6-56f1f8a53695', 462: '400477a5-4265-4543-af3f-fc3405b2c30c', 463: '00de96a1-758d-45d7-b1e6-faeca4d81300', 464: '22cbe562-33bb-473c-8e13-5a734daa6065', 465: 'ce429c89-6352-4d23-9c61-d1fd3172eeb9', 466: 'fb01b8ec-f3f4-4506-af1c-26768c44a292', 467: '0ffeebdb-8f29-4059-b757-dd8ccc9b254b', 468: '4f46984b-aaca-4204-b296-e59d4f796e2e', 469: '5863ca0e-1316-45fd-bf2b-6bf2f0d00c76', 470: 'df74d2a1-8a79-4aa7-be52-2135e970b5d4', 471: '8d2cb12c-73de-4fbd-80d3-aa718ec13176', 472: '2f4f2b22-393c-4d13-8e28-8819093e2e2d', 473: '4db77bd3-ef93-423b-a40f-c1b951b5e0f9', 474: 'cc19c33a-aa99-4206-aae2-869a3a229847', 475: 'ee255e12-e851-4522-bb1f-a8f4e1ba6ced', 476: '42896996-fdca-4ba9-902b-92b015efd808', 477: '5c9e3221-8b4e-4993-86ce-b3f333606763', 478: '785ee7bd-c995-405e-a209-f74332d0a449', 479: 'aa17932e-fda4-4027-a2d6-d16236e2a77f', 480: 'a6768d70-5064-4f77-978e-25ce9f815bec', 481: '8fab4032-4adb-4bd5-af6b-54aae0621fe5', 482: 'a6a2b45c-4354-4a4a-b37a-d6005d1a9c3a', 483: '493dc3aa-18aa-430f-9858-7c4d95982858', 484: '8eeb3791-7a9b-4291-89c3-da540fe78001', 485: '1e2864f3-2efd-4d97-a76e-7c8c3d559b86', 486: '89dc77ae-c5a3-469e-a797-34023f79ee1c', 487: 'abf88ed3-0acc-4b11-8089-2a13acc65a9b', 488: '71c6ca76-4489-445d-9cc6-55a6695821a7', 489: 'd00fc4c6-360b-468d-865d-31d6749730c1', 490: 'fa60f040-4a67-453d-ada4-1628e3747f19', 491: 'ec436da8-7968-4ca3-ad38-09b16661efb8', 492: '841eceef-adc3-48f1-b41e-4781188edb28', 493: '4dc2e93c-5d2f-4f8b-9856-1c83591a4ae0', 494: '0655b40e-05d3-4ec4-9756-cc1680e2420b', 495: '8f00311f-3d09-4891-971f-c81344feebd0', 496: '11c94bb3-4d8a-479e-8d70-da59556e74a6', 497: '64f710a6-e9ed-4895-8071-2e8f58665961', 498: '0230612e-67c4-461a-9b21-b495d4fa43e1', 499: '426ec83a-86b8-4cdb-a962-11297f9bbac6', 500: 'cf6378a7-f8c4-407a-bd50-d9d7f99461f8', 501: 'fb239fb9-efb6-4220-845d-dd859d3bc2a1', 502: '5b918c4d-7757-4245-8f4e-2d9eff54a57b', 503: 'f7b10b70-cbac-489b-bc30-2a01ad931d26', 504: 'a65908c5-7cd4-4f59-84b4-1ef02c3e5997', 505: 'a96793db-33e8-47fb-a4a4-8573f4b11721', 506: '50ad460a-f9ef-4158-8a9d-5cabd289ab56', 507: 'ffa55604-35b5-4170-9a72-6c78636a41a3', 508: '894e0088-3821-4e8c-b42f-68fe12c3d067', 509: '05f49112-f676-4ccf-ac8f-9214501da798', 510: 'a4b470bb-1a4f-469b-8701-f427122e8ad2', 511: '74d81b59-d31c-4caa-96fd-28aea2696a97', 512: 'bfbcdedb-77ac-4670-b053-de0d8ab43f4f', 513: '63e44888-4939-4809-9c84-c281e15b7a76', 514: '32cdf18e-c80f-46f8-a6d9-0d9bd0658c0a', 515: '183d93e5-047c-4e9c-8f10-97f5e399a64b', 516: '037aafd9-3dac-4781-9710-ee605c3a0f6f', 517: '0ded80d7-830f-48ff-957e-41fae6ade3be', 518: '870b885f-4c0a-47c7-8742-0c42c377c6d7', 519: 'e235330e-92a9-4b2f-9219-83b84a4d887c', 520: '98ee6ce2-2541-4da9-aa55-4dfa8feb6e7c', 521: 'e60fd11e-c894-49e6-bca6-8d613955791e', 522: 'b3d83639-68be-4b17-a1d3-9900766a5f26', 523: 'cf6caa38-3d5f-42fa-a5c2-3c6d0055aa7a', 524: 'c16d2c68-530f-44e9-9b1b-0ba6a56dd071', 525: '181d2004-ad71-4494-be5f-09887423ceb1', 526: 'b6cace80-b6e6-4cda-bfae-9d3fd466269e', 527: 'e710286f-952a-42b2-8d1a-c0fc0f28345c', 528: 'b7f14a76-a560-4a6b-a29a-b595e9c5eb1c', 529: '7ad26366-60fc-4806-9b0c-ad331acd2098', 530: 'b724f650-0f85-4910-ab32-be103ae1ec95', 531: '9fb8caec-2e59-4f7c-9895-527963cb52fd', 532: 'a7ead3e1-db6d-4a97-8a4b-0aabb7051b2a', 533: '19033937-cfa1-44d0-9753-e15450363ad6', 534: 'e57ac5d8-871e-44b5-8865-1f64ab7dcbc3', 535: '04f34819-40f7-470b-bcbb-4fd0d11bdd2c', 536: 'fa76ed6f-baf1-447e-82e0-472cbcbc841b', 537: 'a891c85f-b24d-4841-917f-ecaa3e2a8089', 538: '6603ac29-d55a-48fd-b102-0ba3843a2a6d', 539: '94e7195f-e552-42ed-bd09-9cf85c88e253', 540: 'c57a1056-a905-4000-aa54-846a36c177da', 541: '0b5e5b12-bcde-4526-b6d5-859f71c97338', 542: '20f05715-8867-4497-94ad-e563b9f29d04', 543: '5aa09c02-5ec5-42b6-bd5a-4ce6ff6e038b', 544: 'c156f881-4287-47d1-bd46-1aeee4add3db', 545: '694fd04d-fed5-4361-9f17-e6f41d640fda', 546: '6351bd4f-f799-46c7-b388-e00d77fe109c', 547: '230f4693-6e41-403d-8205-d2439fcb2be4', 548: 'a38dbbe8-fc8c-43da-b826-a244f2da4500', 549: '4f2d91d2-2782-4256-8e31-d7da220577c2', 550: 'cee81f2a-3fad-4c75-aa2e-1ccb39fd8a68', 551: 'e1cabbd0-2e9e-459e-9573-76c13acd96d9', 552: 'bb318eaa-5583-456a-b415-b2fdd154d0cc', 553: '8ce00aa4-0b48-4c4e-a2dd-6e801da749ab', 554: '226252a1-d4d6-44fb-943e-28bbfd3e6667', 555: 'abc92463-fd61-4219-ae4d-63884b1b5be2', 556: 'd23b5039-d9d6-4d36-9be8-cada90e51d50', 557: '17ab1f56-26c9-4738-911c-6426a5d301ad', 558: 'ea7fc16e-6315-43a5-bc70-c14b33c8208c', 559: 'c5f7f575-716b-4909-853c-a70c0d766e0a', 560: 'aff907ba-7aea-4dee-bc42-23c2dbd97bef', 561: '82054fe4-7726-48c2-9428-844611e3d9e8', 562: '867d6bc0-3c1a-42bb-835d-27bf188aa57d', 563: '04af91b0-6c3f-4a6d-a2ba-e891bde96b20', 564: '8bfdaef7-0304-419f-bf32-9f3e8d03c88a', 565: '9a38265f-d8a4-42ac-81ec-b720eb6e8ad3', 566: '430c3ae5-2c75-4871-a518-bfb6907f9799', 567: '11016775-4f3f-4535-8841-80f49cca5f7f', 568: 'd5b70e2e-7aff-4027-bbfb-b261dce6c5f5', 569: 'f749b280-4a57-484e-840f-ff6f2acdace7', 570: 'ed75663a-6698-4c1c-a5d2-6e0139640619', 571: '5d26c2b9-1b22-4b64-9586-4307ea8c4712', 572: '50f9c4b0-8f13-421c-99c7-ac097b65aad2', 573: 'b75a1c72-822b-4a41-8972-6cb31ed914e4', 574: '30c5e271-9657-45f5-82fd-6a34720c66ee', 575: '8796fbf9-1c10-4e05-9517-5454f2449873', 576: '2b0aac29-bbcd-401f-b733-086f32dc9b5a', 577: 'ecbc5a7c-446f-4ac7-b213-1c020406cf9f', 578: '2181fe57-4b52-4254-b347-4ce77773ac0c', 579: '4f3e3a92-df26-470f-9156-1d7b1f03bb0a', 580: '566d4014-4130-4840-804b-194e54503e75', 581: 'a9b036ce-7b07-4c75-b127-f3e39315e060', 582: '68faee9a-67ac-406c-b87b-c102efa22c52', 583: '44b51398-2586-4303-a820-162c9e0c6926', 584: '01a8eec3-3c33-4d99-9009-6f13d0ca7033', 585: '51f59225-e11c-40fb-b4ec-c242f3728071', 586: 'f4d488e8-7a5a-4c37-b392-7a1d81af280e', 587: '9d46c61e-124f-4a28-a879-cf23fd727d0d', 588: '27251668-9518-4110-8910-2095bea59ec8', 589: '64a7a0d6-be2b-455a-9cb6-c01b8d4d8d7d', 590: '88c2fb7a-b598-459c-a8ae-e360ae35b00a', 591: 'a76faf63-eced-44e0-86db-1d064b0f7704', 592: '569da136-0c92-4a32-9049-68d85967265b', 593: 'fe73fa38-dc3f-452d-a6ee-5791a8fa03c7', 594: '33143f4f-2dd7-46b3-8937-65179aeaab75', 595: '3d85be79-b6f0-48dd-9b25-f420bca9e7cf', 596: '8b374bef-b392-4240-85aa-bdca09da5302', 597: '05b05d25-b37a-4677-861d-25606fbe716b', 598: '96be93ac-dc9b-4e36-b5b3-40c88ad4830c', 599: '9aa78df1-f55a-4058-8557-87367763f2e7', 600: 'b24a4777-823c-42ac-b0de-3d71bb9534b5', 601: 'f772ed85-05f6-463f-b92d-ee02b9624083', 602: 'e349f234-26a5-42e1-b40e-e16eab4340b1', 603: '38d5458e-4618-493b-b221-96541967dc53', 604: '7667b39d-1237-4858-8d30-a020b84c8a41', 605: 'f762c733-1df9-46f9-9906-ef0c5fcdecf1', 606: 'ed7508f0-3f7a-4233-8753-a86bb85858c1'}
2025-07-07 02:25:10,073 - INFO - length of chunks: 607
